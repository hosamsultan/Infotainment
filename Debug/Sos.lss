
Sos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002d60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00002d60  00002df4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  00800106  00800106  00002e9a  2**0
                  ALLOC
  3 .stab         00002a0c  00000000  00000000  00002e9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001152  00000000  00000000  000058a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  000069fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00006b5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000adb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000af34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7f 14 	jmp	0x28fe	; 0x28fe <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e6       	ldi	r30, 0x60	; 96
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <main>
      8a:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ab e8       	ldi	r26, 0x8B	; 139
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8b e8       	ldi	r24, 0x8B	; 139
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 93 16 	jmp	0x2d26	; 0x2d26 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7f 16 	jmp	0x2cfe	; 0x2cfe <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6b e8       	ldi	r22, 0x8B	; 139
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9b 16 	jmp	0x2d36	; 0x2d36 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 83 16 	jmp	0x2d06	; 0x2d06 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9f 16 	jmp	0x2d3e	; 0x2d3e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 87 16 	jmp	0x2d0e	; 0x2d0e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a3 16 	jmp	0x2d46	; 0x2d46 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <scan_btn1>:
#include "Buttons.h"

#include "Gpio.h"
#include "del.h"
uint8 scan_btn1(void)  //keypad button 1 pull up resistor
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn1)==0)
     caa:	8a e0       	ldi	r24, 0x0A	; 10
     cac:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cb0:	88 23       	and	r24, r24
     cb2:	69 f4       	brne	.+26     	; 0xcce <scan_btn1+0x30>
		{
			del_ms(30);
     cb4:	6e e1       	ldi	r22, 0x1E	; 30
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 ac 14 	call	0x2958	; 0x2958 <del_ms>
			if(DIO_ReadPin(btn1)==0)
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cc6:	88 23       	and	r24, r24
     cc8:	11 f4       	brne	.+4      	; 0xcce <scan_btn1+0x30>
			{
				ret=1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <scan_btn0>:

uint8 scan_btn0(void)  //button pull down resistor
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
     ce2:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn0))
     ce4:	84 e1       	ldi	r24, 0x14	; 20
     ce6:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cea:	88 23       	and	r24, r24
     cec:	69 f0       	breq	.+26     	; 0xd08 <scan_btn0+0x30>
		{
			del_ms(30);
     cee:	6e e1       	ldi	r22, 0x1E	; 30
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 ac 14 	call	0x2958	; 0x2958 <del_ms>
			if(DIO_ReadPin(btn0))
     cfa:	84 e1       	ldi	r24, 0x14	; 20
     cfc:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     d00:	88 23       	and	r24, r24
     d02:	11 f0       	breq	.+4      	; 0xd08 <scan_btn0+0x30>
			{
				ret=1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <DIO_WritePin>:
#include "Gpio.h"



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <DIO_WritePin+0x6>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==LOW)
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 23       	and	r24, r24
     d24:	09 f0       	breq	.+2      	; 0xd28 <DIO_WritePin+0x16>
     d26:	74 c0       	rjmp	.+232    	; 0xe10 <DIO_WritePin+0xfe>
	{
		if((PinNum>=0)&&(PinNum<=7))   //PORT A
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	88 30       	cpi	r24, 0x08	; 8
     d2c:	a8 f4       	brcc	.+42     	; 0xd58 <DIO_WritePin+0x46>
		{
			Clr_Bit(PORTA,PinNum);
     d2e:	ab e3       	ldi	r26, 0x3B	; 59
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	eb e3       	ldi	r30, 0x3B	; 59
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_WritePin+0x3a>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_WritePin+0x36>
     d50:	80 95       	com	r24
     d52:	84 23       	and	r24, r20
     d54:	8c 93       	st	X, r24
     d56:	cd c0       	rjmp	.+410    	; 0xef2 <DIO_WritePin+0x1e0>
		}

		else if((PinNum>=8)&&(PinNum<=15)) // PORT B
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 30       	cpi	r24, 0x08	; 8
     d5c:	d8 f0       	brcs	.+54     	; 0xd94 <DIO_WritePin+0x82>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	80 31       	cpi	r24, 0x10	; 16
     d62:	c0 f4       	brcc	.+48     	; 0xd94 <DIO_WritePin+0x82>
		{
			Clr_Bit(PORTB,(PinNum-8));
     d64:	a8 e3       	ldi	r26, 0x38	; 56
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e8 e3       	ldi	r30, 0x38	; 56
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9c 01       	movw	r18, r24
     d78:	28 50       	subi	r18, 0x08	; 8
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_WritePin+0x76>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_WritePin+0x72>
     d8c:	80 95       	com	r24
     d8e:	84 23       	and	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	af c0       	rjmp	.+350    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=16)&&(PinNum<=23)) //PORT C
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	80 31       	cpi	r24, 0x10	; 16
     d98:	d8 f0       	brcs	.+54     	; 0xdd0 <DIO_WritePin+0xbe>
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	88 31       	cpi	r24, 0x18	; 24
     d9e:	c0 f4       	brcc	.+48     	; 0xdd0 <DIO_WritePin+0xbe>
		{
			Clr_Bit(PORTC,(PinNum-16));
     da0:	a5 e3       	ldi	r26, 0x35	; 53
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e5 e3       	ldi	r30, 0x35	; 53
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 01       	movw	r18, r24
     db4:	20 51       	subi	r18, 0x10	; 16
     db6:	30 40       	sbci	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_WritePin+0xb2>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_WritePin+0xae>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	91 c0       	rjmp	.+290    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=24)&&(PinNum<=31)) //PORT D
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	88 31       	cpi	r24, 0x18	; 24
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <DIO_WritePin+0xc6>
     dd6:	8d c0       	rjmp	.+282    	; 0xef2 <DIO_WritePin+0x1e0>
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	80 32       	cpi	r24, 0x20	; 32
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <DIO_WritePin+0xce>
     dde:	89 c0       	rjmp	.+274    	; 0xef2 <DIO_WritePin+0x1e0>
		{
			Clr_Bit(PORTD,(PinNum-24));
     de0:	a2 e3       	ldi	r26, 0x32	; 50
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e2 e3       	ldi	r30, 0x32	; 50
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9c 01       	movw	r18, r24
     df4:	28 51       	subi	r18, 0x18	; 24
     df6:	30 40       	sbci	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_WritePin+0xf2>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_WritePin+0xee>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	71 c0       	rjmp	.+226    	; 0xef2 <DIO_WritePin+0x1e0>
		}
	}
	else if(PinValue==HIGH)
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	09 f0       	breq	.+2      	; 0xe18 <DIO_WritePin+0x106>
     e16:	6d c0       	rjmp	.+218    	; 0xef2 <DIO_WritePin+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	a0 f4       	brcc	.+40     	; 0xe46 <DIO_WritePin+0x134>
		{
			Set_Bit(PORTA,PinNum);
     e1e:	ab e3       	ldi	r26, 0x3B	; 59
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	eb e3       	ldi	r30, 0x3B	; 59
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_WritePin+0x12a>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_WritePin+0x126>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	56 c0       	rjmp	.+172    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=8&&PinNum<=15))	//PORT B
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	d0 f0       	brcs	.+52     	; 0xe80 <DIO_WritePin+0x16e>
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	80 31       	cpi	r24, 0x10	; 16
     e50:	b8 f4       	brcc	.+46     	; 0xe80 <DIO_WritePin+0x16e>
		{
			Set_Bit(PORTB,(PinNum-8));
     e52:	a8 e3       	ldi	r26, 0x38	; 56
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e8 e3       	ldi	r30, 0x38	; 56
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9c 01       	movw	r18, r24
     e66:	28 50       	subi	r18, 0x08	; 8
     e68:	30 40       	sbci	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_WritePin+0x164>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_WritePin+0x160>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	39 c0       	rjmp	.+114    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=16&&PinNum<=23))	//PORT C
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 31       	cpi	r24, 0x10	; 16
     e84:	d0 f0       	brcs	.+52     	; 0xeba <DIO_WritePin+0x1a8>
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	88 31       	cpi	r24, 0x18	; 24
     e8a:	b8 f4       	brcc	.+46     	; 0xeba <DIO_WritePin+0x1a8>
		{
			Set_Bit(PORTC,(PinNum-16));
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 01       	movw	r18, r24
     ea0:	20 51       	subi	r18, 0x10	; 16
     ea2:	30 40       	sbci	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_WritePin+0x19e>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_WritePin+0x19a>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	1c c0       	rjmp	.+56     	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=24&&PinNum<=31))	//PORT D
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	88 31       	cpi	r24, 0x18	; 24
     ebe:	c8 f0       	brcs	.+50     	; 0xef2 <DIO_WritePin+0x1e0>
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	80 32       	cpi	r24, 0x20	; 32
     ec4:	b0 f4       	brcc	.+44     	; 0xef2 <DIO_WritePin+0x1e0>
		{
			Set_Bit(PORTD,(PinNum-24));
     ec6:	a2 e3       	ldi	r26, 0x32	; 50
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e2 e3       	ldi	r30, 0x32	; 50
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 01       	movw	r18, r24
     eda:	28 51       	subi	r18, 0x18	; 24
     edc:	30 40       	sbci	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_WritePin+0x1d8>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_WritePin+0x1d4>
     eee:	84 2b       	or	r24, r20
     ef0:	8c 93       	st	X, r24
		}
	}
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <DIO_ReadPin+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 res=0;
     f08:	19 82       	std	Y+1, r1	; 0x01
	if((PinNum>=0)&&(PinNum<=7))	//PORT A
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 30       	cpi	r24, 0x08	; 8
     f0e:	90 f4       	brcc	.+36     	; 0xf34 <DIO_ReadPin+0x38>
	{
		res= Get_Bit(PINA,PinNum);
     f10:	e9 e3       	ldi	r30, 0x39	; 57
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_ReadPin+0x2e>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_ReadPin+0x2a>
     f2e:	84 23       	and	r24, r20
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	50 c0       	rjmp	.+160    	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=8)&&(PinNum<=15))	//PORT B
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	88 30       	cpi	r24, 0x08	; 8
     f38:	c0 f0       	brcs	.+48     	; 0xf6a <DIO_ReadPin+0x6e>
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	80 31       	cpi	r24, 0x10	; 16
     f3e:	a8 f4       	brcc	.+42     	; 0xf6a <DIO_ReadPin+0x6e>
	{
		res= Get_Bit(PINB,(PinNum-8));
     f40:	e6 e3       	ldi	r30, 0x36	; 54
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9c 01       	movw	r18, r24
     f50:	28 50       	subi	r18, 0x08	; 8
     f52:	30 40       	sbci	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_ReadPin+0x64>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_ReadPin+0x60>
     f64:	84 23       	and	r24, r20
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	35 c0       	rjmp	.+106    	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=16)&&(PinNum<=23))	//PORT C
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	80 31       	cpi	r24, 0x10	; 16
     f6e:	c0 f0       	brcs	.+48     	; 0xfa0 <DIO_ReadPin+0xa4>
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	88 31       	cpi	r24, 0x18	; 24
     f74:	a8 f4       	brcc	.+42     	; 0xfa0 <DIO_ReadPin+0xa4>
	{
		res= Get_Bit(PINC,(PinNum-16));
     f76:	e3 e3       	ldi	r30, 0x33	; 51
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9c 01       	movw	r18, r24
     f86:	20 51       	subi	r18, 0x10	; 16
     f88:	30 40       	sbci	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_ReadPin+0x9a>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_ReadPin+0x96>
     f9a:	84 23       	and	r24, r20
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	1a c0       	rjmp	.+52     	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=24)&&(PinNum<=31))	//PORT D
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	88 31       	cpi	r24, 0x18	; 24
     fa4:	b8 f0       	brcs	.+46     	; 0xfd4 <DIO_ReadPin+0xd8>
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	80 32       	cpi	r24, 0x20	; 32
     faa:	a0 f4       	brcc	.+40     	; 0xfd4 <DIO_ReadPin+0xd8>
	{
		res= Get_Bit(PIND,(PinNum-24));
     fac:	e0 e3       	ldi	r30, 0x30	; 48
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9c 01       	movw	r18, r24
     fbc:	28 51       	subi	r18, 0x18	; 24
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_ReadPin+0xd0>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_ReadPin+0xcc>
     fd0:	84 23       	and	r24, r20
     fd2:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_SetPinDirection+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==OUTPUT)						//set pin direction high
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <DIO_SetPinDirection+0x16>
     ff4:	70 c0       	rjmp	.+224    	; 0x10d6 <DIO_SetPinDirection+0xf6>
	{
		if((PinNum>=0)&&(PinNum<=7))	//PORT A
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	88 30       	cpi	r24, 0x08	; 8
     ffa:	a0 f4       	brcc	.+40     	; 0x1024 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     ffc:	aa e3       	ldi	r26, 0x3A	; 58
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ea e3       	ldi	r30, 0x3A	; 58
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_SetPinDirection+0x3a>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_SetPinDirection+0x36>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	ce c0       	rjmp	.+412    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	d0 f0       	brcs	.+52     	; 0x105e <DIO_SetPinDirection+0x7e>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	80 31       	cpi	r24, 0x10	; 16
    102e:	b8 f4       	brcc	.+46     	; 0x105e <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9c 01       	movw	r18, r24
    1044:	28 50       	subi	r18, 0x08	; 8
    1046:	30 40       	sbci	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_SetPinDirection+0x74>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_SetPinDirection+0x70>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	b1 c0       	rjmp	.+354    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 31       	cpi	r24, 0x10	; 16
    1062:	d0 f0       	brcs	.+52     	; 0x1098 <DIO_SetPinDirection+0xb8>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 31       	cpi	r24, 0x18	; 24
    1068:	b8 f4       	brcc	.+46     	; 0x1098 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
    106a:	a4 e3       	ldi	r26, 0x34	; 52
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 01       	movw	r18, r24
    107e:	20 51       	subi	r18, 0x10	; 16
    1080:	30 40       	sbci	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_SetPinDirection+0xae>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_SetPinDirection+0xaa>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	94 c0       	rjmp	.+296    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=24)&&(PinNum<=31))		//PORT D
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	88 31       	cpi	r24, 0x18	; 24
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <DIO_SetPinDirection+0xc0>
    109e:	90 c0       	rjmp	.+288    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	80 32       	cpi	r24, 0x20	; 32
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <DIO_SetPinDirection+0xc8>
    10a6:	8c c0       	rjmp	.+280    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRD,(PinNum-24));
    10a8:	a1 e3       	ldi	r26, 0x31	; 49
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e1 e3       	ldi	r30, 0x31	; 49
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 01       	movw	r18, r24
    10bc:	28 51       	subi	r18, 0x18	; 24
    10be:	30 40       	sbci	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_SetPinDirection+0xec>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_SetPinDirection+0xe8>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	75 c0       	rjmp	.+234    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==INPUT)
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 23       	and	r24, r24
    10da:	09 f0       	breq	.+2      	; 0x10de <DIO_SetPinDirection+0xfe>
    10dc:	71 c0       	rjmp	.+226    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	a8 f4       	brcc	.+42     	; 0x110e <DIO_SetPinDirection+0x12e>
		{
			Clr_Bit(DDRA,PinNum);
    10e4:	aa e3       	ldi	r26, 0x3A	; 58
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ea e3       	ldi	r30, 0x3A	; 58
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_SetPinDirection+0x122>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_SetPinDirection+0x11e>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	59 c0       	rjmp	.+178    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 30       	cpi	r24, 0x08	; 8
    1112:	d8 f0       	brcs	.+54     	; 0x114a <DIO_SetPinDirection+0x16a>
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	80 31       	cpi	r24, 0x10	; 16
    1118:	c0 f4       	brcc	.+48     	; 0x114a <DIO_SetPinDirection+0x16a>
		{
			Clr_Bit(DDRB,(PinNum-8));
    111a:	a7 e3       	ldi	r26, 0x37	; 55
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e3       	ldi	r30, 0x37	; 55
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9c 01       	movw	r18, r24
    112e:	28 50       	subi	r18, 0x08	; 8
    1130:	30 40       	sbci	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_SetPinDirection+0x15e>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_SetPinDirection+0x15a>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	3b c0       	rjmp	.+118    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	80 31       	cpi	r24, 0x10	; 16
    114e:	d8 f0       	brcs	.+54     	; 0x1186 <DIO_SetPinDirection+0x1a6>
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	88 31       	cpi	r24, 0x18	; 24
    1154:	c0 f4       	brcc	.+48     	; 0x1186 <DIO_SetPinDirection+0x1a6>
		{
			Clr_Bit(DDRC,(PinNum-16));
    1156:	a4 e3       	ldi	r26, 0x34	; 52
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e4 e3       	ldi	r30, 0x34	; 52
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9c 01       	movw	r18, r24
    116a:	20 51       	subi	r18, 0x10	; 16
    116c:	30 40       	sbci	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_SetPinDirection+0x19a>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_SetPinDirection+0x196>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	1d c0       	rjmp	.+58     	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=24)&&(PinNum<=31)) 	//PORT D
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	88 31       	cpi	r24, 0x18	; 24
    118a:	d0 f0       	brcs	.+52     	; 0x11c0 <DIO_SetPinDirection+0x1e0>
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	80 32       	cpi	r24, 0x20	; 32
    1190:	b8 f4       	brcc	.+46     	; 0x11c0 <DIO_SetPinDirection+0x1e0>

		{
			Clr_Bit(DDRD,(PinNum-24));
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 01       	movw	r18, r24
    11a6:	28 51       	subi	r18, 0x18	; 24
    11a8:	30 40       	sbci	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_SetPinDirection+0x1d6>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_SetPinDirection+0x1d2>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
		}
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <Global_Interrupt_Enable>:


#include "Interrupt.h"

void Global_Interrupt_Enable(void)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,I);
    11d2:	af e5       	ldi	r26, 0x5F	; 95
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	ef e5       	ldi	r30, 0x5F	; 95
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	80 68       	ori	r24, 0x80	; 128
    11de:	8c 93       	st	X, r24
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <Timer1_overflow_Interrupt_Enable>:

void Timer1_overflow_Interrupt_Enable(void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TOIE1);
    11ee:	a9 e5       	ldi	r26, 0x59	; 89
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e9 e5       	ldi	r30, 0x59	; 89
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	84 60       	ori	r24, 0x04	; 4
    11fa:	8c 93       	st	X, r24
}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <Timer0_overflow_Interrupt_Enable>:
void Timer0_overflow_Interrupt_Enable(void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TOIE0);
    120a:	a9 e5       	ldi	r26, 0x59	; 89
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e9 e5       	ldi	r30, 0x59	; 89
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	8c 93       	st	X, r24
}
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <Timer1_Input_capture_Interrupt_Enable>:
void Timer1_Input_capture_Interrupt_Enable(void)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TICIE1);
    1226:	a9 e5       	ldi	r26, 0x59	; 89
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e5       	ldi	r30, 0x59	; 89
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 62       	ori	r24, 0x20	; 32
    1232:	8c 93       	st	X, r24
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <Ext2_Interrupt2_Enable>:

void Ext2_Interrupt2_Enable(void)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    Set_Bit(GICR,INT2);
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 62       	ori	r24, 0x20	; 32
    124e:	8c 93       	st	X, r24
}
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <Ext2_Interrupt2_Mode>:

void Ext2_Interrupt2_Mode(uint8 mode)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <Ext2_Interrupt2_Mode+0x6>
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3b 83       	std	Y+3, r19	; 0x03
    126c:	2a 83       	std	Y+2, r18	; 0x02
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	31 f0       	breq	.+12     	; 0x1282 <Ext2_Interrupt2_Mode+0x2c>
    1276:	2a 81       	ldd	r18, Y+2	; 0x02
    1278:	3b 81       	ldd	r19, Y+3	; 0x03
    127a:	21 30       	cpi	r18, 0x01	; 1
    127c:	31 05       	cpc	r19, r1
    127e:	49 f0       	breq	.+18     	; 0x1292 <Ext2_Interrupt2_Mode+0x3c>
    1280:	0f c0       	rjmp	.+30     	; 0x12a0 <Ext2_Interrupt2_Mode+0x4a>
		{
		case 0:
			 Clr_Bit(MCUCSR,ISC2);
    1282:	a4 e5       	ldi	r26, 0x54	; 84
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e4 e5       	ldi	r30, 0x54	; 84
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8f 7b       	andi	r24, 0xBF	; 191
    128e:	8c 93       	st	X, r24
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <Ext2_Interrupt2_Mode+0x4a>
			break;
		case 1:
			Set_Bit(MCUCSR,ISC2);
    1292:	a4 e5       	ldi	r26, 0x54	; 84
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e4 e5       	ldi	r30, 0x54	; 84
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 64       	ori	r24, 0x40	; 64
    129e:	8c 93       	st	X, r24
			break;
		}
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG,I);
    12b4:	af e5       	ldi	r26, 0x5F	; 95
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ef e5       	ldi	r30, 0x5F	; 95
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 77       	andi	r24, 0x7F	; 127
    12c0:	8c 93       	st	X, r24
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Timer0_overflow_Interrupt_Disable>:

void Timer0_overflow_Interrupt_Disable()
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK,TOIE0);
    12d0:	a9 e5       	ldi	r26, 0x59	; 89
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e9 e5       	ldi	r30, 0x59	; 89
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8e 7f       	andi	r24, 0xFE	; 254
    12dc:	8c 93       	st	X, r24
}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <KeyPad_Init>:
 *
 * description: this function initialize the key pad
 *
 ******************************************************************/
void KeyPad_Init(void)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(col1,OUTPUT);
    12ec:	85 e1       	ldi	r24, 0x15	; 21
    12ee:	61 e0       	ldi	r22, 0x01	; 1
    12f0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(col2,OUTPUT);
    12f4:	86 e1       	ldi	r24, 0x16	; 22
    12f6:	61 e0       	ldi	r22, 0x01	; 1
    12f8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(col3,OUTPUT);
    12fc:	87 e1       	ldi	r24, 0x17	; 23
    12fe:	61 e0       	ldi	r22, 0x01	; 1
    1300:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(row1,INPUT);
    1304:	82 e1       	ldi	r24, 0x12	; 18
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(row2,INPUT);
    130c:	83 e1       	ldi	r24, 0x13	; 19
    130e:	60 e0       	ldi	r22, 0x00	; 0
    1310:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(row3,INPUT);
    1314:	84 e1       	ldi	r24, 0x14	; 20
    1316:	60 e0       	ldi	r22, 0x00	; 0
    1318:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_WritePin(col1,HIGH);
    131c:	85 e1       	ldi	r24, 0x15	; 21
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(col2,HIGH);
    1324:	86 e1       	ldi	r24, 0x16	; 22
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(col3,HIGH);
    132c:	87 e1       	ldi	r24, 0x17	; 23
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(row1,HIGH);
    1334:	82 e1       	ldi	r24, 0x12	; 18
    1336:	61 e0       	ldi	r22, 0x01	; 1
    1338:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(row2,HIGH);
    133c:	83 e1       	ldi	r24, 0x13	; 19
    133e:	61 e0       	ldi	r22, 0x01	; 1
    1340:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(row3,HIGH);
    1344:	84 e1       	ldi	r24, 0x14	; 20
    1346:	61 e0       	ldi	r22, 0x01	; 1
    1348:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    134c:	cf 91       	pop	r28
    134e:	df 91       	pop	r29
    1350:	08 95       	ret

00001352 <Get_KeyVal>:
 * description: this function checks if any key is pressed and returns the
 *               value of that button and it's status
 *
 ****************************************************************************/
Button_Status Get_KeyVal(uint8* Value_ptr)
{
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	cd b7       	in	r28, 0x3d	; 61
    1358:	de b7       	in	r29, 0x3e	; 62
    135a:	28 97       	sbiw	r28, 0x08	; 8
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	de bf       	out	0x3e, r29	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	cd bf       	out	0x3d, r28	; 61
    1366:	9e 83       	std	Y+6, r25	; 0x06
    1368:	8d 83       	std	Y+5, r24	; 0x05
	/*the current column position*/
	uint8 Col_Loc = 0;
    136a:	1c 82       	std	Y+4, r1	; 0x04
	/*the current row position*/
	uint8 Row_Loc = 0;
    136c:	1b 82       	std	Y+3, r1	; 0x03
	/*the temp variable to check if a button is pressed*/
	uint8 Temp = 0;
    136e:	1a 82       	std	Y+2, r1	; 0x02
	/*the returned status of the button*/
	Button_Status returned_Status = Not_Pressed;
    1370:	19 82       	std	Y+1, r1	; 0x01
	/*the current status of the button*/
	static Button_Status Status = Not_Pressed;


	/*looping on the columns*/
	for(Col_Loc = 0 ; Col_Loc <= 2 ; Col_Loc++ )
    1372:	1c 82       	std	Y+4, r1	; 0x04
    1374:	6e c0       	rjmp	.+220    	; 0x1452 <Get_KeyVal+0x100>
	{
		/*output value zero on the columns*/
		DIO_WritePin((Col_Loc+col1) , LOW);
    1376:	8c 81       	ldd	r24, Y+4	; 0x04
    1378:	8b 5e       	subi	r24, 0xEB	; 235
    137a:	60 e0       	ldi	r22, 0x00	; 0
    137c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
		/*looping on the rows*/
		for(Row_Loc = 0 ; Row_Loc <= 2 ; Row_Loc++ )
    1380:	1b 82       	std	Y+3, r1	; 0x03
    1382:	5b c0       	rjmp	.+182    	; 0x143a <Get_KeyVal+0xe8>
		{
			/*hold the current value of this current button*/
			Temp = DIO_ReadPin(Row_Loc + row1);
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	8e 5e       	subi	r24, 0xEE	; 238
    1388:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
    138c:	8a 83       	std	Y+2, r24	; 0x02
			/*checking if this current button is pressed and this button  is in columns 0('Y' button)
			 *   or columns 1('N' button) and in row0*/
			if((!Temp) && ((Col_Loc == 0) || (Col_Loc == 1))  && (Row_Loc == 0) )
    138e:	8a 81       	ldd	r24, Y+2	; 0x02
    1390:	88 23       	and	r24, r24
    1392:	09 f0       	breq	.+2      	; 0x1396 <Get_KeyVal+0x44>
    1394:	3e c0       	rjmp	.+124    	; 0x1412 <Get_KeyVal+0xc0>
    1396:	8c 81       	ldd	r24, Y+4	; 0x04
    1398:	88 23       	and	r24, r24
    139a:	19 f0       	breq	.+6      	; 0x13a2 <Get_KeyVal+0x50>
    139c:	8c 81       	ldd	r24, Y+4	; 0x04
    139e:	81 30       	cpi	r24, 0x01	; 1
    13a0:	c1 f5       	brne	.+112    	; 0x1412 <Get_KeyVal+0xc0>
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	88 23       	and	r24, r24
    13a6:	a9 f5       	brne	.+106    	; 0x1412 <Get_KeyVal+0xc0>
			{
				/*checking the status of the button*/
				switch(Status)
    13a8:	80 91 06 01 	lds	r24, 0x0106
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	38 87       	std	Y+8, r19	; 0x08
    13b2:	2f 83       	std	Y+7, r18	; 0x07
    13b4:	8f 81       	ldd	r24, Y+7	; 0x07
    13b6:	98 85       	ldd	r25, Y+8	; 0x08
    13b8:	81 30       	cpi	r24, 0x01	; 1
    13ba:	91 05       	cpc	r25, r1
    13bc:	69 f0       	breq	.+26     	; 0x13d8 <Get_KeyVal+0x86>
    13be:	2f 81       	ldd	r18, Y+7	; 0x07
    13c0:	38 85       	ldd	r19, Y+8	; 0x08
    13c2:	22 30       	cpi	r18, 0x02	; 2
    13c4:	31 05       	cpc	r19, r1
    13c6:	61 f0       	breq	.+24     	; 0x13e0 <Get_KeyVal+0x8e>
    13c8:	8f 81       	ldd	r24, Y+7	; 0x07
    13ca:	98 85       	ldd	r25, Y+8	; 0x08
    13cc:	00 97       	sbiw	r24, 0x00	; 0
    13ce:	91 f5       	brne	.+100    	; 0x1434 <Get_KeyVal+0xe2>
				{
				/*in the first calling of the scheduler (after 20ms) and the button is
				 *  pressed it's status will be changed to Pre_Pressed*/
				case Not_Pressed:

					Status = Pre_Pressed;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	80 93 06 01 	sts	0x0106, r24
    13d6:	2e c0       	rjmp	.+92     	; 0x1434 <Get_KeyVal+0xe2>
					/*in the second calling of the scheduler (after another 20ms) and the button is
					 *  pressed it's status will be changed to Pressed
					 *  the total passed time of pressing should be 40 ms*/
				case Pre_Pressed:

					Status = Pressed;
    13d8:	82 e0       	ldi	r24, 0x02	; 2
    13da:	80 93 06 01 	sts	0x0106, r24
    13de:	2a c0       	rjmp	.+84     	; 0x1434 <Get_KeyVal+0xe2>

					break;
					/*if the button is pressed get the pressed button value and return status: pressed*/
				case Pressed:

					*Value_ptr = KeyVal[Row_Loc][Col_Loc];
    13e0:	8b 81       	ldd	r24, Y+3	; 0x03
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	48 2f       	mov	r20, r24
    13ea:	50 e0       	ldi	r21, 0x00	; 0
    13ec:	c9 01       	movw	r24, r18
    13ee:	88 0f       	add	r24, r24
    13f0:	99 1f       	adc	r25, r25
    13f2:	82 0f       	add	r24, r18
    13f4:	93 1f       	adc	r25, r19
    13f6:	84 0f       	add	r24, r20
    13f8:	95 1f       	adc	r25, r21
    13fa:	fc 01       	movw	r30, r24
    13fc:	e4 50       	subi	r30, 0x04	; 4
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	80 81       	ld	r24, Z
    1402:	ed 81       	ldd	r30, Y+5	; 0x05
    1404:	fe 81       	ldd	r31, Y+6	; 0x06
    1406:	80 83       	st	Z, r24
					returned_Status = Pressed;
    1408:	82 e0       	ldi	r24, 0x02	; 2
    140a:	89 83       	std	Y+1, r24	; 0x01
					Status = Not_Pressed;
    140c:	10 92 06 01 	sts	0x0106, r1
    1410:	11 c0       	rjmp	.+34     	; 0x1434 <Get_KeyVal+0xe2>
					break;
			}

		}
			/*if the button is released*/
		else if((Temp==1) && ((Col_Loc == 0) || (Col_Loc == 1))  && (Row_Loc == 0))
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	81 30       	cpi	r24, 0x01	; 1
    1416:	71 f4       	brne	.+28     	; 0x1434 <Get_KeyVal+0xe2>
    1418:	8c 81       	ldd	r24, Y+4	; 0x04
    141a:	88 23       	and	r24, r24
    141c:	19 f0       	breq	.+6      	; 0x1424 <Get_KeyVal+0xd2>
    141e:	8c 81       	ldd	r24, Y+4	; 0x04
    1420:	81 30       	cpi	r24, 0x01	; 1
    1422:	41 f4       	brne	.+16     	; 0x1434 <Get_KeyVal+0xe2>
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	88 23       	and	r24, r24
    1428:	29 f4       	brne	.+10     	; 0x1434 <Get_KeyVal+0xe2>
		{
			/*the current button status is Not_Pressed*/
			Status = Not_Pressed;
    142a:	10 92 06 01 	sts	0x0106, r1
			/*the returned status is Not_Pressed*/
			returned_Status = Status;
    142e:	80 91 06 01 	lds	r24, 0x0106
    1432:	89 83       	std	Y+1, r24	; 0x01
	for(Col_Loc = 0 ; Col_Loc <= 2 ; Col_Loc++ )
	{
		/*output value zero on the columns*/
		DIO_WritePin((Col_Loc+col1) , LOW);
		/*looping on the rows*/
		for(Row_Loc = 0 ; Row_Loc <= 2 ; Row_Loc++ )
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	8f 5f       	subi	r24, 0xFF	; 255
    1438:	8b 83       	std	Y+3, r24	; 0x03
    143a:	8b 81       	ldd	r24, Y+3	; 0x03
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	08 f4       	brcc	.+2      	; 0x1442 <Get_KeyVal+0xf0>
    1440:	a1 cf       	rjmp	.-190    	; 0x1384 <Get_KeyVal+0x32>
			/*the returned status is Not_Pressed*/
			returned_Status = Status;
		}
	}
		/*output value high on the columns*/
	DIO_WritePin((Col_Loc+col1) , HIGH);
    1442:	8c 81       	ldd	r24, Y+4	; 0x04
    1444:	8b 5e       	subi	r24, 0xEB	; 235
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	/*the current status of the button*/
	static Button_Status Status = Not_Pressed;


	/*looping on the columns*/
	for(Col_Loc = 0 ; Col_Loc <= 2 ; Col_Loc++ )
    144c:	8c 81       	ldd	r24, Y+4	; 0x04
    144e:	8f 5f       	subi	r24, 0xFF	; 255
    1450:	8c 83       	std	Y+4, r24	; 0x04
    1452:	8c 81       	ldd	r24, Y+4	; 0x04
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	08 f4       	brcc	.+2      	; 0x145a <Get_KeyVal+0x108>
    1458:	8e cf       	rjmp	.-228    	; 0x1376 <Get_KeyVal+0x24>
		/*output value high on the columns*/
	DIO_WritePin((Col_Loc+col1) , HIGH);

	}
	/*return the status of the button*/
return returned_Status;
    145a:	89 81       	ldd	r24, Y+1	; 0x01

}
    145c:	28 96       	adiw	r28, 0x08	; 8
    145e:	0f b6       	in	r0, 0x3f	; 63
    1460:	f8 94       	cli
    1462:	de bf       	out	0x3e, r29	; 62
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	cd bf       	out	0x3d, r28	; 61
    1468:	cf 91       	pop	r28
    146a:	df 91       	pop	r29
    146c:	08 95       	ret

0000146e <LCD_Init>:

#include "util/delay.h"
#include "LCD.h"
/* ---------------------------------    INITIALIZE LCD  --------------------------------------------------   */
void LCD_Init(void)
{
    146e:	df 93       	push	r29
    1470:	cf 93       	push	r28
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	68 97       	sbiw	r28, 0x18	; 24
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61


	/*INITIALIZE LCD PINS DIRECTION*/
	DIO_SetPinDirection( LCD_E_PIN,OUTPUT);
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	61 e0       	ldi	r22, 0x01	; 1
    1486:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_RW_PIN,OUTPUT);
    148a:	82 e0       	ldi	r24, 0x02	; 2
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_RS_PIN,OUTPUT);
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	61 e0       	ldi	r22, 0x01	; 1
    1496:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>


	DIO_SetPinDirection( LCD_D4,OUTPUT);
    149a:	84 e0       	ldi	r24, 0x04	; 4
    149c:	61 e0       	ldi	r22, 0x01	; 1
    149e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_D5,OUTPUT);
    14a2:	85 e0       	ldi	r24, 0x05	; 5
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_D6,OUTPUT);
    14aa:	86 e0       	ldi	r24, 0x06	; 6
    14ac:	61 e0       	ldi	r22, 0x01	; 1
    14ae:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_D7,OUTPUT);
    14b2:	87 e0       	ldi	r24, 0x07	; 7
    14b4:	61 e0       	ldi	r22, 0x01	; 1
    14b6:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	a8 ec       	ldi	r26, 0xC8	; 200
    14c0:	b2 e4       	ldi	r27, 0x42	; 66
    14c2:	8d 8b       	std	Y+21, r24	; 0x15
    14c4:	9e 8b       	std	Y+22, r25	; 0x16
    14c6:	af 8b       	std	Y+23, r26	; 0x17
    14c8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14ca:	6d 89       	ldd	r22, Y+21	; 0x15
    14cc:	7e 89       	ldd	r23, Y+22	; 0x16
    14ce:	8f 89       	ldd	r24, Y+23	; 0x17
    14d0:	98 8d       	ldd	r25, Y+24	; 0x18
    14d2:	2b ea       	ldi	r18, 0xAB	; 171
    14d4:	3a ea       	ldi	r19, 0xAA	; 170
    14d6:	4a e2       	ldi	r20, 0x2A	; 42
    14d8:	50 e4       	ldi	r21, 0x40	; 64
    14da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14de:	dc 01       	movw	r26, r24
    14e0:	cb 01       	movw	r24, r22
    14e2:	89 8b       	std	Y+17, r24	; 0x11
    14e4:	9a 8b       	std	Y+18, r25	; 0x12
    14e6:	ab 8b       	std	Y+19, r26	; 0x13
    14e8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    14ea:	69 89       	ldd	r22, Y+17	; 0x11
    14ec:	7a 89       	ldd	r23, Y+18	; 0x12
    14ee:	8b 89       	ldd	r24, Y+19	; 0x13
    14f0:	9c 89       	ldd	r25, Y+20	; 0x14
    14f2:	20 e0       	ldi	r18, 0x00	; 0
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e8       	ldi	r20, 0x80	; 128
    14f8:	5f e3       	ldi	r21, 0x3F	; 63
    14fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14fe:	88 23       	and	r24, r24
    1500:	1c f4       	brge	.+6      	; 0x1508 <LCD_Init+0x9a>
		__ticks = 1;
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	88 8b       	std	Y+16, r24	; 0x10
    1506:	91 c0       	rjmp	.+290    	; 0x162a <LCD_Init+0x1bc>
	else if (__tmp > 255)
    1508:	69 89       	ldd	r22, Y+17	; 0x11
    150a:	7a 89       	ldd	r23, Y+18	; 0x12
    150c:	8b 89       	ldd	r24, Y+19	; 0x13
    150e:	9c 89       	ldd	r25, Y+20	; 0x14
    1510:	20 e0       	ldi	r18, 0x00	; 0
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	4f e7       	ldi	r20, 0x7F	; 127
    1516:	53 e4       	ldi	r21, 0x43	; 67
    1518:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    151c:	18 16       	cp	r1, r24
    151e:	0c f0       	brlt	.+2      	; 0x1522 <LCD_Init+0xb4>
    1520:	7b c0       	rjmp	.+246    	; 0x1618 <LCD_Init+0x1aa>
	{
		_delay_ms(__us / 1000.0);
    1522:	6d 89       	ldd	r22, Y+21	; 0x15
    1524:	7e 89       	ldd	r23, Y+22	; 0x16
    1526:	8f 89       	ldd	r24, Y+23	; 0x17
    1528:	98 8d       	ldd	r25, Y+24	; 0x18
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	4a e7       	ldi	r20, 0x7A	; 122
    1530:	54 e4       	ldi	r21, 0x44	; 68
    1532:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1536:	dc 01       	movw	r26, r24
    1538:	cb 01       	movw	r24, r22
    153a:	8c 87       	std	Y+12, r24	; 0x0c
    153c:	9d 87       	std	Y+13, r25	; 0x0d
    153e:	ae 87       	std	Y+14, r26	; 0x0e
    1540:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1542:	6c 85       	ldd	r22, Y+12	; 0x0c
    1544:	7d 85       	ldd	r23, Y+13	; 0x0d
    1546:	8e 85       	ldd	r24, Y+14	; 0x0e
    1548:	9f 85       	ldd	r25, Y+15	; 0x0f
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	4a ef       	ldi	r20, 0xFA	; 250
    1550:	54 e4       	ldi	r21, 0x44	; 68
    1552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	88 87       	std	Y+8, r24	; 0x08
    155c:	99 87       	std	Y+9, r25	; 0x09
    155e:	aa 87       	std	Y+10, r26	; 0x0a
    1560:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1562:	68 85       	ldd	r22, Y+8	; 0x08
    1564:	79 85       	ldd	r23, Y+9	; 0x09
    1566:	8a 85       	ldd	r24, Y+10	; 0x0a
    1568:	9b 85       	ldd	r25, Y+11	; 0x0b
    156a:	20 e0       	ldi	r18, 0x00	; 0
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	40 e8       	ldi	r20, 0x80	; 128
    1570:	5f e3       	ldi	r21, 0x3F	; 63
    1572:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1576:	88 23       	and	r24, r24
    1578:	2c f4       	brge	.+10     	; 0x1584 <LCD_Init+0x116>
		__ticks = 1;
    157a:	81 e0       	ldi	r24, 0x01	; 1
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9f 83       	std	Y+7, r25	; 0x07
    1580:	8e 83       	std	Y+6, r24	; 0x06
    1582:	3f c0       	rjmp	.+126    	; 0x1602 <LCD_Init+0x194>
	else if (__tmp > 65535)
    1584:	68 85       	ldd	r22, Y+8	; 0x08
    1586:	79 85       	ldd	r23, Y+9	; 0x09
    1588:	8a 85       	ldd	r24, Y+10	; 0x0a
    158a:	9b 85       	ldd	r25, Y+11	; 0x0b
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	3f ef       	ldi	r19, 0xFF	; 255
    1590:	4f e7       	ldi	r20, 0x7F	; 127
    1592:	57 e4       	ldi	r21, 0x47	; 71
    1594:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1598:	18 16       	cp	r1, r24
    159a:	4c f5       	brge	.+82     	; 0x15ee <LCD_Init+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    159c:	6c 85       	ldd	r22, Y+12	; 0x0c
    159e:	7d 85       	ldd	r23, Y+13	; 0x0d
    15a0:	8e 85       	ldd	r24, Y+14	; 0x0e
    15a2:	9f 85       	ldd	r25, Y+15	; 0x0f
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	40 e2       	ldi	r20, 0x20	; 32
    15aa:	51 e4       	ldi	r21, 0x41	; 65
    15ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b0:	dc 01       	movw	r26, r24
    15b2:	cb 01       	movw	r24, r22
    15b4:	bc 01       	movw	r22, r24
    15b6:	cd 01       	movw	r24, r26
    15b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15bc:	dc 01       	movw	r26, r24
    15be:	cb 01       	movw	r24, r22
    15c0:	9f 83       	std	Y+7, r25	; 0x07
    15c2:	8e 83       	std	Y+6, r24	; 0x06
    15c4:	0f c0       	rjmp	.+30     	; 0x15e4 <LCD_Init+0x176>
    15c6:	88 ec       	ldi	r24, 0xC8	; 200
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	9d 83       	std	Y+5, r25	; 0x05
    15cc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15ce:	8c 81       	ldd	r24, Y+4	; 0x04
    15d0:	9d 81       	ldd	r25, Y+5	; 0x05
    15d2:	01 97       	sbiw	r24, 0x01	; 1
    15d4:	f1 f7       	brne	.-4      	; 0x15d2 <LCD_Init+0x164>
    15d6:	9d 83       	std	Y+5, r25	; 0x05
    15d8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15da:	8e 81       	ldd	r24, Y+6	; 0x06
    15dc:	9f 81       	ldd	r25, Y+7	; 0x07
    15de:	01 97       	sbiw	r24, 0x01	; 1
    15e0:	9f 83       	std	Y+7, r25	; 0x07
    15e2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e4:	8e 81       	ldd	r24, Y+6	; 0x06
    15e6:	9f 81       	ldd	r25, Y+7	; 0x07
    15e8:	00 97       	sbiw	r24, 0x00	; 0
    15ea:	69 f7       	brne	.-38     	; 0x15c6 <LCD_Init+0x158>
    15ec:	24 c0       	rjmp	.+72     	; 0x1636 <LCD_Init+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ee:	68 85       	ldd	r22, Y+8	; 0x08
    15f0:	79 85       	ldd	r23, Y+9	; 0x09
    15f2:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f4:	9b 85       	ldd	r25, Y+11	; 0x0b
    15f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	9f 83       	std	Y+7, r25	; 0x07
    1600:	8e 83       	std	Y+6, r24	; 0x06
    1602:	8e 81       	ldd	r24, Y+6	; 0x06
    1604:	9f 81       	ldd	r25, Y+7	; 0x07
    1606:	9b 83       	std	Y+3, r25	; 0x03
    1608:	8a 83       	std	Y+2, r24	; 0x02
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	9b 81       	ldd	r25, Y+3	; 0x03
    160e:	01 97       	sbiw	r24, 0x01	; 1
    1610:	f1 f7       	brne	.-4      	; 0x160e <LCD_Init+0x1a0>
    1612:	9b 83       	std	Y+3, r25	; 0x03
    1614:	8a 83       	std	Y+2, r24	; 0x02
    1616:	0f c0       	rjmp	.+30     	; 0x1636 <LCD_Init+0x1c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1618:	69 89       	ldd	r22, Y+17	; 0x11
    161a:	7a 89       	ldd	r23, Y+18	; 0x12
    161c:	8b 89       	ldd	r24, Y+19	; 0x13
    161e:	9c 89       	ldd	r25, Y+20	; 0x14
    1620:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1624:	dc 01       	movw	r26, r24
    1626:	cb 01       	movw	r24, r22
    1628:	88 8b       	std	Y+16, r24	; 0x10
    162a:	88 89       	ldd	r24, Y+16	; 0x10
    162c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	8a 95       	dec	r24
    1632:	f1 f7       	brne	.-4      	; 0x1630 <LCD_Init+0x1c2>
    1634:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);

	/*SEND 4BIT LCD_Mode COMMANDS*/
	LCD_WriteCommand(0x33);
    1636:	83 e3       	ldi	r24, 0x33	; 51
    1638:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
    163c:	82 e3       	ldi	r24, 0x32	; 50
    163e:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
    1642:	88 e2       	ldi	r24, 0x28	; 40
    1644:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>
	LCD_WriteCommand(0x0c);
    1648:	8c e0       	ldi	r24, 0x0C	; 12
    164a:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
    164e:	81 e0       	ldi	r24, 0x01	; 1
    1650:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
    1654:	86 e0       	ldi	r24, 0x06	; 6
    1656:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>
	LCD_WriteCommand(0x02);
    165a:	82 e0       	ldi	r24, 0x02	; 2
    165c:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>

}
    1660:	68 96       	adiw	r28, 0x18	; 24
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <LCD_WriteCommand>:


/*  ---------------------------------    SENDING COMMANDS  ------------------------------------------------  */

void LCD_WriteCommand(uint8 cmd)
{
    1672:	0f 93       	push	r16
    1674:	1f 93       	push	r17
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	c9 54       	subi	r28, 0x49	; 73
    1680:	d0 40       	sbci	r29, 0x00	; 0
    1682:	0f b6       	in	r0, 0x3f	; 63
    1684:	f8 94       	cli
    1686:	de bf       	out	0x3e, r29	; 62
    1688:	0f be       	out	0x3f, r0	; 63
    168a:	cd bf       	out	0x3d, r28	; 61
    168c:	fe 01       	movw	r30, r28
    168e:	e7 5b       	subi	r30, 0xB7	; 183
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 83       	st	Z, r24

	DIO_WritePin(LCD_RW_PIN, LOW);
    1694:	82 e0       	ldi	r24, 0x02	; 2
    1696:	60 e0       	ldi	r22, 0x00	; 0
    1698:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(LCD_RS_PIN, LOW);
    169c:	81 e0       	ldi	r24, 0x01	; 1
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(LCD_E_PIN, LOW);
    16a4:	83 e0       	ldi	r24, 0x03	; 3
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

	LCD_4BIT_PORT = (cmd & 0xf0) | (LCD_4BIT_PORT & 0x0f);
    16ac:	ab e3       	ldi	r26, 0x3B	; 59
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	fe 01       	movw	r30, r28
    16b2:	e7 5b       	subi	r30, 0xB7	; 183
    16b4:	ff 4f       	sbci	r31, 0xFF	; 255
    16b6:	80 81       	ld	r24, Z
    16b8:	98 2f       	mov	r25, r24
    16ba:	90 7f       	andi	r25, 0xF0	; 240
    16bc:	eb e3       	ldi	r30, 0x3B	; 59
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	80 81       	ld	r24, Z
    16c2:	8f 70       	andi	r24, 0x0F	; 15
    16c4:	89 2b       	or	r24, r25
    16c6:	8c 93       	st	X, r24

	DIO_WritePin(LCD_E_PIN, HIGH);
    16c8:	83 e0       	ldi	r24, 0x03	; 3
    16ca:	61 e0       	ldi	r22, 0x01	; 1
    16cc:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    16d0:	fe 01       	movw	r30, r28
    16d2:	eb 5b       	subi	r30, 0xBB	; 187
    16d4:	ff 4f       	sbci	r31, 0xFF	; 255
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a8 ec       	ldi	r26, 0xC8	; 200
    16dc:	b2 e4       	ldi	r27, 0x42	; 66
    16de:	80 83       	st	Z, r24
    16e0:	91 83       	std	Z+1, r25	; 0x01
    16e2:	a2 83       	std	Z+2, r26	; 0x02
    16e4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16e6:	8e 01       	movw	r16, r28
    16e8:	0f 5b       	subi	r16, 0xBF	; 191
    16ea:	1f 4f       	sbci	r17, 0xFF	; 255
    16ec:	fe 01       	movw	r30, r28
    16ee:	eb 5b       	subi	r30, 0xBB	; 187
    16f0:	ff 4f       	sbci	r31, 0xFF	; 255
    16f2:	60 81       	ld	r22, Z
    16f4:	71 81       	ldd	r23, Z+1	; 0x01
    16f6:	82 81       	ldd	r24, Z+2	; 0x02
    16f8:	93 81       	ldd	r25, Z+3	; 0x03
    16fa:	2b ea       	ldi	r18, 0xAB	; 171
    16fc:	3a ea       	ldi	r19, 0xAA	; 170
    16fe:	4a e2       	ldi	r20, 0x2A	; 42
    1700:	50 e4       	ldi	r21, 0x40	; 64
    1702:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1706:	dc 01       	movw	r26, r24
    1708:	cb 01       	movw	r24, r22
    170a:	f8 01       	movw	r30, r16
    170c:	80 83       	st	Z, r24
    170e:	91 83       	std	Z+1, r25	; 0x01
    1710:	a2 83       	std	Z+2, r26	; 0x02
    1712:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1714:	fe 01       	movw	r30, r28
    1716:	ef 5b       	subi	r30, 0xBF	; 191
    1718:	ff 4f       	sbci	r31, 0xFF	; 255
    171a:	60 81       	ld	r22, Z
    171c:	71 81       	ldd	r23, Z+1	; 0x01
    171e:	82 81       	ldd	r24, Z+2	; 0x02
    1720:	93 81       	ldd	r25, Z+3	; 0x03
    1722:	20 e0       	ldi	r18, 0x00	; 0
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	5f e3       	ldi	r21, 0x3F	; 63
    172a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    172e:	88 23       	and	r24, r24
    1730:	34 f4       	brge	.+12     	; 0x173e <LCD_WriteCommand+0xcc>
		__ticks = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	fe 01       	movw	r30, r28
    1736:	e0 5c       	subi	r30, 0xC0	; 192
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	80 83       	st	Z, r24
    173c:	9d c0       	rjmp	.+314    	; 0x1878 <LCD_WriteCommand+0x206>
	else if (__tmp > 255)
    173e:	fe 01       	movw	r30, r28
    1740:	ef 5b       	subi	r30, 0xBF	; 191
    1742:	ff 4f       	sbci	r31, 0xFF	; 255
    1744:	60 81       	ld	r22, Z
    1746:	71 81       	ldd	r23, Z+1	; 0x01
    1748:	82 81       	ldd	r24, Z+2	; 0x02
    174a:	93 81       	ldd	r25, Z+3	; 0x03
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	4f e7       	ldi	r20, 0x7F	; 127
    1752:	53 e4       	ldi	r21, 0x43	; 67
    1754:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1758:	18 16       	cp	r1, r24
    175a:	0c f0       	brlt	.+2      	; 0x175e <LCD_WriteCommand+0xec>
    175c:	7e c0       	rjmp	.+252    	; 0x185a <LCD_WriteCommand+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    175e:	fe 01       	movw	r30, r28
    1760:	eb 5b       	subi	r30, 0xBB	; 187
    1762:	ff 4f       	sbci	r31, 0xFF	; 255
    1764:	60 81       	ld	r22, Z
    1766:	71 81       	ldd	r23, Z+1	; 0x01
    1768:	82 81       	ldd	r24, Z+2	; 0x02
    176a:	93 81       	ldd	r25, Z+3	; 0x03
    176c:	20 e0       	ldi	r18, 0x00	; 0
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	4a e7       	ldi	r20, 0x7A	; 122
    1772:	54 e4       	ldi	r21, 0x44	; 68
    1774:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1778:	dc 01       	movw	r26, r24
    177a:	cb 01       	movw	r24, r22
    177c:	8c af       	std	Y+60, r24	; 0x3c
    177e:	9d af       	std	Y+61, r25	; 0x3d
    1780:	ae af       	std	Y+62, r26	; 0x3e
    1782:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1784:	6c ad       	ldd	r22, Y+60	; 0x3c
    1786:	7d ad       	ldd	r23, Y+61	; 0x3d
    1788:	8e ad       	ldd	r24, Y+62	; 0x3e
    178a:	9f ad       	ldd	r25, Y+63	; 0x3f
    178c:	20 e0       	ldi	r18, 0x00	; 0
    178e:	30 e0       	ldi	r19, 0x00	; 0
    1790:	4a ef       	ldi	r20, 0xFA	; 250
    1792:	54 e4       	ldi	r21, 0x44	; 68
    1794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1798:	dc 01       	movw	r26, r24
    179a:	cb 01       	movw	r24, r22
    179c:	88 af       	std	Y+56, r24	; 0x38
    179e:	99 af       	std	Y+57, r25	; 0x39
    17a0:	aa af       	std	Y+58, r26	; 0x3a
    17a2:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    17a4:	68 ad       	ldd	r22, Y+56	; 0x38
    17a6:	79 ad       	ldd	r23, Y+57	; 0x39
    17a8:	8a ad       	ldd	r24, Y+58	; 0x3a
    17aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	40 e8       	ldi	r20, 0x80	; 128
    17b2:	5f e3       	ldi	r21, 0x3F	; 63
    17b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b8:	88 23       	and	r24, r24
    17ba:	2c f4       	brge	.+10     	; 0x17c6 <LCD_WriteCommand+0x154>
		__ticks = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	9f ab       	std	Y+55, r25	; 0x37
    17c2:	8e ab       	std	Y+54, r24	; 0x36
    17c4:	3f c0       	rjmp	.+126    	; 0x1844 <LCD_WriteCommand+0x1d2>
	else if (__tmp > 65535)
    17c6:	68 ad       	ldd	r22, Y+56	; 0x38
    17c8:	79 ad       	ldd	r23, Y+57	; 0x39
    17ca:	8a ad       	ldd	r24, Y+58	; 0x3a
    17cc:	9b ad       	ldd	r25, Y+59	; 0x3b
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17da:	18 16       	cp	r1, r24
    17dc:	4c f5       	brge	.+82     	; 0x1830 <LCD_WriteCommand+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17de:	6c ad       	ldd	r22, Y+60	; 0x3c
    17e0:	7d ad       	ldd	r23, Y+61	; 0x3d
    17e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    17e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    17e6:	20 e0       	ldi	r18, 0x00	; 0
    17e8:	30 e0       	ldi	r19, 0x00	; 0
    17ea:	40 e2       	ldi	r20, 0x20	; 32
    17ec:	51 e4       	ldi	r21, 0x41	; 65
    17ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f2:	dc 01       	movw	r26, r24
    17f4:	cb 01       	movw	r24, r22
    17f6:	bc 01       	movw	r22, r24
    17f8:	cd 01       	movw	r24, r26
    17fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fe:	dc 01       	movw	r26, r24
    1800:	cb 01       	movw	r24, r22
    1802:	9f ab       	std	Y+55, r25	; 0x37
    1804:	8e ab       	std	Y+54, r24	; 0x36
    1806:	0f c0       	rjmp	.+30     	; 0x1826 <LCD_WriteCommand+0x1b4>
    1808:	88 ec       	ldi	r24, 0xC8	; 200
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	9d ab       	std	Y+53, r25	; 0x35
    180e:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1810:	8c a9       	ldd	r24, Y+52	; 0x34
    1812:	9d a9       	ldd	r25, Y+53	; 0x35
    1814:	01 97       	sbiw	r24, 0x01	; 1
    1816:	f1 f7       	brne	.-4      	; 0x1814 <LCD_WriteCommand+0x1a2>
    1818:	9d ab       	std	Y+53, r25	; 0x35
    181a:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	8e a9       	ldd	r24, Y+54	; 0x36
    181e:	9f a9       	ldd	r25, Y+55	; 0x37
    1820:	01 97       	sbiw	r24, 0x01	; 1
    1822:	9f ab       	std	Y+55, r25	; 0x37
    1824:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1826:	8e a9       	ldd	r24, Y+54	; 0x36
    1828:	9f a9       	ldd	r25, Y+55	; 0x37
    182a:	00 97       	sbiw	r24, 0x00	; 0
    182c:	69 f7       	brne	.-38     	; 0x1808 <LCD_WriteCommand+0x196>
    182e:	2d c0       	rjmp	.+90     	; 0x188a <LCD_WriteCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1830:	68 ad       	ldd	r22, Y+56	; 0x38
    1832:	79 ad       	ldd	r23, Y+57	; 0x39
    1834:	8a ad       	ldd	r24, Y+58	; 0x3a
    1836:	9b ad       	ldd	r25, Y+59	; 0x3b
    1838:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183c:	dc 01       	movw	r26, r24
    183e:	cb 01       	movw	r24, r22
    1840:	9f ab       	std	Y+55, r25	; 0x37
    1842:	8e ab       	std	Y+54, r24	; 0x36
    1844:	8e a9       	ldd	r24, Y+54	; 0x36
    1846:	9f a9       	ldd	r25, Y+55	; 0x37
    1848:	9b ab       	std	Y+51, r25	; 0x33
    184a:	8a ab       	std	Y+50, r24	; 0x32
    184c:	8a a9       	ldd	r24, Y+50	; 0x32
    184e:	9b a9       	ldd	r25, Y+51	; 0x33
    1850:	01 97       	sbiw	r24, 0x01	; 1
    1852:	f1 f7       	brne	.-4      	; 0x1850 <LCD_WriteCommand+0x1de>
    1854:	9b ab       	std	Y+51, r25	; 0x33
    1856:	8a ab       	std	Y+50, r24	; 0x32
    1858:	18 c0       	rjmp	.+48     	; 0x188a <LCD_WriteCommand+0x218>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    185a:	fe 01       	movw	r30, r28
    185c:	ef 5b       	subi	r30, 0xBF	; 191
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	60 81       	ld	r22, Z
    1862:	71 81       	ldd	r23, Z+1	; 0x01
    1864:	82 81       	ldd	r24, Z+2	; 0x02
    1866:	93 81       	ldd	r25, Z+3	; 0x03
    1868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186c:	dc 01       	movw	r26, r24
    186e:	cb 01       	movw	r24, r22
    1870:	fe 01       	movw	r30, r28
    1872:	e0 5c       	subi	r30, 0xC0	; 192
    1874:	ff 4f       	sbci	r31, 0xFF	; 255
    1876:	80 83       	st	Z, r24
    1878:	fe 01       	movw	r30, r28
    187a:	e0 5c       	subi	r30, 0xC0	; 192
    187c:	ff 4f       	sbci	r31, 0xFF	; 255
    187e:	80 81       	ld	r24, Z
    1880:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1882:	89 a9       	ldd	r24, Y+49	; 0x31
    1884:	8a 95       	dec	r24
    1886:	f1 f7       	brne	.-4      	; 0x1884 <LCD_WriteCommand+0x212>
    1888:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	DIO_WritePin(LCD_E_PIN, LOW);
    188a:	83 e0       	ldi	r24, 0x03	; 3
    188c:	60 e0       	ldi	r22, 0x00	; 0
    188e:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

	LCD_4BIT_PORT = (cmd << 4) | (LCD_4BIT_PORT & 0x0f);
    1892:	ab e3       	ldi	r26, 0x3B	; 59
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	fe 01       	movw	r30, r28
    1898:	e7 5b       	subi	r30, 0xB7	; 183
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	88 2f       	mov	r24, r24
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	82 95       	swap	r24
    18a4:	92 95       	swap	r25
    18a6:	90 7f       	andi	r25, 0xF0	; 240
    18a8:	98 27       	eor	r25, r24
    18aa:	80 7f       	andi	r24, 0xF0	; 240
    18ac:	98 27       	eor	r25, r24
    18ae:	98 2f       	mov	r25, r24
    18b0:	eb e3       	ldi	r30, 0x3B	; 59
    18b2:	f0 e0       	ldi	r31, 0x00	; 0
    18b4:	80 81       	ld	r24, Z
    18b6:	8f 70       	andi	r24, 0x0F	; 15
    18b8:	89 2b       	or	r24, r25
    18ba:	8c 93       	st	X, r24

	DIO_WritePin(LCD_E_PIN, HIGH);
    18bc:	83 e0       	ldi	r24, 0x03	; 3
    18be:	61 e0       	ldi	r22, 0x01	; 1
    18c0:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    18c4:	80 e0       	ldi	r24, 0x00	; 0
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	a8 ec       	ldi	r26, 0xC8	; 200
    18ca:	b2 e4       	ldi	r27, 0x42	; 66
    18cc:	8d a7       	std	Y+45, r24	; 0x2d
    18ce:	9e a7       	std	Y+46, r25	; 0x2e
    18d0:	af a7       	std	Y+47, r26	; 0x2f
    18d2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    18d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    18d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    18da:	98 a9       	ldd	r25, Y+48	; 0x30
    18dc:	2b ea       	ldi	r18, 0xAB	; 171
    18de:	3a ea       	ldi	r19, 0xAA	; 170
    18e0:	4a e2       	ldi	r20, 0x2A	; 42
    18e2:	50 e4       	ldi	r21, 0x40	; 64
    18e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e8:	dc 01       	movw	r26, r24
    18ea:	cb 01       	movw	r24, r22
    18ec:	89 a7       	std	Y+41, r24	; 0x29
    18ee:	9a a7       	std	Y+42, r25	; 0x2a
    18f0:	ab a7       	std	Y+43, r26	; 0x2b
    18f2:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    18f4:	69 a5       	ldd	r22, Y+41	; 0x29
    18f6:	7a a5       	ldd	r23, Y+42	; 0x2a
    18f8:	8b a5       	ldd	r24, Y+43	; 0x2b
    18fa:	9c a5       	ldd	r25, Y+44	; 0x2c
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e8       	ldi	r20, 0x80	; 128
    1902:	5f e3       	ldi	r21, 0x3F	; 63
    1904:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1908:	88 23       	and	r24, r24
    190a:	1c f4       	brge	.+6      	; 0x1912 <LCD_WriteCommand+0x2a0>
		__ticks = 1;
    190c:	81 e0       	ldi	r24, 0x01	; 1
    190e:	88 a7       	std	Y+40, r24	; 0x28
    1910:	91 c0       	rjmp	.+290    	; 0x1a34 <LCD_WriteCommand+0x3c2>
	else if (__tmp > 255)
    1912:	69 a5       	ldd	r22, Y+41	; 0x29
    1914:	7a a5       	ldd	r23, Y+42	; 0x2a
    1916:	8b a5       	ldd	r24, Y+43	; 0x2b
    1918:	9c a5       	ldd	r25, Y+44	; 0x2c
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	4f e7       	ldi	r20, 0x7F	; 127
    1920:	53 e4       	ldi	r21, 0x43	; 67
    1922:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1926:	18 16       	cp	r1, r24
    1928:	0c f0       	brlt	.+2      	; 0x192c <LCD_WriteCommand+0x2ba>
    192a:	7b c0       	rjmp	.+246    	; 0x1a22 <LCD_WriteCommand+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    192c:	6d a5       	ldd	r22, Y+45	; 0x2d
    192e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1930:	8f a5       	ldd	r24, Y+47	; 0x2f
    1932:	98 a9       	ldd	r25, Y+48	; 0x30
    1934:	20 e0       	ldi	r18, 0x00	; 0
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	4a e7       	ldi	r20, 0x7A	; 122
    193a:	54 e4       	ldi	r21, 0x44	; 68
    193c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1940:	dc 01       	movw	r26, r24
    1942:	cb 01       	movw	r24, r22
    1944:	8c a3       	std	Y+36, r24	; 0x24
    1946:	9d a3       	std	Y+37, r25	; 0x25
    1948:	ae a3       	std	Y+38, r26	; 0x26
    194a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    194c:	6c a1       	ldd	r22, Y+36	; 0x24
    194e:	7d a1       	ldd	r23, Y+37	; 0x25
    1950:	8e a1       	ldd	r24, Y+38	; 0x26
    1952:	9f a1       	ldd	r25, Y+39	; 0x27
    1954:	20 e0       	ldi	r18, 0x00	; 0
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	4a ef       	ldi	r20, 0xFA	; 250
    195a:	54 e4       	ldi	r21, 0x44	; 68
    195c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1960:	dc 01       	movw	r26, r24
    1962:	cb 01       	movw	r24, r22
    1964:	88 a3       	std	Y+32, r24	; 0x20
    1966:	99 a3       	std	Y+33, r25	; 0x21
    1968:	aa a3       	std	Y+34, r26	; 0x22
    196a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    196c:	68 a1       	ldd	r22, Y+32	; 0x20
    196e:	79 a1       	ldd	r23, Y+33	; 0x21
    1970:	8a a1       	ldd	r24, Y+34	; 0x22
    1972:	9b a1       	ldd	r25, Y+35	; 0x23
    1974:	20 e0       	ldi	r18, 0x00	; 0
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	40 e8       	ldi	r20, 0x80	; 128
    197a:	5f e3       	ldi	r21, 0x3F	; 63
    197c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1980:	88 23       	and	r24, r24
    1982:	2c f4       	brge	.+10     	; 0x198e <LCD_WriteCommand+0x31c>
		__ticks = 1;
    1984:	81 e0       	ldi	r24, 0x01	; 1
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	9f 8f       	std	Y+31, r25	; 0x1f
    198a:	8e 8f       	std	Y+30, r24	; 0x1e
    198c:	3f c0       	rjmp	.+126    	; 0x1a0c <LCD_WriteCommand+0x39a>
	else if (__tmp > 65535)
    198e:	68 a1       	ldd	r22, Y+32	; 0x20
    1990:	79 a1       	ldd	r23, Y+33	; 0x21
    1992:	8a a1       	ldd	r24, Y+34	; 0x22
    1994:	9b a1       	ldd	r25, Y+35	; 0x23
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	3f ef       	ldi	r19, 0xFF	; 255
    199a:	4f e7       	ldi	r20, 0x7F	; 127
    199c:	57 e4       	ldi	r21, 0x47	; 71
    199e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19a2:	18 16       	cp	r1, r24
    19a4:	4c f5       	brge	.+82     	; 0x19f8 <LCD_WriteCommand+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a6:	6c a1       	ldd	r22, Y+36	; 0x24
    19a8:	7d a1       	ldd	r23, Y+37	; 0x25
    19aa:	8e a1       	ldd	r24, Y+38	; 0x26
    19ac:	9f a1       	ldd	r25, Y+39	; 0x27
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	40 e2       	ldi	r20, 0x20	; 32
    19b4:	51 e4       	ldi	r21, 0x41	; 65
    19b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	cd 01       	movw	r24, r26
    19c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	9f 8f       	std	Y+31, r25	; 0x1f
    19cc:	8e 8f       	std	Y+30, r24	; 0x1e
    19ce:	0f c0       	rjmp	.+30     	; 0x19ee <LCD_WriteCommand+0x37c>
    19d0:	88 ec       	ldi	r24, 0xC8	; 200
    19d2:	90 e0       	ldi	r25, 0x00	; 0
    19d4:	9d 8f       	std	Y+29, r25	; 0x1d
    19d6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19da:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19dc:	01 97       	sbiw	r24, 0x01	; 1
    19de:	f1 f7       	brne	.-4      	; 0x19dc <LCD_WriteCommand+0x36a>
    19e0:	9d 8f       	std	Y+29, r25	; 0x1d
    19e2:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19e8:	01 97       	sbiw	r24, 0x01	; 1
    19ea:	9f 8f       	std	Y+31, r25	; 0x1f
    19ec:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ee:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19f0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19f2:	00 97       	sbiw	r24, 0x00	; 0
    19f4:	69 f7       	brne	.-38     	; 0x19d0 <LCD_WriteCommand+0x35e>
    19f6:	24 c0       	rjmp	.+72     	; 0x1a40 <LCD_WriteCommand+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f8:	68 a1       	ldd	r22, Y+32	; 0x20
    19fa:	79 a1       	ldd	r23, Y+33	; 0x21
    19fc:	8a a1       	ldd	r24, Y+34	; 0x22
    19fe:	9b a1       	ldd	r25, Y+35	; 0x23
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	9f 8f       	std	Y+31, r25	; 0x1f
    1a0a:	8e 8f       	std	Y+30, r24	; 0x1e
    1a0c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1a0e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1a10:	9b 8f       	std	Y+27, r25	; 0x1b
    1a12:	8a 8f       	std	Y+26, r24	; 0x1a
    1a14:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a16:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a18:	01 97       	sbiw	r24, 0x01	; 1
    1a1a:	f1 f7       	brne	.-4      	; 0x1a18 <LCD_WriteCommand+0x3a6>
    1a1c:	9b 8f       	std	Y+27, r25	; 0x1b
    1a1e:	8a 8f       	std	Y+26, r24	; 0x1a
    1a20:	0f c0       	rjmp	.+30     	; 0x1a40 <LCD_WriteCommand+0x3ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a22:	69 a5       	ldd	r22, Y+41	; 0x29
    1a24:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a26:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a28:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2e:	dc 01       	movw	r26, r24
    1a30:	cb 01       	movw	r24, r22
    1a32:	88 a7       	std	Y+40, r24	; 0x28
    1a34:	88 a5       	ldd	r24, Y+40	; 0x28
    1a36:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a38:	89 8d       	ldd	r24, Y+25	; 0x19
    1a3a:	8a 95       	dec	r24
    1a3c:	f1 f7       	brne	.-4      	; 0x1a3a <LCD_WriteCommand+0x3c8>
    1a3e:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	DIO_WritePin(LCD_E_PIN, LOW);
    1a40:	83 e0       	ldi	r24, 0x03	; 3
    1a42:	60 e0       	ldi	r22, 0x00	; 0
    1a44:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    1a48:	80 e0       	ldi	r24, 0x00	; 0
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	aa ef       	ldi	r26, 0xFA	; 250
    1a4e:	b3 e4       	ldi	r27, 0x43	; 67
    1a50:	8d 8b       	std	Y+21, r24	; 0x15
    1a52:	9e 8b       	std	Y+22, r25	; 0x16
    1a54:	af 8b       	std	Y+23, r26	; 0x17
    1a56:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a58:	6d 89       	ldd	r22, Y+21	; 0x15
    1a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    1a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    1a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    1a60:	2b ea       	ldi	r18, 0xAB	; 171
    1a62:	3a ea       	ldi	r19, 0xAA	; 170
    1a64:	4a e2       	ldi	r20, 0x2A	; 42
    1a66:	50 e4       	ldi	r21, 0x40	; 64
    1a68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a6c:	dc 01       	movw	r26, r24
    1a6e:	cb 01       	movw	r24, r22
    1a70:	89 8b       	std	Y+17, r24	; 0x11
    1a72:	9a 8b       	std	Y+18, r25	; 0x12
    1a74:	ab 8b       	std	Y+19, r26	; 0x13
    1a76:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a78:	69 89       	ldd	r22, Y+17	; 0x11
    1a7a:	7a 89       	ldd	r23, Y+18	; 0x12
    1a7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a80:	20 e0       	ldi	r18, 0x00	; 0
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	40 e8       	ldi	r20, 0x80	; 128
    1a86:	5f e3       	ldi	r21, 0x3F	; 63
    1a88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a8c:	88 23       	and	r24, r24
    1a8e:	1c f4       	brge	.+6      	; 0x1a96 <LCD_WriteCommand+0x424>
		__ticks = 1;
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	88 8b       	std	Y+16, r24	; 0x10
    1a94:	91 c0       	rjmp	.+290    	; 0x1bb8 <LCD_WriteCommand+0x546>
	else if (__tmp > 255)
    1a96:	69 89       	ldd	r22, Y+17	; 0x11
    1a98:	7a 89       	ldd	r23, Y+18	; 0x12
    1a9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4f e7       	ldi	r20, 0x7F	; 127
    1aa4:	53 e4       	ldi	r21, 0x43	; 67
    1aa6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1aaa:	18 16       	cp	r1, r24
    1aac:	0c f0       	brlt	.+2      	; 0x1ab0 <LCD_WriteCommand+0x43e>
    1aae:	7b c0       	rjmp	.+246    	; 0x1ba6 <LCD_WriteCommand+0x534>
	{
		_delay_ms(__us / 1000.0);
    1ab0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ab4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ab6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ab8:	20 e0       	ldi	r18, 0x00	; 0
    1aba:	30 e0       	ldi	r19, 0x00	; 0
    1abc:	4a e7       	ldi	r20, 0x7A	; 122
    1abe:	54 e4       	ldi	r21, 0x44	; 68
    1ac0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ac4:	dc 01       	movw	r26, r24
    1ac6:	cb 01       	movw	r24, r22
    1ac8:	8c 87       	std	Y+12, r24	; 0x0c
    1aca:	9d 87       	std	Y+13, r25	; 0x0d
    1acc:	ae 87       	std	Y+14, r26	; 0x0e
    1ace:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ad0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ad2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ad4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ad6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ad8:	20 e0       	ldi	r18, 0x00	; 0
    1ada:	30 e0       	ldi	r19, 0x00	; 0
    1adc:	4a ef       	ldi	r20, 0xFA	; 250
    1ade:	54 e4       	ldi	r21, 0x44	; 68
    1ae0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	88 87       	std	Y+8, r24	; 0x08
    1aea:	99 87       	std	Y+9, r25	; 0x09
    1aec:	aa 87       	std	Y+10, r26	; 0x0a
    1aee:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1af0:	68 85       	ldd	r22, Y+8	; 0x08
    1af2:	79 85       	ldd	r23, Y+9	; 0x09
    1af4:	8a 85       	ldd	r24, Y+10	; 0x0a
    1af6:	9b 85       	ldd	r25, Y+11	; 0x0b
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b04:	88 23       	and	r24, r24
    1b06:	2c f4       	brge	.+10     	; 0x1b12 <LCD_WriteCommand+0x4a0>
		__ticks = 1;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9f 83       	std	Y+7, r25	; 0x07
    1b0e:	8e 83       	std	Y+6, r24	; 0x06
    1b10:	3f c0       	rjmp	.+126    	; 0x1b90 <LCD_WriteCommand+0x51e>
	else if (__tmp > 65535)
    1b12:	68 85       	ldd	r22, Y+8	; 0x08
    1b14:	79 85       	ldd	r23, Y+9	; 0x09
    1b16:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b18:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b1a:	20 e0       	ldi	r18, 0x00	; 0
    1b1c:	3f ef       	ldi	r19, 0xFF	; 255
    1b1e:	4f e7       	ldi	r20, 0x7F	; 127
    1b20:	57 e4       	ldi	r21, 0x47	; 71
    1b22:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b26:	18 16       	cp	r1, r24
    1b28:	4c f5       	brge	.+82     	; 0x1b7c <LCD_WriteCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b2a:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b2c:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b30:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b32:	20 e0       	ldi	r18, 0x00	; 0
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	40 e2       	ldi	r20, 0x20	; 32
    1b38:	51 e4       	ldi	r21, 0x41	; 65
    1b3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	bc 01       	movw	r22, r24
    1b44:	cd 01       	movw	r24, r26
    1b46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4a:	dc 01       	movw	r26, r24
    1b4c:	cb 01       	movw	r24, r22
    1b4e:	9f 83       	std	Y+7, r25	; 0x07
    1b50:	8e 83       	std	Y+6, r24	; 0x06
    1b52:	0f c0       	rjmp	.+30     	; 0x1b72 <LCD_WriteCommand+0x500>
    1b54:	88 ec       	ldi	r24, 0xC8	; 200
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	9d 83       	std	Y+5, r25	; 0x05
    1b5a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <LCD_WriteCommand+0x4ee>
    1b64:	9d 83       	std	Y+5, r25	; 0x05
    1b66:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b68:	8e 81       	ldd	r24, Y+6	; 0x06
    1b6a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	9f 83       	std	Y+7, r25	; 0x07
    1b70:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b72:	8e 81       	ldd	r24, Y+6	; 0x06
    1b74:	9f 81       	ldd	r25, Y+7	; 0x07
    1b76:	00 97       	sbiw	r24, 0x00	; 0
    1b78:	69 f7       	brne	.-38     	; 0x1b54 <LCD_WriteCommand+0x4e2>
    1b7a:	24 c0       	rjmp	.+72     	; 0x1bc4 <LCD_WriteCommand+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b7c:	68 85       	ldd	r22, Y+8	; 0x08
    1b7e:	79 85       	ldd	r23, Y+9	; 0x09
    1b80:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b82:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	9f 83       	std	Y+7, r25	; 0x07
    1b8e:	8e 83       	std	Y+6, r24	; 0x06
    1b90:	8e 81       	ldd	r24, Y+6	; 0x06
    1b92:	9f 81       	ldd	r25, Y+7	; 0x07
    1b94:	9b 83       	std	Y+3, r25	; 0x03
    1b96:	8a 83       	std	Y+2, r24	; 0x02
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	f1 f7       	brne	.-4      	; 0x1b9c <LCD_WriteCommand+0x52a>
    1ba0:	9b 83       	std	Y+3, r25	; 0x03
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
    1ba4:	0f c0       	rjmp	.+30     	; 0x1bc4 <LCD_WriteCommand+0x552>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1ba6:	69 89       	ldd	r22, Y+17	; 0x11
    1ba8:	7a 89       	ldd	r23, Y+18	; 0x12
    1baa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bac:	9c 89       	ldd	r25, Y+20	; 0x14
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	88 8b       	std	Y+16, r24	; 0x10
    1bb8:	88 89       	ldd	r24, Y+16	; 0x10
    1bba:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bbc:	89 81       	ldd	r24, Y+1	; 0x01
    1bbe:	8a 95       	dec	r24
    1bc0:	f1 f7       	brne	.-4      	; 0x1bbe <LCD_WriteCommand+0x54c>
    1bc2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);

}
    1bc4:	c7 5b       	subi	r28, 0xB7	; 183
    1bc6:	df 4f       	sbci	r29, 0xFF	; 255
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	08 95       	ret

00001bdc <LCD_WriteCharacter>:

/*  ---------------------------------  SENDING DATA   --------------------------------------------------  */


void LCD_WriteCharacter(uint8 chr)
{
    1bdc:	0f 93       	push	r16
    1bde:	1f 93       	push	r17
    1be0:	df 93       	push	r29
    1be2:	cf 93       	push	r28
    1be4:	cd b7       	in	r28, 0x3d	; 61
    1be6:	de b7       	in	r29, 0x3e	; 62
    1be8:	c9 54       	subi	r28, 0x49	; 73
    1bea:	d0 40       	sbci	r29, 0x00	; 0
    1bec:	0f b6       	in	r0, 0x3f	; 63
    1bee:	f8 94       	cli
    1bf0:	de bf       	out	0x3e, r29	; 62
    1bf2:	0f be       	out	0x3f, r0	; 63
    1bf4:	cd bf       	out	0x3d, r28	; 61
    1bf6:	fe 01       	movw	r30, r28
    1bf8:	e7 5b       	subi	r30, 0xB7	; 183
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	80 83       	st	Z, r24

	DIO_WritePin(LCD_RW_PIN, LOW);
    1bfe:	82 e0       	ldi	r24, 0x02	; 2
    1c00:	60 e0       	ldi	r22, 0x00	; 0
    1c02:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(LCD_RS_PIN, HIGH);
    1c06:	81 e0       	ldi	r24, 0x01	; 1
    1c08:	61 e0       	ldi	r22, 0x01	; 1
    1c0a:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(LCD_E_PIN, LOW);
    1c0e:	83 e0       	ldi	r24, 0x03	; 3
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

	LCD_4BIT_PORT = (chr & 0xf0) | (LCD_4BIT_PORT & 0x0f);
    1c16:	ab e3       	ldi	r26, 0x3B	; 59
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e7 5b       	subi	r30, 0xB7	; 183
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	80 81       	ld	r24, Z
    1c22:	98 2f       	mov	r25, r24
    1c24:	90 7f       	andi	r25, 0xF0	; 240
    1c26:	eb e3       	ldi	r30, 0x3B	; 59
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8f 70       	andi	r24, 0x0F	; 15
    1c2e:	89 2b       	or	r24, r25
    1c30:	8c 93       	st	X, r24

	DIO_WritePin(LCD_E_PIN, HIGH);
    1c32:	83 e0       	ldi	r24, 0x03	; 3
    1c34:	61 e0       	ldi	r22, 0x01	; 1
    1c36:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    1c3a:	fe 01       	movw	r30, r28
    1c3c:	eb 5b       	subi	r30, 0xBB	; 187
    1c3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a8 ec       	ldi	r26, 0xC8	; 200
    1c46:	b2 e4       	ldi	r27, 0x42	; 66
    1c48:	80 83       	st	Z, r24
    1c4a:	91 83       	std	Z+1, r25	; 0x01
    1c4c:	a2 83       	std	Z+2, r26	; 0x02
    1c4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c50:	8e 01       	movw	r16, r28
    1c52:	0f 5b       	subi	r16, 0xBF	; 191
    1c54:	1f 4f       	sbci	r17, 0xFF	; 255
    1c56:	fe 01       	movw	r30, r28
    1c58:	eb 5b       	subi	r30, 0xBB	; 187
    1c5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5c:	60 81       	ld	r22, Z
    1c5e:	71 81       	ldd	r23, Z+1	; 0x01
    1c60:	82 81       	ldd	r24, Z+2	; 0x02
    1c62:	93 81       	ldd	r25, Z+3	; 0x03
    1c64:	2b ea       	ldi	r18, 0xAB	; 171
    1c66:	3a ea       	ldi	r19, 0xAA	; 170
    1c68:	4a e2       	ldi	r20, 0x2A	; 42
    1c6a:	50 e4       	ldi	r21, 0x40	; 64
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	f8 01       	movw	r30, r16
    1c76:	80 83       	st	Z, r24
    1c78:	91 83       	std	Z+1, r25	; 0x01
    1c7a:	a2 83       	std	Z+2, r26	; 0x02
    1c7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c7e:	fe 01       	movw	r30, r28
    1c80:	ef 5b       	subi	r30, 0xBF	; 191
    1c82:	ff 4f       	sbci	r31, 0xFF	; 255
    1c84:	60 81       	ld	r22, Z
    1c86:	71 81       	ldd	r23, Z+1	; 0x01
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	20 e0       	ldi	r18, 0x00	; 0
    1c8e:	30 e0       	ldi	r19, 0x00	; 0
    1c90:	40 e8       	ldi	r20, 0x80	; 128
    1c92:	5f e3       	ldi	r21, 0x3F	; 63
    1c94:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c98:	88 23       	and	r24, r24
    1c9a:	34 f4       	brge	.+12     	; 0x1ca8 <LCD_WriteCharacter+0xcc>
		__ticks = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	fe 01       	movw	r30, r28
    1ca0:	e0 5c       	subi	r30, 0xC0	; 192
    1ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca4:	80 83       	st	Z, r24
    1ca6:	9d c0       	rjmp	.+314    	; 0x1de2 <LCD_WriteCharacter+0x206>
	else if (__tmp > 255)
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ef 5b       	subi	r30, 0xBF	; 191
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	60 81       	ld	r22, Z
    1cb0:	71 81       	ldd	r23, Z+1	; 0x01
    1cb2:	82 81       	ldd	r24, Z+2	; 0x02
    1cb4:	93 81       	ldd	r25, Z+3	; 0x03
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	53 e4       	ldi	r21, 0x43	; 67
    1cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	0c f0       	brlt	.+2      	; 0x1cc8 <LCD_WriteCharacter+0xec>
    1cc6:	7e c0       	rjmp	.+252    	; 0x1dc4 <LCD_WriteCharacter+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1cc8:	fe 01       	movw	r30, r28
    1cca:	eb 5b       	subi	r30, 0xBB	; 187
    1ccc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cce:	60 81       	ld	r22, Z
    1cd0:	71 81       	ldd	r23, Z+1	; 0x01
    1cd2:	82 81       	ldd	r24, Z+2	; 0x02
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a e7       	ldi	r20, 0x7A	; 122
    1cdc:	54 e4       	ldi	r21, 0x44	; 68
    1cde:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	cb 01       	movw	r24, r22
    1ce6:	8c af       	std	Y+60, r24	; 0x3c
    1ce8:	9d af       	std	Y+61, r25	; 0x3d
    1cea:	ae af       	std	Y+62, r26	; 0x3e
    1cec:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cee:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cf0:	7d ad       	ldd	r23, Y+61	; 0x3d
    1cf2:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cf4:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	4a ef       	ldi	r20, 0xFA	; 250
    1cfc:	54 e4       	ldi	r21, 0x44	; 68
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	88 af       	std	Y+56, r24	; 0x38
    1d08:	99 af       	std	Y+57, r25	; 0x39
    1d0a:	aa af       	std	Y+58, r26	; 0x3a
    1d0c:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1d0e:	68 ad       	ldd	r22, Y+56	; 0x38
    1d10:	79 ad       	ldd	r23, Y+57	; 0x39
    1d12:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d14:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e8       	ldi	r20, 0x80	; 128
    1d1c:	5f e3       	ldi	r21, 0x3F	; 63
    1d1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	2c f4       	brge	.+10     	; 0x1d30 <LCD_WriteCharacter+0x154>
		__ticks = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	9f ab       	std	Y+55, r25	; 0x37
    1d2c:	8e ab       	std	Y+54, r24	; 0x36
    1d2e:	3f c0       	rjmp	.+126    	; 0x1dae <LCD_WriteCharacter+0x1d2>
	else if (__tmp > 65535)
    1d30:	68 ad       	ldd	r22, Y+56	; 0x38
    1d32:	79 ad       	ldd	r23, Y+57	; 0x39
    1d34:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d36:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	3f ef       	ldi	r19, 0xFF	; 255
    1d3c:	4f e7       	ldi	r20, 0x7F	; 127
    1d3e:	57 e4       	ldi	r21, 0x47	; 71
    1d40:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d44:	18 16       	cp	r1, r24
    1d46:	4c f5       	brge	.+82     	; 0x1d9a <LCD_WriteCharacter+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d48:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d4a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d4c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d4e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	30 e0       	ldi	r19, 0x00	; 0
    1d54:	40 e2       	ldi	r20, 0x20	; 32
    1d56:	51 e4       	ldi	r21, 0x41	; 65
    1d58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5c:	dc 01       	movw	r26, r24
    1d5e:	cb 01       	movw	r24, r22
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9f ab       	std	Y+55, r25	; 0x37
    1d6e:	8e ab       	std	Y+54, r24	; 0x36
    1d70:	0f c0       	rjmp	.+30     	; 0x1d90 <LCD_WriteCharacter+0x1b4>
    1d72:	88 ec       	ldi	r24, 0xC8	; 200
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	9d ab       	std	Y+53, r25	; 0x35
    1d78:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d7a:	8c a9       	ldd	r24, Y+52	; 0x34
    1d7c:	9d a9       	ldd	r25, Y+53	; 0x35
    1d7e:	01 97       	sbiw	r24, 0x01	; 1
    1d80:	f1 f7       	brne	.-4      	; 0x1d7e <LCD_WriteCharacter+0x1a2>
    1d82:	9d ab       	std	Y+53, r25	; 0x35
    1d84:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d86:	8e a9       	ldd	r24, Y+54	; 0x36
    1d88:	9f a9       	ldd	r25, Y+55	; 0x37
    1d8a:	01 97       	sbiw	r24, 0x01	; 1
    1d8c:	9f ab       	std	Y+55, r25	; 0x37
    1d8e:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d90:	8e a9       	ldd	r24, Y+54	; 0x36
    1d92:	9f a9       	ldd	r25, Y+55	; 0x37
    1d94:	00 97       	sbiw	r24, 0x00	; 0
    1d96:	69 f7       	brne	.-38     	; 0x1d72 <LCD_WriteCharacter+0x196>
    1d98:	2d c0       	rjmp	.+90     	; 0x1df4 <LCD_WriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d9a:	68 ad       	ldd	r22, Y+56	; 0x38
    1d9c:	79 ad       	ldd	r23, Y+57	; 0x39
    1d9e:	8a ad       	ldd	r24, Y+58	; 0x3a
    1da0:	9b ad       	ldd	r25, Y+59	; 0x3b
    1da2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da6:	dc 01       	movw	r26, r24
    1da8:	cb 01       	movw	r24, r22
    1daa:	9f ab       	std	Y+55, r25	; 0x37
    1dac:	8e ab       	std	Y+54, r24	; 0x36
    1dae:	8e a9       	ldd	r24, Y+54	; 0x36
    1db0:	9f a9       	ldd	r25, Y+55	; 0x37
    1db2:	9b ab       	std	Y+51, r25	; 0x33
    1db4:	8a ab       	std	Y+50, r24	; 0x32
    1db6:	8a a9       	ldd	r24, Y+50	; 0x32
    1db8:	9b a9       	ldd	r25, Y+51	; 0x33
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	f1 f7       	brne	.-4      	; 0x1dba <LCD_WriteCharacter+0x1de>
    1dbe:	9b ab       	std	Y+51, r25	; 0x33
    1dc0:	8a ab       	std	Y+50, r24	; 0x32
    1dc2:	18 c0       	rjmp	.+48     	; 0x1df4 <LCD_WriteCharacter+0x218>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ef 5b       	subi	r30, 0xBF	; 191
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	60 81       	ld	r22, Z
    1dcc:	71 81       	ldd	r23, Z+1	; 0x01
    1dce:	82 81       	ldd	r24, Z+2	; 0x02
    1dd0:	93 81       	ldd	r25, Z+3	; 0x03
    1dd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	fe 01       	movw	r30, r28
    1ddc:	e0 5c       	subi	r30, 0xC0	; 192
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 83       	st	Z, r24
    1de2:	fe 01       	movw	r30, r28
    1de4:	e0 5c       	subi	r30, 0xC0	; 192
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dec:	89 a9       	ldd	r24, Y+49	; 0x31
    1dee:	8a 95       	dec	r24
    1df0:	f1 f7       	brne	.-4      	; 0x1dee <LCD_WriteCharacter+0x212>
    1df2:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	DIO_WritePin(LCD_E_PIN, LOW);
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	60 e0       	ldi	r22, 0x00	; 0
    1df8:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

	LCD_4BIT_PORT = (chr << 4) | (LCD_4BIT_PORT & 0x0f);
    1dfc:	ab e3       	ldi	r26, 0x3B	; 59
    1dfe:	b0 e0       	ldi	r27, 0x00	; 0
    1e00:	fe 01       	movw	r30, r28
    1e02:	e7 5b       	subi	r30, 0xB7	; 183
    1e04:	ff 4f       	sbci	r31, 0xFF	; 255
    1e06:	80 81       	ld	r24, Z
    1e08:	88 2f       	mov	r24, r24
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	82 95       	swap	r24
    1e0e:	92 95       	swap	r25
    1e10:	90 7f       	andi	r25, 0xF0	; 240
    1e12:	98 27       	eor	r25, r24
    1e14:	80 7f       	andi	r24, 0xF0	; 240
    1e16:	98 27       	eor	r25, r24
    1e18:	98 2f       	mov	r25, r24
    1e1a:	eb e3       	ldi	r30, 0x3B	; 59
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	8f 70       	andi	r24, 0x0F	; 15
    1e22:	89 2b       	or	r24, r25
    1e24:	8c 93       	st	X, r24

	DIO_WritePin(LCD_E_PIN, HIGH);
    1e26:	83 e0       	ldi	r24, 0x03	; 3
    1e28:	61 e0       	ldi	r22, 0x01	; 1
    1e2a:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    1e2e:	80 e0       	ldi	r24, 0x00	; 0
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	a8 ec       	ldi	r26, 0xC8	; 200
    1e34:	b2 e4       	ldi	r27, 0x42	; 66
    1e36:	8d a7       	std	Y+45, r24	; 0x2d
    1e38:	9e a7       	std	Y+46, r25	; 0x2e
    1e3a:	af a7       	std	Y+47, r26	; 0x2f
    1e3c:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e3e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e40:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e42:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e44:	98 a9       	ldd	r25, Y+48	; 0x30
    1e46:	2b ea       	ldi	r18, 0xAB	; 171
    1e48:	3a ea       	ldi	r19, 0xAA	; 170
    1e4a:	4a e2       	ldi	r20, 0x2A	; 42
    1e4c:	50 e4       	ldi	r21, 0x40	; 64
    1e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	89 a7       	std	Y+41, r24	; 0x29
    1e58:	9a a7       	std	Y+42, r25	; 0x2a
    1e5a:	ab a7       	std	Y+43, r26	; 0x2b
    1e5c:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e5e:	69 a5       	ldd	r22, Y+41	; 0x29
    1e60:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e62:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e64:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e66:	20 e0       	ldi	r18, 0x00	; 0
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	40 e8       	ldi	r20, 0x80	; 128
    1e6c:	5f e3       	ldi	r21, 0x3F	; 63
    1e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e72:	88 23       	and	r24, r24
    1e74:	1c f4       	brge	.+6      	; 0x1e7c <LCD_WriteCharacter+0x2a0>
		__ticks = 1;
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	88 a7       	std	Y+40, r24	; 0x28
    1e7a:	91 c0       	rjmp	.+290    	; 0x1f9e <LCD_WriteCharacter+0x3c2>
	else if (__tmp > 255)
    1e7c:	69 a5       	ldd	r22, Y+41	; 0x29
    1e7e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e80:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e82:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e84:	20 e0       	ldi	r18, 0x00	; 0
    1e86:	30 e0       	ldi	r19, 0x00	; 0
    1e88:	4f e7       	ldi	r20, 0x7F	; 127
    1e8a:	53 e4       	ldi	r21, 0x43	; 67
    1e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e90:	18 16       	cp	r1, r24
    1e92:	0c f0       	brlt	.+2      	; 0x1e96 <LCD_WriteCharacter+0x2ba>
    1e94:	7b c0       	rjmp	.+246    	; 0x1f8c <LCD_WriteCharacter+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    1e96:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e98:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e9c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	4a e7       	ldi	r20, 0x7A	; 122
    1ea4:	54 e4       	ldi	r21, 0x44	; 68
    1ea6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	8c a3       	std	Y+36, r24	; 0x24
    1eb0:	9d a3       	std	Y+37, r25	; 0x25
    1eb2:	ae a3       	std	Y+38, r26	; 0x26
    1eb4:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb6:	6c a1       	ldd	r22, Y+36	; 0x24
    1eb8:	7d a1       	ldd	r23, Y+37	; 0x25
    1eba:	8e a1       	ldd	r24, Y+38	; 0x26
    1ebc:	9f a1       	ldd	r25, Y+39	; 0x27
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4a ef       	ldi	r20, 0xFA	; 250
    1ec4:	54 e4       	ldi	r21, 0x44	; 68
    1ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eca:	dc 01       	movw	r26, r24
    1ecc:	cb 01       	movw	r24, r22
    1ece:	88 a3       	std	Y+32, r24	; 0x20
    1ed0:	99 a3       	std	Y+33, r25	; 0x21
    1ed2:	aa a3       	std	Y+34, r26	; 0x22
    1ed4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ed6:	68 a1       	ldd	r22, Y+32	; 0x20
    1ed8:	79 a1       	ldd	r23, Y+33	; 0x21
    1eda:	8a a1       	ldd	r24, Y+34	; 0x22
    1edc:	9b a1       	ldd	r25, Y+35	; 0x23
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	40 e8       	ldi	r20, 0x80	; 128
    1ee4:	5f e3       	ldi	r21, 0x3F	; 63
    1ee6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eea:	88 23       	and	r24, r24
    1eec:	2c f4       	brge	.+10     	; 0x1ef8 <LCD_WriteCharacter+0x31c>
		__ticks = 1;
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9f 8f       	std	Y+31, r25	; 0x1f
    1ef4:	8e 8f       	std	Y+30, r24	; 0x1e
    1ef6:	3f c0       	rjmp	.+126    	; 0x1f76 <LCD_WriteCharacter+0x39a>
	else if (__tmp > 65535)
    1ef8:	68 a1       	ldd	r22, Y+32	; 0x20
    1efa:	79 a1       	ldd	r23, Y+33	; 0x21
    1efc:	8a a1       	ldd	r24, Y+34	; 0x22
    1efe:	9b a1       	ldd	r25, Y+35	; 0x23
    1f00:	20 e0       	ldi	r18, 0x00	; 0
    1f02:	3f ef       	ldi	r19, 0xFF	; 255
    1f04:	4f e7       	ldi	r20, 0x7F	; 127
    1f06:	57 e4       	ldi	r21, 0x47	; 71
    1f08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f0c:	18 16       	cp	r1, r24
    1f0e:	4c f5       	brge	.+82     	; 0x1f62 <LCD_WriteCharacter+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f10:	6c a1       	ldd	r22, Y+36	; 0x24
    1f12:	7d a1       	ldd	r23, Y+37	; 0x25
    1f14:	8e a1       	ldd	r24, Y+38	; 0x26
    1f16:	9f a1       	ldd	r25, Y+39	; 0x27
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e2       	ldi	r20, 0x20	; 32
    1f1e:	51 e4       	ldi	r21, 0x41	; 65
    1f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f24:	dc 01       	movw	r26, r24
    1f26:	cb 01       	movw	r24, r22
    1f28:	bc 01       	movw	r22, r24
    1f2a:	cd 01       	movw	r24, r26
    1f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f30:	dc 01       	movw	r26, r24
    1f32:	cb 01       	movw	r24, r22
    1f34:	9f 8f       	std	Y+31, r25	; 0x1f
    1f36:	8e 8f       	std	Y+30, r24	; 0x1e
    1f38:	0f c0       	rjmp	.+30     	; 0x1f58 <LCD_WriteCharacter+0x37c>
    1f3a:	88 ec       	ldi	r24, 0xC8	; 200
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9d 8f       	std	Y+29, r25	; 0x1d
    1f40:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <LCD_WriteCharacter+0x36a>
    1f4a:	9d 8f       	std	Y+29, r25	; 0x1d
    1f4c:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f50:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	9f 8f       	std	Y+31, r25	; 0x1f
    1f56:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f58:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f5a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	69 f7       	brne	.-38     	; 0x1f3a <LCD_WriteCharacter+0x35e>
    1f60:	24 c0       	rjmp	.+72     	; 0x1faa <LCD_WriteCharacter+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f62:	68 a1       	ldd	r22, Y+32	; 0x20
    1f64:	79 a1       	ldd	r23, Y+33	; 0x21
    1f66:	8a a1       	ldd	r24, Y+34	; 0x22
    1f68:	9b a1       	ldd	r25, Y+35	; 0x23
    1f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6e:	dc 01       	movw	r26, r24
    1f70:	cb 01       	movw	r24, r22
    1f72:	9f 8f       	std	Y+31, r25	; 0x1f
    1f74:	8e 8f       	std	Y+30, r24	; 0x1e
    1f76:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f78:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f7a:	9b 8f       	std	Y+27, r25	; 0x1b
    1f7c:	8a 8f       	std	Y+26, r24	; 0x1a
    1f7e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f80:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	f1 f7       	brne	.-4      	; 0x1f82 <LCD_WriteCharacter+0x3a6>
    1f86:	9b 8f       	std	Y+27, r25	; 0x1b
    1f88:	8a 8f       	std	Y+26, r24	; 0x1a
    1f8a:	0f c0       	rjmp	.+30     	; 0x1faa <LCD_WriteCharacter+0x3ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f8c:	69 a5       	ldd	r22, Y+41	; 0x29
    1f8e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f90:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f92:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	88 a7       	std	Y+40, r24	; 0x28
    1f9e:	88 a5       	ldd	r24, Y+40	; 0x28
    1fa0:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fa2:	89 8d       	ldd	r24, Y+25	; 0x19
    1fa4:	8a 95       	dec	r24
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <LCD_WriteCharacter+0x3c8>
    1fa8:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	DIO_WritePin(LCD_E_PIN, LOW);
    1faa:	83 e0       	ldi	r24, 0x03	; 3
    1fac:	60 e0       	ldi	r22, 0x00	; 0
    1fae:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	aa ef       	ldi	r26, 0xFA	; 250
    1fb8:	b3 e4       	ldi	r27, 0x43	; 67
    1fba:	8d 8b       	std	Y+21, r24	; 0x15
    1fbc:	9e 8b       	std	Y+22, r25	; 0x16
    1fbe:	af 8b       	std	Y+23, r26	; 0x17
    1fc0:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fc2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc8:	98 8d       	ldd	r25, Y+24	; 0x18
    1fca:	2b ea       	ldi	r18, 0xAB	; 171
    1fcc:	3a ea       	ldi	r19, 0xAA	; 170
    1fce:	4a e2       	ldi	r20, 0x2A	; 42
    1fd0:	50 e4       	ldi	r21, 0x40	; 64
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	89 8b       	std	Y+17, r24	; 0x11
    1fdc:	9a 8b       	std	Y+18, r25	; 0x12
    1fde:	ab 8b       	std	Y+19, r26	; 0x13
    1fe0:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fe2:	69 89       	ldd	r22, Y+17	; 0x11
    1fe4:	7a 89       	ldd	r23, Y+18	; 0x12
    1fe6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fe8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	1c f4       	brge	.+6      	; 0x2000 <LCD_WriteCharacter+0x424>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	88 8b       	std	Y+16, r24	; 0x10
    1ffe:	91 c0       	rjmp	.+290    	; 0x2122 <LCD_WriteCharacter+0x546>
	else if (__tmp > 255)
    2000:	69 89       	ldd	r22, Y+17	; 0x11
    2002:	7a 89       	ldd	r23, Y+18	; 0x12
    2004:	8b 89       	ldd	r24, Y+19	; 0x13
    2006:	9c 89       	ldd	r25, Y+20	; 0x14
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	4f e7       	ldi	r20, 0x7F	; 127
    200e:	53 e4       	ldi	r21, 0x43	; 67
    2010:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2014:	18 16       	cp	r1, r24
    2016:	0c f0       	brlt	.+2      	; 0x201a <LCD_WriteCharacter+0x43e>
    2018:	7b c0       	rjmp	.+246    	; 0x2110 <LCD_WriteCharacter+0x534>
	{
		_delay_ms(__us / 1000.0);
    201a:	6d 89       	ldd	r22, Y+21	; 0x15
    201c:	7e 89       	ldd	r23, Y+22	; 0x16
    201e:	8f 89       	ldd	r24, Y+23	; 0x17
    2020:	98 8d       	ldd	r25, Y+24	; 0x18
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	4a e7       	ldi	r20, 0x7A	; 122
    2028:	54 e4       	ldi	r21, 0x44	; 68
    202a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    202e:	dc 01       	movw	r26, r24
    2030:	cb 01       	movw	r24, r22
    2032:	8c 87       	std	Y+12, r24	; 0x0c
    2034:	9d 87       	std	Y+13, r25	; 0x0d
    2036:	ae 87       	std	Y+14, r26	; 0x0e
    2038:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6c 85       	ldd	r22, Y+12	; 0x0c
    203c:	7d 85       	ldd	r23, Y+13	; 0x0d
    203e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2040:	9f 85       	ldd	r25, Y+15	; 0x0f
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	88 87       	std	Y+8, r24	; 0x08
    2054:	99 87       	std	Y+9, r25	; 0x09
    2056:	aa 87       	std	Y+10, r26	; 0x0a
    2058:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    205a:	68 85       	ldd	r22, Y+8	; 0x08
    205c:	79 85       	ldd	r23, Y+9	; 0x09
    205e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2060:	9b 85       	ldd	r25, Y+11	; 0x0b
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <LCD_WriteCharacter+0x4a0>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	9f 83       	std	Y+7, r25	; 0x07
    2078:	8e 83       	std	Y+6, r24	; 0x06
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <LCD_WriteCharacter+0x51e>
	else if (__tmp > 65535)
    207c:	68 85       	ldd	r22, Y+8	; 0x08
    207e:	79 85       	ldd	r23, Y+9	; 0x09
    2080:	8a 85       	ldd	r24, Y+10	; 0x0a
    2082:	9b 85       	ldd	r25, Y+11	; 0x0b
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <LCD_WriteCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6c 85       	ldd	r22, Y+12	; 0x0c
    2096:	7d 85       	ldd	r23, Y+13	; 0x0d
    2098:	8e 85       	ldd	r24, Y+14	; 0x0e
    209a:	9f 85       	ldd	r25, Y+15	; 0x0f
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	9f 83       	std	Y+7, r25	; 0x07
    20ba:	8e 83       	std	Y+6, r24	; 0x06
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <LCD_WriteCharacter+0x500>
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9d 83       	std	Y+5, r25	; 0x05
    20c4:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20c6:	8c 81       	ldd	r24, Y+4	; 0x04
    20c8:	9d 81       	ldd	r25, Y+5	; 0x05
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_WriteCharacter+0x4ee>
    20ce:	9d 83       	std	Y+5, r25	; 0x05
    20d0:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	8e 81       	ldd	r24, Y+6	; 0x06
    20d4:	9f 81       	ldd	r25, Y+7	; 0x07
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	9f 83       	std	Y+7, r25	; 0x07
    20da:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	8e 81       	ldd	r24, Y+6	; 0x06
    20de:	9f 81       	ldd	r25, Y+7	; 0x07
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <LCD_WriteCharacter+0x4e2>
    20e4:	24 c0       	rjmp	.+72     	; 0x212e <LCD_WriteCharacter+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	68 85       	ldd	r22, Y+8	; 0x08
    20e8:	79 85       	ldd	r23, Y+9	; 0x09
    20ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	9f 83       	std	Y+7, r25	; 0x07
    20f8:	8e 83       	std	Y+6, r24	; 0x06
    20fa:	8e 81       	ldd	r24, Y+6	; 0x06
    20fc:	9f 81       	ldd	r25, Y+7	; 0x07
    20fe:	9b 83       	std	Y+3, r25	; 0x03
    2100:	8a 83       	std	Y+2, r24	; 0x02
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	9b 81       	ldd	r25, Y+3	; 0x03
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_WriteCharacter+0x52a>
    210a:	9b 83       	std	Y+3, r25	; 0x03
    210c:	8a 83       	std	Y+2, r24	; 0x02
    210e:	0f c0       	rjmp	.+30     	; 0x212e <LCD_WriteCharacter+0x552>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2110:	69 89       	ldd	r22, Y+17	; 0x11
    2112:	7a 89       	ldd	r23, Y+18	; 0x12
    2114:	8b 89       	ldd	r24, Y+19	; 0x13
    2116:	9c 89       	ldd	r25, Y+20	; 0x14
    2118:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	88 8b       	std	Y+16, r24	; 0x10
    2122:	88 89       	ldd	r24, Y+16	; 0x10
    2124:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2126:	89 81       	ldd	r24, Y+1	; 0x01
    2128:	8a 95       	dec	r24
    212a:	f1 f7       	brne	.-4      	; 0x2128 <LCD_WriteCharacter+0x54c>
    212c:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);

}
    212e:	c7 5b       	subi	r28, 0xB7	; 183
    2130:	df 4f       	sbci	r29, 0xFF	; 255
    2132:	0f b6       	in	r0, 0x3f	; 63
    2134:	f8 94       	cli
    2136:	de bf       	out	0x3e, r29	; 62
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	cd bf       	out	0x3d, r28	; 61
    213c:	cf 91       	pop	r28
    213e:	df 91       	pop	r29
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret

00002146 <LCD_WriteString>:

/* ---------------------------------  WRITE A STRING  --------------------------------------------------  */


void LCD_WriteString(uint8* str)
{
    2146:	df 93       	push	r29
    2148:	cf 93       	push	r28
    214a:	00 d0       	rcall	.+0      	; 0x214c <LCD_WriteString+0x6>
    214c:	0f 92       	push	r0
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
    2152:	9b 83       	std	Y+3, r25	; 0x03
    2154:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i= 0;
    2156:	19 82       	std	Y+1, r1	; 0x01
    2158:	0e c0       	rjmp	.+28     	; 0x2176 <LCD_WriteString+0x30>

	while(str[i] !='\0')
	{
		LCD_WriteCharacter(str[i]);
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	28 2f       	mov	r18, r24
    215e:	30 e0       	ldi	r19, 0x00	; 0
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	fc 01       	movw	r30, r24
    2166:	e2 0f       	add	r30, r18
    2168:	f3 1f       	adc	r31, r19
    216a:	80 81       	ld	r24, Z
    216c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_WriteCharacter>
		i++;
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	8f 5f       	subi	r24, 0xFF	; 255
    2174:	89 83       	std	Y+1, r24	; 0x01

void LCD_WriteString(uint8* str)
{
	uint8 i= 0;

	while(str[i] !='\0')
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	fc 01       	movw	r30, r24
    2182:	e2 0f       	add	r30, r18
    2184:	f3 1f       	adc	r31, r19
    2186:	80 81       	ld	r24, Z
    2188:	88 23       	and	r24, r24
    218a:	39 f7       	brne	.-50     	; 0x215a <LCD_WriteString+0x14>
	{
		LCD_WriteCharacter(str[i]);
		i++;
	}
}
    218c:	0f 90       	pop	r0
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	cf 91       	pop	r28
    2194:	df 91       	pop	r29
    2196:	08 95       	ret

00002198 <LCD_WriteInteger>:


/*  ---------------------------------  WRITE INTEGER --------------------------------------------------  */

void LCD_WriteInteger(uint32 intgr)
{
    2198:	ef 92       	push	r14
    219a:	ff 92       	push	r15
    219c:	0f 93       	push	r16
    219e:	1f 93       	push	r17
    21a0:	df 93       	push	r29
    21a2:	cf 93       	push	r28
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	28 97       	sbiw	r28, 0x08	; 8
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	6d 83       	std	Y+5, r22	; 0x05
    21b6:	7e 83       	std	Y+6, r23	; 0x06
    21b8:	8f 83       	std	Y+7, r24	; 0x07
    21ba:	98 87       	std	Y+8, r25	; 0x08


	uint32 y = 1;
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a0 e0       	ldi	r26, 0x00	; 0
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	89 83       	std	Y+1, r24	; 0x01
    21c6:	9a 83       	std	Y+2, r25	; 0x02
    21c8:	ab 83       	std	Y+3, r26	; 0x03
    21ca:	bc 83       	std	Y+4, r27	; 0x04
    21cc:	36 c0       	rjmp	.+108    	; 0x223a <LCD_WriteInteger+0xa2>

	while(intgr > 0)
	{
		y = ((y*10) + (intgr%10));
    21ce:	89 81       	ldd	r24, Y+1	; 0x01
    21d0:	9a 81       	ldd	r25, Y+2	; 0x02
    21d2:	ab 81       	ldd	r26, Y+3	; 0x03
    21d4:	bc 81       	ldd	r27, Y+4	; 0x04
    21d6:	2a e0       	ldi	r18, 0x0A	; 10
    21d8:	30 e0       	ldi	r19, 0x00	; 0
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	50 e0       	ldi	r21, 0x00	; 0
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <__mulsi3>
    21e6:	7b 01       	movw	r14, r22
    21e8:	8c 01       	movw	r16, r24
    21ea:	8d 81       	ldd	r24, Y+5	; 0x05
    21ec:	9e 81       	ldd	r25, Y+6	; 0x06
    21ee:	af 81       	ldd	r26, Y+7	; 0x07
    21f0:	b8 85       	ldd	r27, Y+8	; 0x08
    21f2:	2a e0       	ldi	r18, 0x0A	; 10
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	40 e0       	ldi	r20, 0x00	; 0
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	bc 01       	movw	r22, r24
    21fc:	cd 01       	movw	r24, r26
    21fe:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8e 0d       	add	r24, r14
    2208:	9f 1d       	adc	r25, r15
    220a:	a0 1f       	adc	r26, r16
    220c:	b1 1f       	adc	r27, r17
    220e:	89 83       	std	Y+1, r24	; 0x01
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	ab 83       	std	Y+3, r26	; 0x03
    2214:	bc 83       	std	Y+4, r27	; 0x04
		intgr /= 10;
    2216:	8d 81       	ldd	r24, Y+5	; 0x05
    2218:	9e 81       	ldd	r25, Y+6	; 0x06
    221a:	af 81       	ldd	r26, Y+7	; 0x07
    221c:	b8 85       	ldd	r27, Y+8	; 0x08
    221e:	2a e0       	ldi	r18, 0x0A	; 10
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	bc 01       	movw	r22, r24
    2228:	cd 01       	movw	r24, r26
    222a:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    222e:	da 01       	movw	r26, r20
    2230:	c9 01       	movw	r24, r18
    2232:	8d 83       	std	Y+5, r24	; 0x05
    2234:	9e 83       	std	Y+6, r25	; 0x06
    2236:	af 83       	std	Y+7, r26	; 0x07
    2238:	b8 87       	std	Y+8, r27	; 0x08
{


	uint32 y = 1;

	while(intgr > 0)
    223a:	8d 81       	ldd	r24, Y+5	; 0x05
    223c:	9e 81       	ldd	r25, Y+6	; 0x06
    223e:	af 81       	ldd	r26, Y+7	; 0x07
    2240:	b8 85       	ldd	r27, Y+8	; 0x08
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	a1 05       	cpc	r26, r1
    2246:	b1 05       	cpc	r27, r1
    2248:	11 f6       	brne	.-124    	; 0x21ce <LCD_WriteInteger+0x36>
    224a:	23 c0       	rjmp	.+70     	; 0x2292 <LCD_WriteInteger+0xfa>
		intgr /= 10;
	}

	while(y > 1 )
	{
		LCD_WriteCharacter(((y%10)+48));
    224c:	89 81       	ldd	r24, Y+1	; 0x01
    224e:	9a 81       	ldd	r25, Y+2	; 0x02
    2250:	ab 81       	ldd	r26, Y+3	; 0x03
    2252:	bc 81       	ldd	r27, Y+4	; 0x04
    2254:	2a e0       	ldi	r18, 0x0A	; 10
    2256:	30 e0       	ldi	r19, 0x00	; 0
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	50 e0       	ldi	r21, 0x00	; 0
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	80 5d       	subi	r24, 0xD0	; 208
    226a:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <LCD_WriteCharacter>
		y /= 10;
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	9a 81       	ldd	r25, Y+2	; 0x02
    2272:	ab 81       	ldd	r26, Y+3	; 0x03
    2274:	bc 81       	ldd	r27, Y+4	; 0x04
    2276:	2a e0       	ldi	r18, 0x0A	; 10
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e0       	ldi	r20, 0x00	; 0
    227c:	50 e0       	ldi	r21, 0x00	; 0
    227e:	bc 01       	movw	r22, r24
    2280:	cd 01       	movw	r24, r26
    2282:	0e 94 55 16 	call	0x2caa	; 0x2caa <__udivmodsi4>
    2286:	da 01       	movw	r26, r20
    2288:	c9 01       	movw	r24, r18
    228a:	89 83       	std	Y+1, r24	; 0x01
    228c:	9a 83       	std	Y+2, r25	; 0x02
    228e:	ab 83       	std	Y+3, r26	; 0x03
    2290:	bc 83       	std	Y+4, r27	; 0x04
	{
		y = ((y*10) + (intgr%10));
		intgr /= 10;
	}

	while(y > 1 )
    2292:	89 81       	ldd	r24, Y+1	; 0x01
    2294:	9a 81       	ldd	r25, Y+2	; 0x02
    2296:	ab 81       	ldd	r26, Y+3	; 0x03
    2298:	bc 81       	ldd	r27, Y+4	; 0x04
    229a:	82 30       	cpi	r24, 0x02	; 2
    229c:	91 05       	cpc	r25, r1
    229e:	a1 05       	cpc	r26, r1
    22a0:	b1 05       	cpc	r27, r1
    22a2:	a0 f6       	brcc	.-88     	; 0x224c <LCD_WriteInteger+0xb4>
	{
		LCD_WriteCharacter(((y%10)+48));
		y /= 10;
	}

}
    22a4:	28 96       	adiw	r28, 0x08	; 8
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	1f 91       	pop	r17
    22b6:	0f 91       	pop	r16
    22b8:	ff 90       	pop	r15
    22ba:	ef 90       	pop	r14
    22bc:	08 95       	ret

000022be <LCD_GoTo>:

/*  ---------------------------------  GOTO SPECIFIC LOCATION  -------------------------------------------------- */

void LCD_GoTo(uint8 row,uint8 col)
{
    22be:	df 93       	push	r29
    22c0:	cf 93       	push	r28
    22c2:	00 d0       	rcall	.+0      	; 0x22c4 <LCD_GoTo+0x6>
    22c4:	00 d0       	rcall	.+0      	; 0x22c6 <LCD_GoTo+0x8>
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	8b 83       	std	Y+3, r24	; 0x03
    22cc:	6c 83       	std	Y+4, r22	; 0x04
	uint8 arr[2] = {0x80,0xc0};
    22ce:	80 e8       	ldi	r24, 0x80	; 128
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	80 ec       	ldi	r24, 0xC0	; 192
    22d4:	8a 83       	std	Y+2, r24	; 0x02

	LCD_WriteCommand(arr[row]+col);
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	ce 01       	movw	r24, r28
    22de:	01 96       	adiw	r24, 0x01	; 1
    22e0:	fc 01       	movw	r30, r24
    22e2:	e2 0f       	add	r30, r18
    22e4:	f3 1f       	adc	r31, r19
    22e6:	90 81       	ld	r25, Z
    22e8:	8c 81       	ldd	r24, Y+4	; 0x04
    22ea:	89 0f       	add	r24, r25
    22ec:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>

}
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <LCD_Clear>:


/*  ---------------------------------  CLEAR LCD  --------------------------------------------------  */

void LCD_Clear(void)
{
    22fe:	df 93       	push	r29
    2300:	cf 93       	push	r28
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62

	LCD_WriteCommand(0x01);
    2306:	81 e0       	ldi	r24, 0x01	; 1
    2308:	0e 94 39 0b 	call	0x1672	; 0x1672 <LCD_WriteCommand>
}
    230c:	cf 91       	pop	r28
    230e:	df 91       	pop	r29
    2310:	08 95       	ret

00002312 <SOS_Init>:
 *               to start counting and enabling timer0's overflows interrupt            *
 *                                                                                      *
 ****************************************************************************************/

void SOS_Init()
{
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
	/*initialize OCR with initial value*/
	Timer0_Set_OCR0(130);
    231a:	82 e8       	ldi	r24, 0x82	; 130
    231c:	0e 94 d6 13 	call	0x27ac	; 0x27ac <Timer0_Set_OCR0>
	/*initiate timer0 ctc mode with pre scaler 64*/
	Timer0_init();
    2320:	0e 94 c1 13 	call	0x2782	; 0x2782 <Timer0_init>
	/*set call back function*/
	SetCallBack(Scheduler_CallBack);
    2324:	87 ee       	ldi	r24, 0xE7	; 231
    2326:	92 e1       	ldi	r25, 0x12	; 18
    2328:	0e 94 6d 14 	call	0x28da	; 0x28da <SetCallBack>
	/*enable compare match interrupt*/
	Timer0_Interrupt_Enable();
    232c:	0e 94 5f 14 	call	0x28be	; 0x28be <Timer0_Interrupt_Enable>
	/*enable global interrupt*/
	Global_Interrupt_Enable();
    2330:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Global_Interrupt_Enable>

}
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	08 95       	ret

0000233a <SOS_Run>:
 *                to be executed, and which task should turn to status waiting          *
 *                                                                                      *
 ****************************************************************************************/

void SOS_Run()
{
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	00 d0       	rcall	.+0      	; 0x2340 <SOS_Run+0x6>
    2340:	0f 92       	push	r0
    2342:	cd b7       	in	r28, 0x3d	; 61
    2344:	de b7       	in	r29, 0x3e	; 62
	uint8 task_number_var1 = 0;
    2346:	1b 82       	std	Y+3, r1	; 0x03
	uint8 max_task_periority = 0;
    2348:	1a 82       	std	Y+2, r1	; 0x02
	uint8 executed_task = 0;
    234a:	19 82       	std	Y+1, r1	; 0x01

	while(1)
	{
		/*searching for the ready tasks*/
		for(task_number_var1 =0 ;task_number_var1 < ToTal_SystemTasks; task_number_var1++ )
    234c:	1b 82       	std	Y+3, r1	; 0x03
    234e:	75 c0       	rjmp	.+234    	; 0x243a <SOS_Run+0x100>
		{

			if(System_Tasks[task_number_var1].Task_Status_m == Ready)
    2350:	8b 81       	ldd	r24, Y+3	; 0x03
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	c9 01       	movw	r24, r18
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	88 0f       	add	r24, r24
    235e:	99 1f       	adc	r25, r25
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	82 0f       	add	r24, r18
    2366:	93 1f       	adc	r25, r19
    2368:	fc 01       	movw	r30, r24
    236a:	e8 5e       	subi	r30, 0xE8	; 232
    236c:	fe 4f       	sbci	r31, 0xFE	; 254
    236e:	80 81       	ld	r24, Z
    2370:	88 23       	and	r24, r24
    2372:	09 f0       	breq	.+2      	; 0x2376 <SOS_Run+0x3c>
    2374:	5f c0       	rjmp	.+190    	; 0x2434 <SOS_Run+0xfa>
			{
				/*finding the highest priority of ready task*/
				if(max_task_periority <= System_Tasks[task_number_var1].Task_Priority_m)
    2376:	8b 81       	ldd	r24, Y+3	; 0x03
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	c9 01       	movw	r24, r18
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	88 0f       	add	r24, r24
    2388:	99 1f       	adc	r25, r25
    238a:	82 0f       	add	r24, r18
    238c:	93 1f       	adc	r25, r19
    238e:	fc 01       	movw	r30, r24
    2390:	ea 5e       	subi	r30, 0xEA	; 234
    2392:	fe 4f       	sbci	r31, 0xFE	; 254
    2394:	90 81       	ld	r25, Z
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	98 17       	cp	r25, r24
    239a:	98 f0       	brcs	.+38     	; 0x23c2 <SOS_Run+0x88>
				{
					max_task_periority = System_Tasks[task_number_var1].Task_Priority_m;
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	28 2f       	mov	r18, r24
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	c9 01       	movw	r24, r18
    23a4:	88 0f       	add	r24, r24
    23a6:	99 1f       	adc	r25, r25
    23a8:	88 0f       	add	r24, r24
    23aa:	99 1f       	adc	r25, r25
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	82 0f       	add	r24, r18
    23b2:	93 1f       	adc	r25, r19
    23b4:	fc 01       	movw	r30, r24
    23b6:	ea 5e       	subi	r30, 0xEA	; 234
    23b8:	fe 4f       	sbci	r31, 0xFE	; 254
    23ba:	80 81       	ld	r24, Z
    23bc:	8a 83       	std	Y+2, r24	; 0x02
					/*assign the highest priority task to a variable*/
					executed_task = task_number_var1;
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	89 83       	std	Y+1, r24	; 0x01
				}

				/*turning the executed task to running state*/
				System_Tasks[executed_task].Task_Status_m = Running;
    23c2:	89 81       	ldd	r24, Y+1	; 0x01
    23c4:	28 2f       	mov	r18, r24
    23c6:	30 e0       	ldi	r19, 0x00	; 0
    23c8:	c9 01       	movw	r24, r18
    23ca:	88 0f       	add	r24, r24
    23cc:	99 1f       	adc	r25, r25
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	88 0f       	add	r24, r24
    23d4:	99 1f       	adc	r25, r25
    23d6:	82 0f       	add	r24, r18
    23d8:	93 1f       	adc	r25, r19
    23da:	fc 01       	movw	r30, r24
    23dc:	e8 5e       	subi	r30, 0xE8	; 232
    23de:	fe 4f       	sbci	r31, 0xFE	; 254
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	80 83       	st	Z, r24
				/*execute the highest priority ready task*/
				System_Tasks[executed_task].Task_Ptr();
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	28 2f       	mov	r18, r24
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	c9 01       	movw	r24, r18
    23ec:	88 0f       	add	r24, r24
    23ee:	99 1f       	adc	r25, r25
    23f0:	88 0f       	add	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	88 0f       	add	r24, r24
    23f6:	99 1f       	adc	r25, r25
    23f8:	82 0f       	add	r24, r18
    23fa:	93 1f       	adc	r25, r19
    23fc:	fc 01       	movw	r30, r24
    23fe:	e0 5f       	subi	r30, 0xF0	; 240
    2400:	fe 4f       	sbci	r31, 0xFE	; 254
    2402:	01 90       	ld	r0, Z+
    2404:	f0 81       	ld	r31, Z
    2406:	e0 2d       	mov	r30, r0
    2408:	09 95       	icall
				/*turning the done task to status waiting*/
				System_Tasks[executed_task].Task_Status_m = Waiting;
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	c9 01       	movw	r24, r18
    2412:	88 0f       	add	r24, r24
    2414:	99 1f       	adc	r25, r25
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	88 0f       	add	r24, r24
    241c:	99 1f       	adc	r25, r25
    241e:	82 0f       	add	r24, r18
    2420:	93 1f       	adc	r25, r19
    2422:	fc 01       	movw	r30, r24
    2424:	e8 5e       	subi	r30, 0xE8	; 232
    2426:	fe 4f       	sbci	r31, 0xFE	; 254
    2428:	82 e0       	ldi	r24, 0x02	; 2
    242a:	80 83       	st	Z, r24
				/*initialize counter to 0*/
				task_number_var1 = 0;
    242c:	1b 82       	std	Y+3, r1	; 0x03
				/*minus the highest found priority to find the lower priority ready task*/
				max_task_periority--;
    242e:	8a 81       	ldd	r24, Y+2	; 0x02
    2430:	81 50       	subi	r24, 0x01	; 1
    2432:	8a 83       	std	Y+2, r24	; 0x02
	uint8 executed_task = 0;

	while(1)
	{
		/*searching for the ready tasks*/
		for(task_number_var1 =0 ;task_number_var1 < ToTal_SystemTasks; task_number_var1++ )
    2434:	8b 81       	ldd	r24, Y+3	; 0x03
    2436:	8f 5f       	subi	r24, 0xFF	; 255
    2438:	8b 83       	std	Y+3, r24	; 0x03
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	83 30       	cpi	r24, 0x03	; 3
    243e:	08 f4       	brcc	.+2      	; 0x2442 <SOS_Run+0x108>
    2440:	87 cf       	rjmp	.-242    	; 0x2350 <SOS_Run+0x16>
    2442:	84 cf       	rjmp	.-248    	; 0x234c <SOS_Run+0x12>

00002444 <SOS_CreatTask>:
 * description: this function creates shceduler's tasks                                 *
 *                                                                                      *
 ****************************************************************************************/

void SOS_CreatTask(void(*task_ptr)(void), uint16 time, uint8 priority, uint8 ID )
{
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	00 d0       	rcall	.+0      	; 0x244a <SOS_CreatTask+0x6>
    244a:	00 d0       	rcall	.+0      	; 0x244c <SOS_CreatTask+0x8>
    244c:	00 d0       	rcall	.+0      	; 0x244e <SOS_CreatTask+0xa>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01
    2456:	7c 83       	std	Y+4, r23	; 0x04
    2458:	6b 83       	std	Y+3, r22	; 0x03
    245a:	4d 83       	std	Y+5, r20	; 0x05
    245c:	2e 83       	std	Y+6, r18	; 0x06
	static uint8 Task_Num = 0;

	/*assign the function address to the pointer to function member in the TCB*/
	System_Tasks[Task_Num].Task_Ptr = task_ptr;
    245e:	80 91 08 01 	lds	r24, 0x0108
    2462:	28 2f       	mov	r18, r24
    2464:	30 e0       	ldi	r19, 0x00	; 0
    2466:	c9 01       	movw	r24, r18
    2468:	88 0f       	add	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	88 0f       	add	r24, r24
    246e:	99 1f       	adc	r25, r25
    2470:	88 0f       	add	r24, r24
    2472:	99 1f       	adc	r25, r25
    2474:	82 0f       	add	r24, r18
    2476:	93 1f       	adc	r25, r19
    2478:	fc 01       	movw	r30, r24
    247a:	e0 5f       	subi	r30, 0xF0	; 240
    247c:	fe 4f       	sbci	r31, 0xFE	; 254
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	9a 81       	ldd	r25, Y+2	; 0x02
    2482:	91 83       	std	Z+1, r25	; 0x01
    2484:	80 83       	st	Z, r24
	/*assign the frequent time of the task to the time member in the TCB*/
	System_Tasks[Task_Num].Task_Time_m = time;
    2486:	80 91 08 01 	lds	r24, 0x0108
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	c9 01       	movw	r24, r18
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	88 0f       	add	r24, r24
    2496:	99 1f       	adc	r25, r25
    2498:	88 0f       	add	r24, r24
    249a:	99 1f       	adc	r25, r25
    249c:	82 0f       	add	r24, r18
    249e:	93 1f       	adc	r25, r19
    24a0:	fc 01       	movw	r30, r24
    24a2:	ee 5e       	subi	r30, 0xEE	; 238
    24a4:	fe 4f       	sbci	r31, 0xFE	; 254
    24a6:	8b 81       	ldd	r24, Y+3	; 0x03
    24a8:	9c 81       	ldd	r25, Y+4	; 0x04
    24aa:	91 83       	std	Z+1, r25	; 0x01
    24ac:	80 83       	st	Z, r24
	/*assign the frequent time to the periodicity member in the TCB*/
	System_Tasks[Task_Num].Task_Periodicity_m = time;
    24ae:	80 91 08 01 	lds	r24, 0x0108
    24b2:	28 2f       	mov	r18, r24
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	c9 01       	movw	r24, r18
    24b8:	88 0f       	add	r24, r24
    24ba:	99 1f       	adc	r25, r25
    24bc:	88 0f       	add	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	88 0f       	add	r24, r24
    24c2:	99 1f       	adc	r25, r25
    24c4:	82 0f       	add	r24, r18
    24c6:	93 1f       	adc	r25, r19
    24c8:	fc 01       	movw	r30, r24
    24ca:	ec 5e       	subi	r30, 0xEC	; 236
    24cc:	fe 4f       	sbci	r31, 0xFE	; 254
    24ce:	8b 81       	ldd	r24, Y+3	; 0x03
    24d0:	9c 81       	ldd	r25, Y+4	; 0x04
    24d2:	91 83       	std	Z+1, r25	; 0x01
    24d4:	80 83       	st	Z, r24
	/*assign the priority of the function to priority member in the TCB*/
	System_Tasks[Task_Num].Task_Priority_m = priority;
    24d6:	80 91 08 01 	lds	r24, 0x0108
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	c9 01       	movw	r24, r18
    24e0:	88 0f       	add	r24, r24
    24e2:	99 1f       	adc	r25, r25
    24e4:	88 0f       	add	r24, r24
    24e6:	99 1f       	adc	r25, r25
    24e8:	88 0f       	add	r24, r24
    24ea:	99 1f       	adc	r25, r25
    24ec:	82 0f       	add	r24, r18
    24ee:	93 1f       	adc	r25, r19
    24f0:	fc 01       	movw	r30, r24
    24f2:	ea 5e       	subi	r30, 0xEA	; 234
    24f4:	fe 4f       	sbci	r31, 0xFE	; 254
    24f6:	8d 81       	ldd	r24, Y+5	; 0x05
    24f8:	80 83       	st	Z, r24
	/*assign the function address to the pointer to function member in the TCB*/
	System_Tasks[Task_Num].Task_ID_m = ID;
    24fa:	80 91 08 01 	lds	r24, 0x0108
    24fe:	28 2f       	mov	r18, r24
    2500:	30 e0       	ldi	r19, 0x00	; 0
    2502:	c9 01       	movw	r24, r18
    2504:	88 0f       	add	r24, r24
    2506:	99 1f       	adc	r25, r25
    2508:	88 0f       	add	r24, r24
    250a:	99 1f       	adc	r25, r25
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	82 0f       	add	r24, r18
    2512:	93 1f       	adc	r25, r19
    2514:	fc 01       	movw	r30, r24
    2516:	e9 5e       	subi	r30, 0xE9	; 233
    2518:	fe 4f       	sbci	r31, 0xFE	; 254
    251a:	8e 81       	ldd	r24, Y+6	; 0x06
    251c:	80 83       	st	Z, r24
	/*assign the function address to the pointer to function member in the TCB*/
	System_Tasks[Task_Num].Task_Status_m = Ready;
    251e:	80 91 08 01 	lds	r24, 0x0108
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	c9 01       	movw	r24, r18
    2528:	88 0f       	add	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	88 0f       	add	r24, r24
    252e:	99 1f       	adc	r25, r25
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	82 0f       	add	r24, r18
    2536:	93 1f       	adc	r25, r19
    2538:	fc 01       	movw	r30, r24
    253a:	e8 5e       	subi	r30, 0xE8	; 232
    253c:	fe 4f       	sbci	r31, 0xFE	; 254
    253e:	10 82       	st	Z, r1

	/*increment tne index of the TCB*/
	Task_Num++;
    2540:	80 91 08 01 	lds	r24, 0x0108
    2544:	8f 5f       	subi	r24, 0xFF	; 255
    2546:	80 93 08 01 	sts	0x0108, r24
}
    254a:	26 96       	adiw	r28, 0x06	; 6
    254c:	0f b6       	in	r0, 0x3f	; 63
    254e:	f8 94       	cli
    2550:	de bf       	out	0x3e, r29	; 62
    2552:	0f be       	out	0x3f, r0	; 63
    2554:	cd bf       	out	0x3d, r28	; 61
    2556:	cf 91       	pop	r28
    2558:	df 91       	pop	r29
    255a:	08 95       	ret

0000255c <SOS_Delete>:
 * description: this function deletes system tasks and turns them to status Deleted     *
 *                                                                                      *
 ****************************************************************************************/

void SOS_Delete(uint8 ID)
{
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	00 d0       	rcall	.+0      	; 0x2562 <SOS_Delete+0x6>
    2562:	cd b7       	in	r28, 0x3d	; 61
    2564:	de b7       	in	r29, 0x3e	; 62
    2566:	8a 83       	std	Y+2, r24	; 0x02
	uint8 task_number =0;
    2568:	19 82       	std	Y+1, r1	; 0x01

	/*searching for the task which it's id equales the deleted id*/
	for(task_number=0; task_number < ToTal_SystemTasks ;task_number++)
    256a:	19 82       	std	Y+1, r1	; 0x01
    256c:	28 c0       	rjmp	.+80     	; 0x25be <SOS_Delete+0x62>
	{
		if(System_Tasks[task_number].Task_ID_m == ID)
    256e:	89 81       	ldd	r24, Y+1	; 0x01
    2570:	28 2f       	mov	r18, r24
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	c9 01       	movw	r24, r18
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	82 0f       	add	r24, r18
    2584:	93 1f       	adc	r25, r19
    2586:	fc 01       	movw	r30, r24
    2588:	e9 5e       	subi	r30, 0xE9	; 233
    258a:	fe 4f       	sbci	r31, 0xFE	; 254
    258c:	90 81       	ld	r25, Z
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	98 17       	cp	r25, r24
    2592:	91 f4       	brne	.+36     	; 0x25b8 <SOS_Delete+0x5c>
		{
			/*turn the status of the found id to deleted*/
			System_Tasks[task_number].Task_Status_m = Deleted;
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	c9 01       	movw	r24, r18
    259c:	88 0f       	add	r24, r24
    259e:	99 1f       	adc	r25, r25
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	82 0f       	add	r24, r18
    25aa:	93 1f       	adc	r25, r19
    25ac:	fc 01       	movw	r30, r24
    25ae:	e8 5e       	subi	r30, 0xE8	; 232
    25b0:	fe 4f       	sbci	r31, 0xFE	; 254
    25b2:	83 e0       	ldi	r24, 0x03	; 3
    25b4:	80 83       	st	Z, r24
    25b6:	06 c0       	rjmp	.+12     	; 0x25c4 <SOS_Delete+0x68>
void SOS_Delete(uint8 ID)
{
	uint8 task_number =0;

	/*searching for the task which it's id equales the deleted id*/
	for(task_number=0; task_number < ToTal_SystemTasks ;task_number++)
    25b8:	89 81       	ldd	r24, Y+1	; 0x01
    25ba:	8f 5f       	subi	r24, 0xFF	; 255
    25bc:	89 83       	std	Y+1, r24	; 0x01
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	83 30       	cpi	r24, 0x03	; 3
    25c2:	a8 f2       	brcs	.-86     	; 0x256e <SOS_Delete+0x12>
			System_Tasks[task_number].Task_Status_m = Deleted;
			break;
		}

	}
}
    25c4:	0f 90       	pop	r0
    25c6:	0f 90       	pop	r0
    25c8:	cf 91       	pop	r28
    25ca:	df 91       	pop	r29
    25cc:	08 95       	ret

000025ce <Scheduler_CallBack>:
 *               to be executed                                                         *
 *                                                                                      *
 ****************************************************************************************/

void Scheduler_CallBack()
{
    25ce:	df 93       	push	r29
    25d0:	cf 93       	push	r28
    25d2:	0f 92       	push	r0
    25d4:	cd b7       	in	r28, 0x3d	; 61
    25d6:	de b7       	in	r29, 0x3e	; 62

	uint8 task_number = 0;
    25d8:	19 82       	std	Y+1, r1	; 0x01
	system_tick++;
    25da:	80 91 07 01 	lds	r24, 0x0107
    25de:	8f 5f       	subi	r24, 0xFF	; 255
    25e0:	80 93 07 01 	sts	0x0107, r24


	/*searching for the tasks with status waiting*/
	for(task_number= 0 ; task_number<ToTal_SystemTasks ; task_number++)
    25e4:	19 82       	std	Y+1, r1	; 0x01
    25e6:	a2 c0       	rjmp	.+324    	; 0x272c <Scheduler_CallBack+0x15e>
	{

		if((System_Tasks[task_number].Task_Status_m != Deleted) && (System_Tasks[task_number].Task_Status_m == Waiting))
    25e8:	89 81       	ldd	r24, Y+1	; 0x01
    25ea:	28 2f       	mov	r18, r24
    25ec:	30 e0       	ldi	r19, 0x00	; 0
    25ee:	c9 01       	movw	r24, r18
    25f0:	88 0f       	add	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	88 0f       	add	r24, r24
    25f6:	99 1f       	adc	r25, r25
    25f8:	88 0f       	add	r24, r24
    25fa:	99 1f       	adc	r25, r25
    25fc:	82 0f       	add	r24, r18
    25fe:	93 1f       	adc	r25, r19
    2600:	fc 01       	movw	r30, r24
    2602:	e8 5e       	subi	r30, 0xE8	; 232
    2604:	fe 4f       	sbci	r31, 0xFE	; 254
    2606:	80 81       	ld	r24, Z
    2608:	83 30       	cpi	r24, 0x03	; 3
    260a:	09 f4       	brne	.+2      	; 0x260e <Scheduler_CallBack+0x40>
    260c:	8c c0       	rjmp	.+280    	; 0x2726 <Scheduler_CallBack+0x158>
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	28 2f       	mov	r18, r24
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	c9 01       	movw	r24, r18
    2616:	88 0f       	add	r24, r24
    2618:	99 1f       	adc	r25, r25
    261a:	88 0f       	add	r24, r24
    261c:	99 1f       	adc	r25, r25
    261e:	88 0f       	add	r24, r24
    2620:	99 1f       	adc	r25, r25
    2622:	82 0f       	add	r24, r18
    2624:	93 1f       	adc	r25, r19
    2626:	fc 01       	movw	r30, r24
    2628:	e8 5e       	subi	r30, 0xE8	; 232
    262a:	fe 4f       	sbci	r31, 0xFE	; 254
    262c:	80 81       	ld	r24, Z
    262e:	82 30       	cpi	r24, 0x02	; 2
    2630:	09 f0       	breq	.+2      	; 0x2634 <Scheduler_CallBack+0x66>
    2632:	79 c0       	rjmp	.+242    	; 0x2726 <Scheduler_CallBack+0x158>
		{
			/*decrement its delay time*/
			System_Tasks[task_number].Task_Time_m--;
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	28 2f       	mov	r18, r24
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	c9 01       	movw	r24, r18
    263c:	88 0f       	add	r24, r24
    263e:	99 1f       	adc	r25, r25
    2640:	88 0f       	add	r24, r24
    2642:	99 1f       	adc	r25, r25
    2644:	88 0f       	add	r24, r24
    2646:	99 1f       	adc	r25, r25
    2648:	82 0f       	add	r24, r18
    264a:	93 1f       	adc	r25, r19
    264c:	fc 01       	movw	r30, r24
    264e:	ee 5e       	subi	r30, 0xEE	; 238
    2650:	fe 4f       	sbci	r31, 0xFE	; 254
    2652:	80 81       	ld	r24, Z
    2654:	91 81       	ldd	r25, Z+1	; 0x01
    2656:	ac 01       	movw	r20, r24
    2658:	41 50       	subi	r20, 0x01	; 1
    265a:	50 40       	sbci	r21, 0x00	; 0
    265c:	c9 01       	movw	r24, r18
    265e:	88 0f       	add	r24, r24
    2660:	99 1f       	adc	r25, r25
    2662:	88 0f       	add	r24, r24
    2664:	99 1f       	adc	r25, r25
    2666:	88 0f       	add	r24, r24
    2668:	99 1f       	adc	r25, r25
    266a:	82 0f       	add	r24, r18
    266c:	93 1f       	adc	r25, r19
    266e:	fc 01       	movw	r30, r24
    2670:	ee 5e       	subi	r30, 0xEE	; 238
    2672:	fe 4f       	sbci	r31, 0xFE	; 254
    2674:	51 83       	std	Z+1, r21	; 0x01
    2676:	40 83       	st	Z, r20
			/*if task's delay time == 0, so it meets it's own time*/
			if(System_Tasks[task_number].Task_Time_m == 0 )
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	28 2f       	mov	r18, r24
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	c9 01       	movw	r24, r18
    2680:	88 0f       	add	r24, r24
    2682:	99 1f       	adc	r25, r25
    2684:	88 0f       	add	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	88 0f       	add	r24, r24
    268a:	99 1f       	adc	r25, r25
    268c:	82 0f       	add	r24, r18
    268e:	93 1f       	adc	r25, r19
    2690:	fc 01       	movw	r30, r24
    2692:	ee 5e       	subi	r30, 0xEE	; 238
    2694:	fe 4f       	sbci	r31, 0xFE	; 254
    2696:	80 81       	ld	r24, Z
    2698:	91 81       	ldd	r25, Z+1	; 0x01
    269a:	00 97       	sbiw	r24, 0x00	; 0
    269c:	99 f5       	brne	.+102    	; 0x2704 <Scheduler_CallBack+0x136>
			{
				/*turn the waiting task status to ready*/
				System_Tasks[task_number].Task_Status_m = Ready;
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	28 2f       	mov	r18, r24
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	c9 01       	movw	r24, r18
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	88 0f       	add	r24, r24
    26ac:	99 1f       	adc	r25, r25
    26ae:	88 0f       	add	r24, r24
    26b0:	99 1f       	adc	r25, r25
    26b2:	82 0f       	add	r24, r18
    26b4:	93 1f       	adc	r25, r19
    26b6:	fc 01       	movw	r30, r24
    26b8:	e8 5e       	subi	r30, 0xE8	; 232
    26ba:	fe 4f       	sbci	r31, 0xFE	; 254
    26bc:	10 82       	st	Z, r1
				/*re initialize its delay time*/
				System_Tasks[task_number].Task_Time_m = System_Tasks[task_number].Task_Periodicity_m;
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	48 2f       	mov	r20, r24
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	28 2f       	mov	r18, r24
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	c9 01       	movw	r24, r18
    26cc:	88 0f       	add	r24, r24
    26ce:	99 1f       	adc	r25, r25
    26d0:	88 0f       	add	r24, r24
    26d2:	99 1f       	adc	r25, r25
    26d4:	88 0f       	add	r24, r24
    26d6:	99 1f       	adc	r25, r25
    26d8:	82 0f       	add	r24, r18
    26da:	93 1f       	adc	r25, r19
    26dc:	fc 01       	movw	r30, r24
    26de:	ec 5e       	subi	r30, 0xEC	; 236
    26e0:	fe 4f       	sbci	r31, 0xFE	; 254
    26e2:	20 81       	ld	r18, Z
    26e4:	31 81       	ldd	r19, Z+1	; 0x01
    26e6:	ca 01       	movw	r24, r20
    26e8:	88 0f       	add	r24, r24
    26ea:	99 1f       	adc	r25, r25
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	84 0f       	add	r24, r20
    26f6:	95 1f       	adc	r25, r21
    26f8:	fc 01       	movw	r30, r24
    26fa:	ee 5e       	subi	r30, 0xEE	; 238
    26fc:	fe 4f       	sbci	r31, 0xFE	; 254
    26fe:	31 83       	std	Z+1, r19	; 0x01
    2700:	20 83       	st	Z, r18
    2702:	11 c0       	rjmp	.+34     	; 0x2726 <Scheduler_CallBack+0x158>
			}
			else
			{
				/*if the task doesn't meet it's own time so its not ready yet*/
				System_Tasks[task_number].Task_Status_m = Waiting;
    2704:	89 81       	ldd	r24, Y+1	; 0x01
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	c9 01       	movw	r24, r18
    270c:	88 0f       	add	r24, r24
    270e:	99 1f       	adc	r25, r25
    2710:	88 0f       	add	r24, r24
    2712:	99 1f       	adc	r25, r25
    2714:	88 0f       	add	r24, r24
    2716:	99 1f       	adc	r25, r25
    2718:	82 0f       	add	r24, r18
    271a:	93 1f       	adc	r25, r19
    271c:	fc 01       	movw	r30, r24
    271e:	e8 5e       	subi	r30, 0xE8	; 232
    2720:	fe 4f       	sbci	r31, 0xFE	; 254
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	80 83       	st	Z, r24
	uint8 task_number = 0;
	system_tick++;


	/*searching for the tasks with status waiting*/
	for(task_number= 0 ; task_number<ToTal_SystemTasks ; task_number++)
    2726:	89 81       	ldd	r24, Y+1	; 0x01
    2728:	8f 5f       	subi	r24, 0xFF	; 255
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	89 81       	ldd	r24, Y+1	; 0x01
    272e:	83 30       	cpi	r24, 0x03	; 3
    2730:	08 f4       	brcc	.+2      	; 0x2734 <Scheduler_CallBack+0x166>
    2732:	5a cf       	rjmp	.-332    	; 0x25e8 <Scheduler_CallBack+0x1a>
		}

	}


}
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <CPU_Sleep>:


void CPU_Sleep(void)/*CPU Sleep function*/
{
    273c:	df 93       	push	r29
    273e:	cf 93       	push	r28
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
	/*set the SE bit in MCUCSR Register to enable sleep mode*/
	Set_Bit(MCUCSR,7);
    2744:	a4 e5       	ldi	r26, 0x54	; 84
    2746:	b0 e0       	ldi	r27, 0x00	; 0
    2748:	e4 e5       	ldi	r30, 0x54	; 84
    274a:	f0 e0       	ldi	r31, 0x00	; 0
    274c:	80 81       	ld	r24, Z
    274e:	80 68       	ori	r24, 0x80	; 128
    2750:	8c 93       	st	X, r24
	/*IDLE mode*/
	Clr_Bit(MCUCSR,4);
    2752:	a4 e5       	ldi	r26, 0x54	; 84
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e4 e5       	ldi	r30, 0x54	; 84
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	8f 7e       	andi	r24, 0xEF	; 239
    275e:	8c 93       	st	X, r24
	Clr_Bit(MCUCSR,5);
    2760:	a4 e5       	ldi	r26, 0x54	; 84
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	e4 e5       	ldi	r30, 0x54	; 84
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	8f 7d       	andi	r24, 0xDF	; 223
    276c:	8c 93       	st	X, r24
	Clr_Bit(MCUCSR,6);
    276e:	a4 e5       	ldi	r26, 0x54	; 84
    2770:	b0 e0       	ldi	r27, 0x00	; 0
    2772:	e4 e5       	ldi	r30, 0x54	; 84
    2774:	f0 e0       	ldi	r31, 0x00	; 0
    2776:	80 81       	ld	r24, Z
    2778:	8f 7b       	andi	r24, 0xBF	; 191
    277a:	8c 93       	st	X, r24
}
    277c:	cf 91       	pop	r28
    277e:	df 91       	pop	r29
    2780:	08 95       	ret

00002782 <Timer0_init>:

 void(*Function_Ptr)(void);
/*************************************************************/
		/*timer0 initial*/
void Timer0_init(void)
{
    2782:	df 93       	push	r29
    2784:	cf 93       	push	r28
    2786:	cd b7       	in	r28, 0x3d	; 61
    2788:	de b7       	in	r29, 0x3e	; 62


}
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <Timer0_Set_TCNT0>:

/*************************************************************/
		/*timer0 set TCNT0*/
void Timer0_Set_TCNT0(uint8 value)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	0f 92       	push	r0
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = value;
    279c:	e2 e5       	ldi	r30, 0x52	; 82
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	80 83       	st	Z, r24
}
    27a4:	0f 90       	pop	r0
    27a6:	cf 91       	pop	r28
    27a8:	df 91       	pop	r29
    27aa:	08 95       	ret

000027ac <Timer0_Set_OCR0>:
/*************************************************************/
		/*timer0 set OCR0*/
void Timer0_Set_OCR0(uint8 value)
{
    27ac:	df 93       	push	r29
    27ae:	cf 93       	push	r28
    27b0:	0f 92       	push	r0
    27b2:	cd b7       	in	r28, 0x3d	; 61
    27b4:	de b7       	in	r29, 0x3e	; 62
    27b6:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = value;
    27b8:	ec e5       	ldi	r30, 0x5C	; 92
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	89 81       	ldd	r24, Y+1	; 0x01
    27be:	80 83       	st	Z, r24
    TCCR0 |= (1 << CS00); /*prescaler=64*/
    27c0:	a3 e5       	ldi	r26, 0x53	; 83
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	e3 e5       	ldi	r30, 0x53	; 83
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	81 60       	ori	r24, 0x01	; 1
    27cc:	8c 93       	st	X, r24
    TCCR0 |= (1 << CS01);
    27ce:	a3 e5       	ldi	r26, 0x53	; 83
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e3 e5       	ldi	r30, 0x53	; 83
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	82 60       	ori	r24, 0x02	; 2
    27da:	8c 93       	st	X, r24
}
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <timer_delay>:

/*************************************************************/
		/*timer0 delay*/
void timer_delay(uint32 n)
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	28 97       	sbiw	r28, 0x08	; 8
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	6d 83       	std	Y+5, r22	; 0x05
    27fa:	7e 83       	std	Y+6, r23	; 0x06
    27fc:	8f 83       	std	Y+7, r24	; 0x07
    27fe:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	OCR0=249;
    2800:	ec e5       	ldi	r30, 0x5C	; 92
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	89 ef       	ldi	r24, 0xF9	; 249
    2806:	80 83       	st	Z, r24
	TCNT0=0;
    2808:	e2 e5       	ldi	r30, 0x52	; 82
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	10 82       	st	Z, r1
	for(i=0;i<n/2;i++)
    280e:	19 82       	std	Y+1, r1	; 0x01
    2810:	1a 82       	std	Y+2, r1	; 0x02
    2812:	1b 82       	std	Y+3, r1	; 0x03
    2814:	1c 82       	std	Y+4, r1	; 0x04
    2816:	1b c0       	rjmp	.+54     	; 0x284e <timer_delay+0x6a>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
    2818:	e8 e5       	ldi	r30, 0x58	; 88
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	81 70       	andi	r24, 0x01	; 1
    2824:	90 70       	andi	r25, 0x00	; 0
    2826:	00 97       	sbiw	r24, 0x00	; 0
    2828:	b9 f3       	breq	.-18     	; 0x2818 <timer_delay+0x34>
		Set_Bit(TIFR,OCF0);
    282a:	a8 e5       	ldi	r26, 0x58	; 88
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	e8 e5       	ldi	r30, 0x58	; 88
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	80 81       	ld	r24, Z
    2834:	82 60       	ori	r24, 0x02	; 2
    2836:	8c 93       	st	X, r24
void timer_delay(uint32 n)
{
	uint32 i;
	OCR0=249;
	TCNT0=0;
	for(i=0;i<n/2;i++)
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	ab 81       	ldd	r26, Y+3	; 0x03
    283e:	bc 81       	ldd	r27, Y+4	; 0x04
    2840:	01 96       	adiw	r24, 0x01	; 1
    2842:	a1 1d       	adc	r26, r1
    2844:	b1 1d       	adc	r27, r1
    2846:	89 83       	std	Y+1, r24	; 0x01
    2848:	9a 83       	std	Y+2, r25	; 0x02
    284a:	ab 83       	std	Y+3, r26	; 0x03
    284c:	bc 83       	std	Y+4, r27	; 0x04
    284e:	8d 81       	ldd	r24, Y+5	; 0x05
    2850:	9e 81       	ldd	r25, Y+6	; 0x06
    2852:	af 81       	ldd	r26, Y+7	; 0x07
    2854:	b8 85       	ldd	r27, Y+8	; 0x08
    2856:	9c 01       	movw	r18, r24
    2858:	ad 01       	movw	r20, r26
    285a:	56 95       	lsr	r21
    285c:	47 95       	ror	r20
    285e:	37 95       	ror	r19
    2860:	27 95       	ror	r18
    2862:	89 81       	ldd	r24, Y+1	; 0x01
    2864:	9a 81       	ldd	r25, Y+2	; 0x02
    2866:	ab 81       	ldd	r26, Y+3	; 0x03
    2868:	bc 81       	ldd	r27, Y+4	; 0x04
    286a:	82 17       	cp	r24, r18
    286c:	93 07       	cpc	r25, r19
    286e:	a4 07       	cpc	r26, r20
    2870:	b5 07       	cpc	r27, r21
    2872:	90 f2       	brcs	.-92     	; 0x2818 <timer_delay+0x34>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
		Set_Bit(TIFR,OCF0);
	}

}
    2874:	28 96       	adiw	r28, 0x08	; 8
    2876:	0f b6       	in	r0, 0x3f	; 63
    2878:	f8 94       	cli
    287a:	de bf       	out	0x3e, r29	; 62
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	cd bf       	out	0x3d, r28	; 61
    2880:	cf 91       	pop	r28
    2882:	df 91       	pop	r29
    2884:	08 95       	ret

00002886 <Timer0_Deinit>:

/*************************************************************/
		/*timer0 Deinit*/
void Timer0_Deinit(void)
{
    2886:	df 93       	push	r29
    2888:	cf 93       	push	r28
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TCCR0,CS00);
    288e:	a3 e5       	ldi	r26, 0x53	; 83
    2890:	b0 e0       	ldi	r27, 0x00	; 0
    2892:	e3 e5       	ldi	r30, 0x53	; 83
    2894:	f0 e0       	ldi	r31, 0x00	; 0
    2896:	80 81       	ld	r24, Z
    2898:	8e 7f       	andi	r24, 0xFE	; 254
    289a:	8c 93       	st	X, r24
	Clr_Bit(TCCR0,CS01);
    289c:	a3 e5       	ldi	r26, 0x53	; 83
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	e3 e5       	ldi	r30, 0x53	; 83
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	8d 7f       	andi	r24, 0xFD	; 253
    28a8:	8c 93       	st	X, r24
	Clr_Bit(TCCR0,CS02);
    28aa:	a3 e5       	ldi	r26, 0x53	; 83
    28ac:	b0 e0       	ldi	r27, 0x00	; 0
    28ae:	e3 e5       	ldi	r30, 0x53	; 83
    28b0:	f0 e0       	ldi	r31, 0x00	; 0
    28b2:	80 81       	ld	r24, Z
    28b4:	8b 7f       	andi	r24, 0xFB	; 251
    28b6:	8c 93       	st	X, r24
}
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	08 95       	ret

000028be <Timer0_Interrupt_Enable>:

/*************************************************************/
		/*timer0 Input_capture_Interrupt_Enable*/
void Timer0_Interrupt_Enable(void)
{
    28be:	df 93       	push	r29
    28c0:	cf 93       	push	r28
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,OCIE0);
    28c6:	a9 e5       	ldi	r26, 0x59	; 89
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e9 e5       	ldi	r30, 0x59	; 89
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	82 60       	ori	r24, 0x02	; 2
    28d2:	8c 93       	st	X, r24
}
    28d4:	cf 91       	pop	r28
    28d6:	df 91       	pop	r29
    28d8:	08 95       	ret

000028da <SetCallBack>:
void SetCallBack(void(*CallFunction_Ptr)(void))
{
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <SetCallBack+0x6>
    28e0:	cd b7       	in	r28, 0x3d	; 61
    28e2:	de b7       	in	r29, 0x3e	; 62
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
	Function_Ptr = CallFunction_Ptr;
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	90 93 2c 01 	sts	0x012C, r25
    28f0:	80 93 2b 01 	sts	0x012B, r24
}
    28f4:	0f 90       	pop	r0
    28f6:	0f 90       	pop	r0
    28f8:	cf 91       	pop	r28
    28fa:	df 91       	pop	r29
    28fc:	08 95       	ret

000028fe <__vector_10>:
/*****************************************************************/
					/*ISR Compare match*/
void __vector_10(void) __attribute__((signal,__INTR_ATTRS));
void __vector_10(void)
{
    28fe:	1f 92       	push	r1
    2900:	0f 92       	push	r0
    2902:	0f b6       	in	r0, 0x3f	; 63
    2904:	0f 92       	push	r0
    2906:	11 24       	eor	r1, r1
    2908:	2f 93       	push	r18
    290a:	3f 93       	push	r19
    290c:	4f 93       	push	r20
    290e:	5f 93       	push	r21
    2910:	6f 93       	push	r22
    2912:	7f 93       	push	r23
    2914:	8f 93       	push	r24
    2916:	9f 93       	push	r25
    2918:	af 93       	push	r26
    291a:	bf 93       	push	r27
    291c:	ef 93       	push	r30
    291e:	ff 93       	push	r31
    2920:	df 93       	push	r29
    2922:	cf 93       	push	r28
    2924:	cd b7       	in	r28, 0x3d	; 61
    2926:	de b7       	in	r29, 0x3e	; 62
	Function_Ptr();
    2928:	e0 91 2b 01 	lds	r30, 0x012B
    292c:	f0 91 2c 01 	lds	r31, 0x012C
    2930:	09 95       	icall
}
    2932:	cf 91       	pop	r28
    2934:	df 91       	pop	r29
    2936:	ff 91       	pop	r31
    2938:	ef 91       	pop	r30
    293a:	bf 91       	pop	r27
    293c:	af 91       	pop	r26
    293e:	9f 91       	pop	r25
    2940:	8f 91       	pop	r24
    2942:	7f 91       	pop	r23
    2944:	6f 91       	pop	r22
    2946:	5f 91       	pop	r21
    2948:	4f 91       	pop	r20
    294a:	3f 91       	pop	r19
    294c:	2f 91       	pop	r18
    294e:	0f 90       	pop	r0
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	0f 90       	pop	r0
    2954:	1f 90       	pop	r1
    2956:	18 95       	reti

00002958 <del_ms>:
 *      Author: Hossam-PC
 */
#include "del.h"

void del_ms(uint32 x)
{
    2958:	df 93       	push	r29
    295a:	cf 93       	push	r28
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	2c 97       	sbiw	r28, 0x0c	; 12
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	69 87       	std	Y+9, r22	; 0x09
    296e:	7a 87       	std	Y+10, r23	; 0x0a
    2970:	8b 87       	std	Y+11, r24	; 0x0b
    2972:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32 i,j;
	for(i=0;i<x;i++)
    2974:	19 82       	std	Y+1, r1	; 0x01
    2976:	1a 82       	std	Y+2, r1	; 0x02
    2978:	1b 82       	std	Y+3, r1	; 0x03
    297a:	1c 82       	std	Y+4, r1	; 0x04
    297c:	24 c0       	rjmp	.+72     	; 0x29c6 <del_ms+0x6e>
	{
		for(j=0;j<240;j++);
    297e:	1d 82       	std	Y+5, r1	; 0x05
    2980:	1e 82       	std	Y+6, r1	; 0x06
    2982:	1f 82       	std	Y+7, r1	; 0x07
    2984:	18 86       	std	Y+8, r1	; 0x08
    2986:	0b c0       	rjmp	.+22     	; 0x299e <del_ms+0x46>
    2988:	8d 81       	ldd	r24, Y+5	; 0x05
    298a:	9e 81       	ldd	r25, Y+6	; 0x06
    298c:	af 81       	ldd	r26, Y+7	; 0x07
    298e:	b8 85       	ldd	r27, Y+8	; 0x08
    2990:	01 96       	adiw	r24, 0x01	; 1
    2992:	a1 1d       	adc	r26, r1
    2994:	b1 1d       	adc	r27, r1
    2996:	8d 83       	std	Y+5, r24	; 0x05
    2998:	9e 83       	std	Y+6, r25	; 0x06
    299a:	af 83       	std	Y+7, r26	; 0x07
    299c:	b8 87       	std	Y+8, r27	; 0x08
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	af 81       	ldd	r26, Y+7	; 0x07
    29a4:	b8 85       	ldd	r27, Y+8	; 0x08
    29a6:	80 3f       	cpi	r24, 0xF0	; 240
    29a8:	91 05       	cpc	r25, r1
    29aa:	a1 05       	cpc	r26, r1
    29ac:	b1 05       	cpc	r27, r1
    29ae:	60 f3       	brcs	.-40     	; 0x2988 <del_ms+0x30>
#include "del.h"

void del_ms(uint32 x)
{
	volatile uint32 i,j;
	for(i=0;i<x;i++)
    29b0:	89 81       	ldd	r24, Y+1	; 0x01
    29b2:	9a 81       	ldd	r25, Y+2	; 0x02
    29b4:	ab 81       	ldd	r26, Y+3	; 0x03
    29b6:	bc 81       	ldd	r27, Y+4	; 0x04
    29b8:	01 96       	adiw	r24, 0x01	; 1
    29ba:	a1 1d       	adc	r26, r1
    29bc:	b1 1d       	adc	r27, r1
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	ab 83       	std	Y+3, r26	; 0x03
    29c4:	bc 83       	std	Y+4, r27	; 0x04
    29c6:	29 81       	ldd	r18, Y+1	; 0x01
    29c8:	3a 81       	ldd	r19, Y+2	; 0x02
    29ca:	4b 81       	ldd	r20, Y+3	; 0x03
    29cc:	5c 81       	ldd	r21, Y+4	; 0x04
    29ce:	89 85       	ldd	r24, Y+9	; 0x09
    29d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    29d2:	ab 85       	ldd	r26, Y+11	; 0x0b
    29d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    29d6:	28 17       	cp	r18, r24
    29d8:	39 07       	cpc	r19, r25
    29da:	4a 07       	cpc	r20, r26
    29dc:	5b 07       	cpc	r21, r27
    29de:	78 f2       	brcs	.-98     	; 0x297e <del_ms+0x26>
	{
		for(j=0;j<240;j++);
	}
}
    29e0:	2c 96       	adiw	r28, 0x0c	; 12
    29e2:	0f b6       	in	r0, 0x3f	; 63
    29e4:	f8 94       	cli
    29e6:	de bf       	out	0x3e, r29	; 62
    29e8:	0f be       	out	0x3f, r0	; 63
    29ea:	cd bf       	out	0x3d, r28	; 61
    29ec:	cf 91       	pop	r28
    29ee:	df 91       	pop	r29
    29f0:	08 95       	ret

000029f2 <LED2_Init>:
ENUMButton_Name Button = 0;

/*****************************************************************/
/*Init LED3 Function*/
void LED2_Init(void)
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED2,OUTPUT);
    29fa:	8e e0       	ldi	r24, 0x0E	; 14
    29fc:	61 e0       	ldi	r22, 0x01	; 1
    29fe:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_WritePin(LED2,LOW);
    2a02:	8e e0       	ldi	r24, 0x0E	; 14
    2a04:	60 e0       	ldi	r22, 0x00	; 0
    2a06:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <toggle_led2>:

void toggle_led2(void)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
	if(DIO_ReadPin(LED2)==LOW)
    2a18:	8e e0       	ldi	r24, 0x0E	; 14
    2a1a:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
    2a1e:	88 23       	and	r24, r24
    2a20:	29 f4       	brne	.+10     	; 0x2a2c <toggle_led2+0x1c>
	{
		DIO_WritePin(LED2,HIGH);
    2a22:	8e e0       	ldi	r24, 0x0E	; 14
    2a24:	61 e0       	ldi	r22, 0x01	; 1
    2a26:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    2a2a:	04 c0       	rjmp	.+8      	; 0x2a34 <toggle_led2+0x24>
	}
	else
	{
		DIO_WritePin(LED2,LOW);
    2a2c:	8e e0       	ldi	r24, 0x0E	; 14
    2a2e:	60 e0       	ldi	r22, 0x00	; 0
    2a30:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	}
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <View_On_LCD>:


void View_On_LCD(void)
{
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <View_On_LCD+0x6>
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
	static uint8 accept = 0;

	if(Question_Counter < 5)
    2a44:	80 91 0c 01 	lds	r24, 0x010C
    2a48:	85 30       	cpi	r24, 0x05	; 5
    2a4a:	08 f0       	brcs	.+2      	; 0x2a4e <View_On_LCD+0x14>
    2a4c:	ae c0       	rjmp	.+348    	; 0x2baa <View_On_LCD+0x170>
	{

		switch (accept)
    2a4e:	80 91 0f 01 	lds	r24, 0x010F
    2a52:	28 2f       	mov	r18, r24
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	3a 83       	std	Y+2, r19	; 0x02
    2a58:	29 83       	std	Y+1, r18	; 0x01
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5e:	00 97       	sbiw	r24, 0x00	; 0
    2a60:	31 f0       	breq	.+12     	; 0x2a6e <View_On_LCD+0x34>
    2a62:	29 81       	ldd	r18, Y+1	; 0x01
    2a64:	3a 81       	ldd	r19, Y+2	; 0x02
    2a66:	21 30       	cpi	r18, 0x01	; 1
    2a68:	31 05       	cpc	r19, r1
    2a6a:	c1 f1       	breq	.+112    	; 0x2adc <View_On_LCD+0xa2>
    2a6c:	b2 c0       	rjmp	.+356    	; 0x2bd2 <View_On_LCD+0x198>
		{

		case 0:

			LCD_WriteString("let's play?");
    2a6e:	80 e6       	ldi	r24, 0x60	; 96
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_WriteString>
			LCD_GoTo(1,0);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	0e 94 5f 11 	call	0x22be	; 0x22be <LCD_GoTo>
			LCD_WriteString("BUT1= Y / BUT2=N");
    2a7e:	8c e6       	ldi	r24, 0x6C	; 108
    2a80:	90 e0       	ldi	r25, 0x00	; 0
    2a82:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_WriteString>

			if(Button==YES_BUTTON)
    2a86:	80 91 0e 01 	lds	r24, 0x010E
    2a8a:	81 30       	cpi	r24, 0x01	; 1
    2a8c:	e9 f4       	brne	.+58     	; 0x2ac8 <View_On_LCD+0x8e>
			{
				accept = 1;
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	80 93 0f 01 	sts	0x010F, r24
				LCD_Clear();
    2a94:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_Clear>
                LCD_WriteString(Question[Question_Counter]);
    2a98:	43 e9       	ldi	r20, 0x93	; 147
    2a9a:	50 e0       	ldi	r21, 0x00	; 0
    2a9c:	80 91 0c 01 	lds	r24, 0x010C
    2aa0:	88 2f       	mov	r24, r24
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9c 01       	movw	r18, r24
    2aa6:	22 0f       	add	r18, r18
    2aa8:	33 1f       	adc	r19, r19
    2aaa:	22 0f       	add	r18, r18
    2aac:	33 1f       	adc	r19, r19
    2aae:	c9 01       	movw	r24, r18
    2ab0:	88 0f       	add	r24, r24
    2ab2:	99 1f       	adc	r25, r25
    2ab4:	88 0f       	add	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	82 0f       	add	r24, r18
    2aba:	93 1f       	adc	r25, r19
    2abc:	84 0f       	add	r24, r20
    2abe:	95 1f       	adc	r25, r21
    2ac0:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_WriteString>
				Button = 0;
    2ac4:	10 92 0e 01 	sts	0x010E, r1
			}
			if(Button==NO_BUTTON)
    2ac8:	80 91 0e 01 	lds	r24, 0x010E
    2acc:	82 30       	cpi	r24, 0x02	; 2
    2ace:	09 f0       	breq	.+2      	; 0x2ad2 <View_On_LCD+0x98>
    2ad0:	80 c0       	rjmp	.+256    	; 0x2bd2 <View_On_LCD+0x198>
			{
				accept = 0;
    2ad2:	10 92 0f 01 	sts	0x010F, r1
				Button = 0;
    2ad6:	10 92 0e 01 	sts	0x010E, r1
    2ada:	7b c0       	rjmp	.+246    	; 0x2bd2 <View_On_LCD+0x198>



		case 1:

			if(Button==YES_BUTTON)
    2adc:	80 91 0e 01 	lds	r24, 0x010E
    2ae0:	81 30       	cpi	r24, 0x01	; 1
    2ae2:	79 f5       	brne	.+94     	; 0x2b42 <View_On_LCD+0x108>
			{

				if(Answers[Question_Counter]==YES)
    2ae4:	80 91 0c 01 	lds	r24, 0x010C
    2ae8:	88 2f       	mov	r24, r24
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	fc 01       	movw	r30, r24
    2aee:	e9 50       	subi	r30, 0x09	; 9
    2af0:	ff 4f       	sbci	r31, 0xFF	; 255
    2af2:	80 81       	ld	r24, Z
    2af4:	81 30       	cpi	r24, 0x01	; 1
    2af6:	29 f4       	brne	.+10     	; 0x2b02 <View_On_LCD+0xc8>
				{

					Result++;
    2af8:	80 91 0a 01 	lds	r24, 0x010A
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
    2afe:	80 93 0a 01 	sts	0x010A, r24

				}

				Question_Counter++;
    2b02:	80 91 0c 01 	lds	r24, 0x010C
    2b06:	8f 5f       	subi	r24, 0xFF	; 255
    2b08:	80 93 0c 01 	sts	0x010C, r24

				LCD_Clear();
    2b0c:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_Clear>
				LCD_WriteString(Question[Question_Counter]);
    2b10:	43 e9       	ldi	r20, 0x93	; 147
    2b12:	50 e0       	ldi	r21, 0x00	; 0
    2b14:	80 91 0c 01 	lds	r24, 0x010C
    2b18:	88 2f       	mov	r24, r24
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	9c 01       	movw	r18, r24
    2b1e:	22 0f       	add	r18, r18
    2b20:	33 1f       	adc	r19, r19
    2b22:	22 0f       	add	r18, r18
    2b24:	33 1f       	adc	r19, r19
    2b26:	c9 01       	movw	r24, r18
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	82 0f       	add	r24, r18
    2b32:	93 1f       	adc	r25, r19
    2b34:	84 0f       	add	r24, r20
    2b36:	95 1f       	adc	r25, r21
    2b38:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_WriteString>

				Button = 0;
    2b3c:	10 92 0e 01 	sts	0x010E, r1
    2b40:	48 c0       	rjmp	.+144    	; 0x2bd2 <View_On_LCD+0x198>

			}

			else if(Button==NO_BUTTON)
    2b42:	80 91 0e 01 	lds	r24, 0x010E
    2b46:	82 30       	cpi	r24, 0x02	; 2
    2b48:	09 f0       	breq	.+2      	; 0x2b4c <View_On_LCD+0x112>
    2b4a:	43 c0       	rjmp	.+134    	; 0x2bd2 <View_On_LCD+0x198>
			{
				if(Answers[Question_Counter]==NO)
    2b4c:	80 91 0c 01 	lds	r24, 0x010C
    2b50:	88 2f       	mov	r24, r24
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	fc 01       	movw	r30, r24
    2b56:	e9 50       	subi	r30, 0x09	; 9
    2b58:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5a:	80 81       	ld	r24, Z
    2b5c:	88 23       	and	r24, r24
    2b5e:	29 f4       	brne	.+10     	; 0x2b6a <View_On_LCD+0x130>
				{
					Result++;
    2b60:	80 91 0a 01 	lds	r24, 0x010A
    2b64:	8f 5f       	subi	r24, 0xFF	; 255
    2b66:	80 93 0a 01 	sts	0x010A, r24
				}

				Question_Counter++;
    2b6a:	80 91 0c 01 	lds	r24, 0x010C
    2b6e:	8f 5f       	subi	r24, 0xFF	; 255
    2b70:	80 93 0c 01 	sts	0x010C, r24

				LCD_Clear();
    2b74:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_Clear>
				LCD_WriteString(Question[Question_Counter]);
    2b78:	43 e9       	ldi	r20, 0x93	; 147
    2b7a:	50 e0       	ldi	r21, 0x00	; 0
    2b7c:	80 91 0c 01 	lds	r24, 0x010C
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9c 01       	movw	r18, r24
    2b86:	22 0f       	add	r18, r18
    2b88:	33 1f       	adc	r19, r19
    2b8a:	22 0f       	add	r18, r18
    2b8c:	33 1f       	adc	r19, r19
    2b8e:	c9 01       	movw	r24, r18
    2b90:	88 0f       	add	r24, r24
    2b92:	99 1f       	adc	r25, r25
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	82 0f       	add	r24, r18
    2b9a:	93 1f       	adc	r25, r19
    2b9c:	84 0f       	add	r24, r20
    2b9e:	95 1f       	adc	r25, r21
    2ba0:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_WriteString>

				Button = 0;
    2ba4:	10 92 0e 01 	sts	0x010E, r1
    2ba8:	14 c0       	rjmp	.+40     	; 0x2bd2 <View_On_LCD+0x198>

		}
	}


	else if(Question_Counter == 5)
    2baa:	80 91 0c 01 	lds	r24, 0x010C
    2bae:	85 30       	cpi	r24, 0x05	; 5
    2bb0:	81 f4       	brne	.+32     	; 0x2bd2 <View_On_LCD+0x198>
	{
		LCD_Clear();
    2bb2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <LCD_Clear>
		LCD_WriteString("Your Result= ");
    2bb6:	8d e7       	ldi	r24, 0x7D	; 125
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	0e 94 a3 10 	call	0x2146	; 0x2146 <LCD_WriteString>
		LCD_WriteInteger(Result);
    2bbe:	80 91 0a 01 	lds	r24, 0x010A
    2bc2:	88 2f       	mov	r24, r24
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	a0 e0       	ldi	r26, 0x00	; 0
    2bc8:	b0 e0       	ldi	r27, 0x00	; 0
    2bca:	bc 01       	movw	r22, r24
    2bcc:	cd 01       	movw	r24, r26
    2bce:	0e 94 cc 10 	call	0x2198	; 0x2198 <LCD_WriteInteger>
	}

}
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	cf 91       	pop	r28
    2bd8:	df 91       	pop	r29
    2bda:	08 95       	ret

00002bdc <get_key>:

void get_key(void)
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62

	if(Get_KeyVal(&Button_pressed)==Pressed)
    2be4:	8b e0       	ldi	r24, 0x0B	; 11
    2be6:	91 e0       	ldi	r25, 0x01	; 1
    2be8:	0e 94 a9 09 	call	0x1352	; 0x1352 <Get_KeyVal>
    2bec:	82 30       	cpi	r24, 0x02	; 2
    2bee:	a1 f4       	brne	.+40     	; 0x2c18 <get_key+0x3c>
	{
		pressed_flag++;
    2bf0:	80 91 0d 01 	lds	r24, 0x010D
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	80 93 0d 01 	sts	0x010D, r24
		if(Button_pressed=='Y')
    2bfa:	80 91 0b 01 	lds	r24, 0x010B
    2bfe:	89 35       	cpi	r24, 0x59	; 89
    2c00:	21 f4       	brne	.+8      	; 0x2c0a <get_key+0x2e>
		{
			Button=YES_BUTTON;
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	80 93 0e 01 	sts	0x010E, r24
    2c08:	07 c0       	rjmp	.+14     	; 0x2c18 <get_key+0x3c>

		}
		else if(Button_pressed=='N')
    2c0a:	80 91 0b 01 	lds	r24, 0x010B
    2c0e:	8e 34       	cpi	r24, 0x4E	; 78
    2c10:	19 f4       	brne	.+6      	; 0x2c18 <get_key+0x3c>
		{
			Button=NO_BUTTON;
    2c12:	82 e0       	ldi	r24, 0x02	; 2
    2c14:	80 93 0e 01 	sts	0x010E, r24
		}
	}
}
    2c18:	cf 91       	pop	r28
    2c1a:	df 91       	pop	r29
    2c1c:	08 95       	ret

00002c1e <main>:


/*********************************************************/
/*main Function*/
int main(void)
{
    2c1e:	df 93       	push	r29
    2c20:	cf 93       	push	r28
    2c22:	cd b7       	in	r28, 0x3d	; 61
    2c24:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    2c26:	0e 94 37 0a 	call	0x146e	; 0x146e <LCD_Init>
	KeyPad_Init();
    2c2a:	0e 94 72 09 	call	0x12e4	; 0x12e4 <KeyPad_Init>
	LED2_Init();
    2c2e:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <LED2_Init>

	SOS_Init();
    2c32:	0e 94 89 11 	call	0x2312	; 0x2312 <SOS_Init>

	SOS_CreatTask(toggle_led2, 1000, 2, 1);
    2c36:	88 e0       	ldi	r24, 0x08	; 8
    2c38:	95 e1       	ldi	r25, 0x15	; 21
    2c3a:	68 ee       	ldi	r22, 0xE8	; 232
    2c3c:	73 e0       	ldi	r23, 0x03	; 3
    2c3e:	42 e0       	ldi	r20, 0x02	; 2
    2c40:	21 e0       	ldi	r18, 0x01	; 1
    2c42:	0e 94 22 12 	call	0x2444	; 0x2444 <SOS_CreatTask>
	SOS_CreatTask(View_On_LCD, 50, 1, 2);
    2c46:	8d e1       	ldi	r24, 0x1D	; 29
    2c48:	95 e1       	ldi	r25, 0x15	; 21
    2c4a:	62 e3       	ldi	r22, 0x32	; 50
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	41 e0       	ldi	r20, 0x01	; 1
    2c50:	22 e0       	ldi	r18, 0x02	; 2
    2c52:	0e 94 22 12 	call	0x2444	; 0x2444 <SOS_CreatTask>
	SOS_CreatTask(get_key, 20, 3, 0);
    2c56:	8e ee       	ldi	r24, 0xEE	; 238
    2c58:	95 e1       	ldi	r25, 0x15	; 21
    2c5a:	64 e1       	ldi	r22, 0x14	; 20
    2c5c:	70 e0       	ldi	r23, 0x00	; 0
    2c5e:	43 e0       	ldi	r20, 0x03	; 3
    2c60:	20 e0       	ldi	r18, 0x00	; 0
    2c62:	0e 94 22 12 	call	0x2444	; 0x2444 <SOS_CreatTask>

	SOS_Run();
    2c66:	0e 94 9d 11 	call	0x233a	; 0x233a <SOS_Run>
    2c6a:	ff cf       	rjmp	.-2      	; 0x2c6a <main+0x4c>

00002c6c <__mulsi3>:
    2c6c:	62 9f       	mul	r22, r18
    2c6e:	d0 01       	movw	r26, r0
    2c70:	73 9f       	mul	r23, r19
    2c72:	f0 01       	movw	r30, r0
    2c74:	82 9f       	mul	r24, r18
    2c76:	e0 0d       	add	r30, r0
    2c78:	f1 1d       	adc	r31, r1
    2c7a:	64 9f       	mul	r22, r20
    2c7c:	e0 0d       	add	r30, r0
    2c7e:	f1 1d       	adc	r31, r1
    2c80:	92 9f       	mul	r25, r18
    2c82:	f0 0d       	add	r31, r0
    2c84:	83 9f       	mul	r24, r19
    2c86:	f0 0d       	add	r31, r0
    2c88:	74 9f       	mul	r23, r20
    2c8a:	f0 0d       	add	r31, r0
    2c8c:	65 9f       	mul	r22, r21
    2c8e:	f0 0d       	add	r31, r0
    2c90:	99 27       	eor	r25, r25
    2c92:	72 9f       	mul	r23, r18
    2c94:	b0 0d       	add	r27, r0
    2c96:	e1 1d       	adc	r30, r1
    2c98:	f9 1f       	adc	r31, r25
    2c9a:	63 9f       	mul	r22, r19
    2c9c:	b0 0d       	add	r27, r0
    2c9e:	e1 1d       	adc	r30, r1
    2ca0:	f9 1f       	adc	r31, r25
    2ca2:	bd 01       	movw	r22, r26
    2ca4:	cf 01       	movw	r24, r30
    2ca6:	11 24       	eor	r1, r1
    2ca8:	08 95       	ret

00002caa <__udivmodsi4>:
    2caa:	a1 e2       	ldi	r26, 0x21	; 33
    2cac:	1a 2e       	mov	r1, r26
    2cae:	aa 1b       	sub	r26, r26
    2cb0:	bb 1b       	sub	r27, r27
    2cb2:	fd 01       	movw	r30, r26
    2cb4:	0d c0       	rjmp	.+26     	; 0x2cd0 <__udivmodsi4_ep>

00002cb6 <__udivmodsi4_loop>:
    2cb6:	aa 1f       	adc	r26, r26
    2cb8:	bb 1f       	adc	r27, r27
    2cba:	ee 1f       	adc	r30, r30
    2cbc:	ff 1f       	adc	r31, r31
    2cbe:	a2 17       	cp	r26, r18
    2cc0:	b3 07       	cpc	r27, r19
    2cc2:	e4 07       	cpc	r30, r20
    2cc4:	f5 07       	cpc	r31, r21
    2cc6:	20 f0       	brcs	.+8      	; 0x2cd0 <__udivmodsi4_ep>
    2cc8:	a2 1b       	sub	r26, r18
    2cca:	b3 0b       	sbc	r27, r19
    2ccc:	e4 0b       	sbc	r30, r20
    2cce:	f5 0b       	sbc	r31, r21

00002cd0 <__udivmodsi4_ep>:
    2cd0:	66 1f       	adc	r22, r22
    2cd2:	77 1f       	adc	r23, r23
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	1a 94       	dec	r1
    2cda:	69 f7       	brne	.-38     	; 0x2cb6 <__udivmodsi4_loop>
    2cdc:	60 95       	com	r22
    2cde:	70 95       	com	r23
    2ce0:	80 95       	com	r24
    2ce2:	90 95       	com	r25
    2ce4:	9b 01       	movw	r18, r22
    2ce6:	ac 01       	movw	r20, r24
    2ce8:	bd 01       	movw	r22, r26
    2cea:	cf 01       	movw	r24, r30
    2cec:	08 95       	ret

00002cee <__prologue_saves__>:
    2cee:	2f 92       	push	r2
    2cf0:	3f 92       	push	r3
    2cf2:	4f 92       	push	r4
    2cf4:	5f 92       	push	r5
    2cf6:	6f 92       	push	r6
    2cf8:	7f 92       	push	r7
    2cfa:	8f 92       	push	r8
    2cfc:	9f 92       	push	r9
    2cfe:	af 92       	push	r10
    2d00:	bf 92       	push	r11
    2d02:	cf 92       	push	r12
    2d04:	df 92       	push	r13
    2d06:	ef 92       	push	r14
    2d08:	ff 92       	push	r15
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	cd b7       	in	r28, 0x3d	; 61
    2d14:	de b7       	in	r29, 0x3e	; 62
    2d16:	ca 1b       	sub	r28, r26
    2d18:	db 0b       	sbc	r29, r27
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	09 94       	ijmp

00002d26 <__epilogue_restores__>:
    2d26:	2a 88       	ldd	r2, Y+18	; 0x12
    2d28:	39 88       	ldd	r3, Y+17	; 0x11
    2d2a:	48 88       	ldd	r4, Y+16	; 0x10
    2d2c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d2e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d30:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d32:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d34:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d36:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d38:	b9 84       	ldd	r11, Y+9	; 0x09
    2d3a:	c8 84       	ldd	r12, Y+8	; 0x08
    2d3c:	df 80       	ldd	r13, Y+7	; 0x07
    2d3e:	ee 80       	ldd	r14, Y+6	; 0x06
    2d40:	fd 80       	ldd	r15, Y+5	; 0x05
    2d42:	0c 81       	ldd	r16, Y+4	; 0x04
    2d44:	1b 81       	ldd	r17, Y+3	; 0x03
    2d46:	aa 81       	ldd	r26, Y+2	; 0x02
    2d48:	b9 81       	ldd	r27, Y+1	; 0x01
    2d4a:	ce 0f       	add	r28, r30
    2d4c:	d1 1d       	adc	r29, r1
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	ed 01       	movw	r28, r26
    2d5a:	08 95       	ret

00002d5c <_exit>:
    2d5c:	f8 94       	cli

00002d5e <__stop_program>:
    2d5e:	ff cf       	rjmp	.-2      	; 0x2d5e <__stop_program>
