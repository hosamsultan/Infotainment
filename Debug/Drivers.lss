
Drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000266a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000266a  000026fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800088  00800088  00002726  2**0
                  ALLOC
  3 .stab         00002394  00000000  00000000  00002728  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011d2  00000000  00000000  00004abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00005c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00005dee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00005f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00007fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  000090c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000a048  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000a48a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ad18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ae 10 	jmp	0x215c	; 0x215c <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e6       	ldi	r30, 0x6A	; 106
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 65 0d 	call	0x1aca	; 0x1aca <main>
      8a:	0c 94 33 13 	jmp	0x2666	; 0x2666 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 cb 12 	jmp	0x2596	; 0x2596 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 e7 12 	jmp	0x25ce	; 0x25ce <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 d3 12 	jmp	0x25a6	; 0x25a6 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ef 12 	jmp	0x25de	; 0x25de <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 d7 12 	jmp	0x25ae	; 0x25ae <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 f3 12 	jmp	0x25e6	; 0x25e6 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 db 12 	jmp	0x25b6	; 0x25b6 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 f7 12 	jmp	0x25ee	; 0x25ee <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <scan_btn1>:
#include "Buttons.h"

#include "Gpio.h"
#include "del.h"
uint8 scan_btn1(void)  //keypad button 1 pull up resistor
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn1)==0)
     caa:	8a e0       	ldi	r24, 0x0A	; 10
     cac:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cb0:	88 23       	and	r24, r24
     cb2:	69 f4       	brne	.+26     	; 0xcce <scan_btn1+0x30>
		{
			del_ms(30);
     cb4:	6e e1       	ldi	r22, 0x1E	; 30
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <del_ms>
			if(DIO_ReadPin(btn1)==0)
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cc6:	88 23       	and	r24, r24
     cc8:	11 f4       	brne	.+4      	; 0xcce <scan_btn1+0x30>
			{
				ret=1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <scan_btn0>:

uint8 scan_btn0(void)  //button pull down resistor
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
     ce2:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn0))
     ce4:	84 e1       	ldi	r24, 0x14	; 20
     ce6:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cea:	88 23       	and	r24, r24
     cec:	69 f0       	breq	.+26     	; 0xd08 <scan_btn0+0x30>
		{
			del_ms(30);
     cee:	6e e1       	ldi	r22, 0x1E	; 30
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <del_ms>
			if(DIO_ReadPin(btn0))
     cfa:	84 e1       	ldi	r24, 0x14	; 20
     cfc:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     d00:	88 23       	and	r24, r24
     d02:	11 f0       	breq	.+4      	; 0xd08 <scan_btn0+0x30>
			{
				ret=1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <DIO_WritePin>:
#include "Gpio.h"



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <DIO_WritePin+0x6>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==LOW)
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 23       	and	r24, r24
     d24:	09 f0       	breq	.+2      	; 0xd28 <DIO_WritePin+0x16>
     d26:	74 c0       	rjmp	.+232    	; 0xe10 <DIO_WritePin+0xfe>
	{
		if((PinNum>=0)&&(PinNum<=7))   //PORT A
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	88 30       	cpi	r24, 0x08	; 8
     d2c:	a8 f4       	brcc	.+42     	; 0xd58 <DIO_WritePin+0x46>
		{
			Clr_Bit(PORTA,PinNum);
     d2e:	ab e3       	ldi	r26, 0x3B	; 59
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	eb e3       	ldi	r30, 0x3B	; 59
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_WritePin+0x3a>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_WritePin+0x36>
     d50:	80 95       	com	r24
     d52:	84 23       	and	r24, r20
     d54:	8c 93       	st	X, r24
     d56:	cd c0       	rjmp	.+410    	; 0xef2 <DIO_WritePin+0x1e0>
		}

		else if((PinNum>=8)&&(PinNum<=15)) // PORT B
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 30       	cpi	r24, 0x08	; 8
     d5c:	d8 f0       	brcs	.+54     	; 0xd94 <DIO_WritePin+0x82>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	80 31       	cpi	r24, 0x10	; 16
     d62:	c0 f4       	brcc	.+48     	; 0xd94 <DIO_WritePin+0x82>
		{
			Clr_Bit(PORTB,(PinNum-8));
     d64:	a8 e3       	ldi	r26, 0x38	; 56
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e8 e3       	ldi	r30, 0x38	; 56
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9c 01       	movw	r18, r24
     d78:	28 50       	subi	r18, 0x08	; 8
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_WritePin+0x76>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_WritePin+0x72>
     d8c:	80 95       	com	r24
     d8e:	84 23       	and	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	af c0       	rjmp	.+350    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=16)&&(PinNum<=23)) //PORT C
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	80 31       	cpi	r24, 0x10	; 16
     d98:	d8 f0       	brcs	.+54     	; 0xdd0 <DIO_WritePin+0xbe>
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	88 31       	cpi	r24, 0x18	; 24
     d9e:	c0 f4       	brcc	.+48     	; 0xdd0 <DIO_WritePin+0xbe>
		{
			Clr_Bit(PORTC,(PinNum-16));
     da0:	a5 e3       	ldi	r26, 0x35	; 53
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e5 e3       	ldi	r30, 0x35	; 53
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 01       	movw	r18, r24
     db4:	20 51       	subi	r18, 0x10	; 16
     db6:	30 40       	sbci	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_WritePin+0xb2>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_WritePin+0xae>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	91 c0       	rjmp	.+290    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=24)&&(PinNum<=31)) //PORT D
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	88 31       	cpi	r24, 0x18	; 24
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <DIO_WritePin+0xc6>
     dd6:	8d c0       	rjmp	.+282    	; 0xef2 <DIO_WritePin+0x1e0>
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	80 32       	cpi	r24, 0x20	; 32
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <DIO_WritePin+0xce>
     dde:	89 c0       	rjmp	.+274    	; 0xef2 <DIO_WritePin+0x1e0>
		{
			Clr_Bit(PORTD,(PinNum-24));
     de0:	a2 e3       	ldi	r26, 0x32	; 50
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e2 e3       	ldi	r30, 0x32	; 50
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9c 01       	movw	r18, r24
     df4:	28 51       	subi	r18, 0x18	; 24
     df6:	30 40       	sbci	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_WritePin+0xf2>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_WritePin+0xee>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	71 c0       	rjmp	.+226    	; 0xef2 <DIO_WritePin+0x1e0>
		}
	}
	else if(PinValue==HIGH)
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	09 f0       	breq	.+2      	; 0xe18 <DIO_WritePin+0x106>
     e16:	6d c0       	rjmp	.+218    	; 0xef2 <DIO_WritePin+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	a0 f4       	brcc	.+40     	; 0xe46 <DIO_WritePin+0x134>
		{
			Set_Bit(PORTA,PinNum);
     e1e:	ab e3       	ldi	r26, 0x3B	; 59
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	eb e3       	ldi	r30, 0x3B	; 59
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_WritePin+0x12a>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_WritePin+0x126>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	56 c0       	rjmp	.+172    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=8&&PinNum<=15))	//PORT B
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	d0 f0       	brcs	.+52     	; 0xe80 <DIO_WritePin+0x16e>
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	80 31       	cpi	r24, 0x10	; 16
     e50:	b8 f4       	brcc	.+46     	; 0xe80 <DIO_WritePin+0x16e>
		{
			Set_Bit(PORTB,(PinNum-8));
     e52:	a8 e3       	ldi	r26, 0x38	; 56
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e8 e3       	ldi	r30, 0x38	; 56
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9c 01       	movw	r18, r24
     e66:	28 50       	subi	r18, 0x08	; 8
     e68:	30 40       	sbci	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_WritePin+0x164>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_WritePin+0x160>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	39 c0       	rjmp	.+114    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=16&&PinNum<=23))	//PORT C
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 31       	cpi	r24, 0x10	; 16
     e84:	d0 f0       	brcs	.+52     	; 0xeba <DIO_WritePin+0x1a8>
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	88 31       	cpi	r24, 0x18	; 24
     e8a:	b8 f4       	brcc	.+46     	; 0xeba <DIO_WritePin+0x1a8>
		{
			Set_Bit(PORTC,(PinNum-16));
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 01       	movw	r18, r24
     ea0:	20 51       	subi	r18, 0x10	; 16
     ea2:	30 40       	sbci	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_WritePin+0x19e>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_WritePin+0x19a>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	1c c0       	rjmp	.+56     	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=24&&PinNum<=31))	//PORT D
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	88 31       	cpi	r24, 0x18	; 24
     ebe:	c8 f0       	brcs	.+50     	; 0xef2 <DIO_WritePin+0x1e0>
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	80 32       	cpi	r24, 0x20	; 32
     ec4:	b0 f4       	brcc	.+44     	; 0xef2 <DIO_WritePin+0x1e0>
		{
			Set_Bit(PORTD,(PinNum-24));
     ec6:	a2 e3       	ldi	r26, 0x32	; 50
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e2 e3       	ldi	r30, 0x32	; 50
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 01       	movw	r18, r24
     eda:	28 51       	subi	r18, 0x18	; 24
     edc:	30 40       	sbci	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_WritePin+0x1d8>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_WritePin+0x1d4>
     eee:	84 2b       	or	r24, r20
     ef0:	8c 93       	st	X, r24
		}
	}
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <DIO_ReadPin+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 res=0;
     f08:	19 82       	std	Y+1, r1	; 0x01
	if((PinNum>=0)&&(PinNum<=7))	//PORT A
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 30       	cpi	r24, 0x08	; 8
     f0e:	90 f4       	brcc	.+36     	; 0xf34 <DIO_ReadPin+0x38>
	{
		res= Get_Bit(PINA,PinNum);
     f10:	e9 e3       	ldi	r30, 0x39	; 57
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_ReadPin+0x2e>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_ReadPin+0x2a>
     f2e:	84 23       	and	r24, r20
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	50 c0       	rjmp	.+160    	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=8)&&(PinNum<=15))	//PORT B
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	88 30       	cpi	r24, 0x08	; 8
     f38:	c0 f0       	brcs	.+48     	; 0xf6a <DIO_ReadPin+0x6e>
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	80 31       	cpi	r24, 0x10	; 16
     f3e:	a8 f4       	brcc	.+42     	; 0xf6a <DIO_ReadPin+0x6e>
	{
		res= Get_Bit(PINB,(PinNum-8));
     f40:	e6 e3       	ldi	r30, 0x36	; 54
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9c 01       	movw	r18, r24
     f50:	28 50       	subi	r18, 0x08	; 8
     f52:	30 40       	sbci	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_ReadPin+0x64>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_ReadPin+0x60>
     f64:	84 23       	and	r24, r20
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	35 c0       	rjmp	.+106    	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=16)&&(PinNum<=23))	//PORT C
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	80 31       	cpi	r24, 0x10	; 16
     f6e:	c0 f0       	brcs	.+48     	; 0xfa0 <DIO_ReadPin+0xa4>
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	88 31       	cpi	r24, 0x18	; 24
     f74:	a8 f4       	brcc	.+42     	; 0xfa0 <DIO_ReadPin+0xa4>
	{
		res= Get_Bit(PINC,(PinNum-16));
     f76:	e3 e3       	ldi	r30, 0x33	; 51
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9c 01       	movw	r18, r24
     f86:	20 51       	subi	r18, 0x10	; 16
     f88:	30 40       	sbci	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_ReadPin+0x9a>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_ReadPin+0x96>
     f9a:	84 23       	and	r24, r20
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	1a c0       	rjmp	.+52     	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=24)&&(PinNum<=31))	//PORT D
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	88 31       	cpi	r24, 0x18	; 24
     fa4:	b8 f0       	brcs	.+46     	; 0xfd4 <DIO_ReadPin+0xd8>
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	80 32       	cpi	r24, 0x20	; 32
     faa:	a0 f4       	brcc	.+40     	; 0xfd4 <DIO_ReadPin+0xd8>
	{
		res= Get_Bit(PIND,(PinNum-24));
     fac:	e0 e3       	ldi	r30, 0x30	; 48
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9c 01       	movw	r18, r24
     fbc:	28 51       	subi	r18, 0x18	; 24
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_ReadPin+0xd0>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_ReadPin+0xcc>
     fd0:	84 23       	and	r24, r20
     fd2:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_SetPinDirection+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==OUTPUT)						//set pin direction high
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <DIO_SetPinDirection+0x16>
     ff4:	70 c0       	rjmp	.+224    	; 0x10d6 <DIO_SetPinDirection+0xf6>
	{
		if((PinNum>=0)&&(PinNum<=7))	//PORT A
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	88 30       	cpi	r24, 0x08	; 8
     ffa:	a0 f4       	brcc	.+40     	; 0x1024 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     ffc:	aa e3       	ldi	r26, 0x3A	; 58
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ea e3       	ldi	r30, 0x3A	; 58
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_SetPinDirection+0x3a>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_SetPinDirection+0x36>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	ce c0       	rjmp	.+412    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	d0 f0       	brcs	.+52     	; 0x105e <DIO_SetPinDirection+0x7e>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	80 31       	cpi	r24, 0x10	; 16
    102e:	b8 f4       	brcc	.+46     	; 0x105e <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9c 01       	movw	r18, r24
    1044:	28 50       	subi	r18, 0x08	; 8
    1046:	30 40       	sbci	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_SetPinDirection+0x74>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_SetPinDirection+0x70>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	b1 c0       	rjmp	.+354    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 31       	cpi	r24, 0x10	; 16
    1062:	d0 f0       	brcs	.+52     	; 0x1098 <DIO_SetPinDirection+0xb8>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 31       	cpi	r24, 0x18	; 24
    1068:	b8 f4       	brcc	.+46     	; 0x1098 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
    106a:	a4 e3       	ldi	r26, 0x34	; 52
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 01       	movw	r18, r24
    107e:	20 51       	subi	r18, 0x10	; 16
    1080:	30 40       	sbci	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_SetPinDirection+0xae>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_SetPinDirection+0xaa>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	94 c0       	rjmp	.+296    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=24)&&(PinNum<=31))		//PORT D
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	88 31       	cpi	r24, 0x18	; 24
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <DIO_SetPinDirection+0xc0>
    109e:	90 c0       	rjmp	.+288    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	80 32       	cpi	r24, 0x20	; 32
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <DIO_SetPinDirection+0xc8>
    10a6:	8c c0       	rjmp	.+280    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRD,(PinNum-24));
    10a8:	a1 e3       	ldi	r26, 0x31	; 49
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e1 e3       	ldi	r30, 0x31	; 49
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 01       	movw	r18, r24
    10bc:	28 51       	subi	r18, 0x18	; 24
    10be:	30 40       	sbci	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_SetPinDirection+0xec>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_SetPinDirection+0xe8>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	75 c0       	rjmp	.+234    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==INPUT)
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 23       	and	r24, r24
    10da:	09 f0       	breq	.+2      	; 0x10de <DIO_SetPinDirection+0xfe>
    10dc:	71 c0       	rjmp	.+226    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	a8 f4       	brcc	.+42     	; 0x110e <DIO_SetPinDirection+0x12e>
		{
			Clr_Bit(DDRA,PinNum);
    10e4:	aa e3       	ldi	r26, 0x3A	; 58
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ea e3       	ldi	r30, 0x3A	; 58
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_SetPinDirection+0x122>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_SetPinDirection+0x11e>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	59 c0       	rjmp	.+178    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 30       	cpi	r24, 0x08	; 8
    1112:	d8 f0       	brcs	.+54     	; 0x114a <DIO_SetPinDirection+0x16a>
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	80 31       	cpi	r24, 0x10	; 16
    1118:	c0 f4       	brcc	.+48     	; 0x114a <DIO_SetPinDirection+0x16a>
		{
			Clr_Bit(DDRB,(PinNum-8));
    111a:	a7 e3       	ldi	r26, 0x37	; 55
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e3       	ldi	r30, 0x37	; 55
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9c 01       	movw	r18, r24
    112e:	28 50       	subi	r18, 0x08	; 8
    1130:	30 40       	sbci	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_SetPinDirection+0x15e>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_SetPinDirection+0x15a>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	3b c0       	rjmp	.+118    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	80 31       	cpi	r24, 0x10	; 16
    114e:	d8 f0       	brcs	.+54     	; 0x1186 <DIO_SetPinDirection+0x1a6>
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	88 31       	cpi	r24, 0x18	; 24
    1154:	c0 f4       	brcc	.+48     	; 0x1186 <DIO_SetPinDirection+0x1a6>
		{
			Clr_Bit(DDRC,(PinNum-16));
    1156:	a4 e3       	ldi	r26, 0x34	; 52
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e4 e3       	ldi	r30, 0x34	; 52
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9c 01       	movw	r18, r24
    116a:	20 51       	subi	r18, 0x10	; 16
    116c:	30 40       	sbci	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_SetPinDirection+0x19a>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_SetPinDirection+0x196>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	1d c0       	rjmp	.+58     	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=24)&&(PinNum<=31)) 	//PORT D
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	88 31       	cpi	r24, 0x18	; 24
    118a:	d0 f0       	brcs	.+52     	; 0x11c0 <DIO_SetPinDirection+0x1e0>
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	80 32       	cpi	r24, 0x20	; 32
    1190:	b8 f4       	brcc	.+46     	; 0x11c0 <DIO_SetPinDirection+0x1e0>

		{
			Clr_Bit(DDRD,(PinNum-24));
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 01       	movw	r18, r24
    11a6:	28 51       	subi	r18, 0x18	; 24
    11a8:	30 40       	sbci	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_SetPinDirection+0x1d6>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_SetPinDirection+0x1d2>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
		}
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <se7en_show>:

#include "Se7en_segments.h"


void se7en_show(uint8 num)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	0f 92       	push	r0
    11d0:	cd b7       	in	r28, 0x3d	; 61
    11d2:	de b7       	in	r29, 0x3e	; 62
    11d4:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(se7seg_A,(num&(0x01)));
    11d6:	89 81       	ldd	r24, Y+1	; 0x01
    11d8:	88 2f       	mov	r24, r24
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	9c 01       	movw	r18, r24
    11de:	21 70       	andi	r18, 0x01	; 1
    11e0:	30 70       	andi	r19, 0x00	; 0
    11e2:	88 e0       	ldi	r24, 0x08	; 8
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	b9 01       	movw	r22, r18
    11e8:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(se7seg_B,(num&(0x02))>>1);
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	88 2f       	mov	r24, r24
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	82 70       	andi	r24, 0x02	; 2
    11f4:	90 70       	andi	r25, 0x00	; 0
    11f6:	9c 01       	movw	r18, r24
    11f8:	35 95       	asr	r19
    11fa:	27 95       	ror	r18
    11fc:	89 e0       	ldi	r24, 0x09	; 9
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	b9 01       	movw	r22, r18
    1202:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(se7seg_C,(num&(0x04))>>2);
    1206:	89 81       	ldd	r24, Y+1	; 0x01
    1208:	88 2f       	mov	r24, r24
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	84 70       	andi	r24, 0x04	; 4
    120e:	90 70       	andi	r25, 0x00	; 0
    1210:	9c 01       	movw	r18, r24
    1212:	35 95       	asr	r19
    1214:	27 95       	ror	r18
    1216:	35 95       	asr	r19
    1218:	27 95       	ror	r18
    121a:	8a e0       	ldi	r24, 0x0A	; 10
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	b9 01       	movw	r22, r18
    1220:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(se7seg_D,(num&(0x08))>>3);
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	88 2f       	mov	r24, r24
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	88 70       	andi	r24, 0x08	; 8
    122c:	90 70       	andi	r25, 0x00	; 0
    122e:	9c 01       	movw	r18, r24
    1230:	35 95       	asr	r19
    1232:	27 95       	ror	r18
    1234:	35 95       	asr	r19
    1236:	27 95       	ror	r18
    1238:	35 95       	asr	r19
    123a:	27 95       	ror	r18
    123c:	8b e0       	ldi	r24, 0x0B	; 11
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	b9 01       	movw	r22, r18
    1242:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    1246:	0f 90       	pop	r0
    1248:	cf 91       	pop	r28
    124a:	df 91       	pop	r29
    124c:	08 95       	ret

0000124e <se7en_enable>:

void se7en_enable(uint8 num)
{
    124e:	df 93       	push	r29
    1250:	cf 93       	push	r28
    1252:	0f 92       	push	r0
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	89 83       	std	Y+1, r24	; 0x01
	if(num==1)
    125a:	89 81       	ldd	r24, Y+1	; 0x01
    125c:	81 30       	cpi	r24, 0x01	; 1
    125e:	39 f4       	brne	.+14     	; 0x126e <se7en_enable+0x20>
	DIO_WritePin(se7seg_EN1,HIGH);
    1260:	8a e1       	ldi	r24, 0x1A	; 26
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	61 e0       	ldi	r22, 0x01	; 1
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <se7en_enable+0x32>
	else if(num==2)
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	82 30       	cpi	r24, 0x02	; 2
    1272:	31 f4       	brne	.+12     	; 0x1280 <se7en_enable+0x32>
	DIO_WritePin(se7seg_EN2,HIGH);
    1274:	8b e1       	ldi	r24, 0x1B	; 27
    1276:	90 e0       	ldi	r25, 0x00	; 0
    1278:	61 e0       	ldi	r22, 0x01	; 1
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    1280:	0f 90       	pop	r0
    1282:	cf 91       	pop	r28
    1284:	df 91       	pop	r29
    1286:	08 95       	ret

00001288 <se7en_init>:

void se7en_init(void)
{
    1288:	df 93       	push	r29
    128a:	cf 93       	push	r28
    128c:	cd b7       	in	r28, 0x3d	; 61
    128e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(se7seg_A,OUTPUT);
    1290:	88 e0       	ldi	r24, 0x08	; 8
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	61 e0       	ldi	r22, 0x01	; 1
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_B,OUTPUT);
    129c:	89 e0       	ldi	r24, 0x09	; 9
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_C,OUTPUT);
    12a8:	8a e0       	ldi	r24, 0x0A	; 10
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	61 e0       	ldi	r22, 0x01	; 1
    12ae:	70 e0       	ldi	r23, 0x00	; 0
    12b0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_D,OUTPUT);
    12b4:	8b e0       	ldi	r24, 0x0B	; 11
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	61 e0       	ldi	r22, 0x01	; 1
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_EN1,OUTPUT);
    12c0:	8a e1       	ldi	r24, 0x1A	; 26
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	61 e0       	ldi	r22, 0x01	; 1
    12c6:	70 e0       	ldi	r23, 0x00	; 0
    12c8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_EN2,OUTPUT);
    12cc:	8b e1       	ldi	r24, 0x1B	; 27
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	70 e0       	ldi	r23, 0x00	; 0
    12d4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>

	DIO_WritePin(se7seg_A,LOW);
    12d8:	88 e0       	ldi	r24, 0x08	; 8
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
    12e4:	88 e0       	ldi	r24, 0x08	; 8
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
    12f0:	88 e0       	ldi	r24, 0x08	; 8
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	60 e0       	ldi	r22, 0x00	; 0
    12f6:	70 e0       	ldi	r23, 0x00	; 0
    12f8:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
    12fc:	88 e0       	ldi	r24, 0x08	; 8
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	70 e0       	ldi	r23, 0x00	; 0
    1304:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    1308:	cf 91       	pop	r28
    130a:	df 91       	pop	r29
    130c:	08 95       	ret

0000130e <timer0_init>:
#include "Standard_Types.h"



void timer0_init(void)  // timer initial
{
    130e:	df 93       	push	r29
    1310:	cf 93       	push	r28
    1312:	cd b7       	in	r28, 0x3d	; 61
    1314:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |= (1 << CS01)|(1 << CS00); //prescaler=64
    1316:	a3 e5       	ldi	r26, 0x53	; 83
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	e3 e5       	ldi	r30, 0x53	; 83
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	83 60       	ori	r24, 0x03	; 3
    1322:	8c 93       	st	X, r24
    TCNT0 = 0;
    1324:	e2 e5       	ldi	r30, 0x52	; 82
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	10 82       	st	Z, r1
}
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	08 95       	ret

00001330 <timer_delay>:


void timer_delay(uint32 n)
{
    1330:	df 93       	push	r29
    1332:	cf 93       	push	r28
    1334:	cd b7       	in	r28, 0x3d	; 61
    1336:	de b7       	in	r29, 0x3e	; 62
    1338:	28 97       	sbiw	r28, 0x08	; 8
    133a:	0f b6       	in	r0, 0x3f	; 63
    133c:	f8 94       	cli
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	0f be       	out	0x3f, r0	; 63
    1342:	cd bf       	out	0x3d, r28	; 61
    1344:	6d 83       	std	Y+5, r22	; 0x05
    1346:	7e 83       	std	Y+6, r23	; 0x06
    1348:	8f 83       	std	Y+7, r24	; 0x07
    134a:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	OCR0=249;
    134c:	ec e5       	ldi	r30, 0x5C	; 92
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	89 ef       	ldi	r24, 0xF9	; 249
    1352:	80 83       	st	Z, r24
	TCNT0=0;
    1354:	e2 e5       	ldi	r30, 0x52	; 82
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	10 82       	st	Z, r1
	for(i=0;i<n/2;i++)
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	1a 82       	std	Y+2, r1	; 0x02
    135e:	1b 82       	std	Y+3, r1	; 0x03
    1360:	1c 82       	std	Y+4, r1	; 0x04
    1362:	1b c0       	rjmp	.+54     	; 0x139a <timer_delay+0x6a>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
    1364:	e8 e5       	ldi	r30, 0x58	; 88
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	88 2f       	mov	r24, r24
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	81 70       	andi	r24, 0x01	; 1
    1370:	90 70       	andi	r25, 0x00	; 0
    1372:	00 97       	sbiw	r24, 0x00	; 0
    1374:	b9 f3       	breq	.-18     	; 0x1364 <timer_delay+0x34>
		Set_Bit(TIFR,OCF0);
    1376:	a8 e5       	ldi	r26, 0x58	; 88
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e5       	ldi	r30, 0x58	; 88
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	82 60       	ori	r24, 0x02	; 2
    1382:	8c 93       	st	X, r24
void timer_delay(uint32 n)
{
	uint32 i;
	OCR0=249;
	TCNT0=0;
	for(i=0;i<n/2;i++)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	ab 81       	ldd	r26, Y+3	; 0x03
    138a:	bc 81       	ldd	r27, Y+4	; 0x04
    138c:	01 96       	adiw	r24, 0x01	; 1
    138e:	a1 1d       	adc	r26, r1
    1390:	b1 1d       	adc	r27, r1
    1392:	89 83       	std	Y+1, r24	; 0x01
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	ab 83       	std	Y+3, r26	; 0x03
    1398:	bc 83       	std	Y+4, r27	; 0x04
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	9e 81       	ldd	r25, Y+6	; 0x06
    139e:	af 81       	ldd	r26, Y+7	; 0x07
    13a0:	b8 85       	ldd	r27, Y+8	; 0x08
    13a2:	9c 01       	movw	r18, r24
    13a4:	ad 01       	movw	r20, r26
    13a6:	56 95       	lsr	r21
    13a8:	47 95       	ror	r20
    13aa:	37 95       	ror	r19
    13ac:	27 95       	ror	r18
    13ae:	89 81       	ldd	r24, Y+1	; 0x01
    13b0:	9a 81       	ldd	r25, Y+2	; 0x02
    13b2:	ab 81       	ldd	r26, Y+3	; 0x03
    13b4:	bc 81       	ldd	r27, Y+4	; 0x04
    13b6:	82 17       	cp	r24, r18
    13b8:	93 07       	cpc	r25, r19
    13ba:	a4 07       	cpc	r26, r20
    13bc:	b5 07       	cpc	r27, r21
    13be:	90 f2       	brcs	.-92     	; 0x1364 <timer_delay+0x34>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
		Set_Bit(TIFR,OCF0);
	}

}
    13c0:	28 96       	adiw	r28, 0x08	; 8
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	f8 94       	cli
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	0f be       	out	0x3f, r0	; 63
    13ca:	cd bf       	out	0x3d, r28	; 61
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <UART_Init>:
#include "Gpio.h"
#include "UART.h"

/*initialize the UART module*/
Status_U UART_Init(UART_Cfg_S UART_cfg)
{
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	60 97       	sbiw	r28, 0x10	; 16
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    13ea:	0b 83       	std	Y+3, r16	; 0x03
    13ec:	1c 83       	std	Y+4, r17	; 0x04
    13ee:	2d 83       	std	Y+5, r18	; 0x05
    13f0:	3e 83       	std	Y+6, r19	; 0x06
    13f2:	4f 83       	std	Y+7, r20	; 0x07
    13f4:	58 87       	std	Y+8, r21	; 0x08
    13f6:	69 87       	std	Y+9, r22	; 0x09
    13f8:	7a 87       	std	Y+10, r23	; 0x0a
    13fa:	8b 87       	std	Y+11, r24	; 0x0b
	uint16 UBBRRval=0;
    13fc:	1a 82       	std	Y+2, r1	; 0x02
    13fe:	19 82       	std	Y+1, r1	; 0x01
	/*Set Baud Rate*/

	if(UART_cfg.Speed==UART_DOUBLE_SPEED)
    1400:	8d 81       	ldd	r24, Y+5	; 0x05
    1402:	81 30       	cpi	r24, 0x01	; 1
    1404:	c9 f4       	brne	.+50     	; 0x1438 <UART_Init+0x66>
	{
		UBBRRval=(uint16)((UART_FOSC/(8*UART_cfg.BaudRate))-1u);
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	88 0f       	add	r24, r24
    140c:	99 1f       	adc	r25, r25
    140e:	88 0f       	add	r24, r24
    1410:	99 1f       	adc	r25, r25
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	9c 01       	movw	r18, r24
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	50 e0       	ldi	r21, 0x00	; 0
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	92 e1       	ldi	r25, 0x12	; 18
    1420:	aa e7       	ldi	r26, 0x7A	; 122
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	bc 01       	movw	r22, r24
    1426:	cd 01       	movw	r24, r26
    1428:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__divmodsi4>
    142c:	da 01       	movw	r26, r20
    142e:	c9 01       	movw	r24, r18
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	9a 83       	std	Y+2, r25	; 0x02
    1434:	89 83       	std	Y+1, r24	; 0x01
    1436:	1b c0       	rjmp	.+54     	; 0x146e <UART_Init+0x9c>
	}
	else if(UART_cfg.Speed==UART_NORMAL_SPEED)
    1438:	8d 81       	ldd	r24, Y+5	; 0x05
    143a:	88 23       	and	r24, r24
    143c:	c1 f4       	brne	.+48     	; 0x146e <UART_Init+0x9c>
	{
		UBBRRval=(uint16)((UART_FOSC/(16*UART_cfg.BaudRate))-1u) ;
    143e:	8b 81       	ldd	r24, Y+3	; 0x03
    1440:	9c 81       	ldd	r25, Y+4	; 0x04
    1442:	82 95       	swap	r24
    1444:	92 95       	swap	r25
    1446:	90 7f       	andi	r25, 0xF0	; 240
    1448:	98 27       	eor	r25, r24
    144a:	80 7f       	andi	r24, 0xF0	; 240
    144c:	98 27       	eor	r25, r24
    144e:	9c 01       	movw	r18, r24
    1450:	40 e0       	ldi	r20, 0x00	; 0
    1452:	50 e0       	ldi	r21, 0x00	; 0
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	92 e1       	ldi	r25, 0x12	; 18
    1458:	aa e7       	ldi	r26, 0x7A	; 122
    145a:	b0 e0       	ldi	r27, 0x00	; 0
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <__divmodsi4>
    1464:	da 01       	movw	r26, r20
    1466:	c9 01       	movw	r24, r18
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	9a 83       	std	Y+2, r25	; 0x02
    146c:	89 83       	std	Y+1, r24	; 0x01
	}
	UBRRH=(uint8)(UBBRRval>>8u);
    146e:	e0 e4       	ldi	r30, 0x40	; 64
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	9a 81       	ldd	r25, Y+2	; 0x02
    1476:	89 2f       	mov	r24, r25
    1478:	99 27       	eor	r25, r25
    147a:	80 83       	st	Z, r24
	UBRRL=(uint8)(UBBRRval);
    147c:	e9 e2       	ldi	r30, 0x29	; 41
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	80 83       	st	Z, r24


/*****************************************/
	/*setting the speed of the UART*/
	if(UART_cfg.Speed==UART_DOUBLE_SPEED)
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	81 30       	cpi	r24, 0x01	; 1
    1488:	41 f4       	brne	.+16     	; 0x149a <UART_Init+0xc8>
	{
		UCSRA |=1<<U2X;
    148a:	ab e2       	ldi	r26, 0x2B	; 43
    148c:	b0 e0       	ldi	r27, 0x00	; 0
    148e:	eb e2       	ldi	r30, 0x2B	; 43
    1490:	f0 e0       	ldi	r31, 0x00	; 0
    1492:	80 81       	ld	r24, Z
    1494:	82 60       	ori	r24, 0x02	; 2
    1496:	8c 93       	st	X, r24
    1498:	0a c0       	rjmp	.+20     	; 0x14ae <UART_Init+0xdc>
	}
	else if(UART_cfg.Speed==UART_NORMAL_SPEED)
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	88 23       	and	r24, r24
    149e:	39 f4       	brne	.+14     	; 0x14ae <UART_Init+0xdc>
	{
		UCSRA &= ~(1<<U2X);
    14a0:	ab e2       	ldi	r26, 0x2B	; 43
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	eb e2       	ldi	r30, 0x2B	; 43
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8d 7f       	andi	r24, 0xFD	; 253
    14ac:	8c 93       	st	X, r24
	}
	/*Setting data frame*/
	switch(UART_cfg.DataSize)
    14ae:	89 85       	ldd	r24, Y+9	; 0x09
    14b0:	28 2f       	mov	r18, r24
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	38 8b       	std	Y+16, r19	; 0x10
    14b6:	2f 87       	std	Y+15, r18	; 0x0f
    14b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ba:	98 89       	ldd	r25, Y+16	; 0x10
    14bc:	84 30       	cpi	r24, 0x04	; 4
    14be:	91 05       	cpc	r25, r1
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <UART_Init+0xf2>
    14c2:	56 c0       	rjmp	.+172    	; 0x1570 <UART_Init+0x19e>
    14c4:	2f 85       	ldd	r18, Y+15	; 0x0f
    14c6:	38 89       	ldd	r19, Y+16	; 0x10
    14c8:	25 30       	cpi	r18, 0x05	; 5
    14ca:	31 05       	cpc	r19, r1
    14cc:	54 f4       	brge	.+20     	; 0x14e2 <UART_Init+0x110>
    14ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    14d0:	98 89       	ldd	r25, Y+16	; 0x10
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	99 f0       	breq	.+38     	; 0x14fc <UART_Init+0x12a>
    14d6:	2f 85       	ldd	r18, Y+15	; 0x0f
    14d8:	38 89       	ldd	r19, Y+16	; 0x10
    14da:	22 30       	cpi	r18, 0x02	; 2
    14dc:	31 05       	cpc	r19, r1
    14de:	59 f1       	breq	.+86     	; 0x1536 <UART_Init+0x164>
    14e0:	9e c0       	rjmp	.+316    	; 0x161e <UART_Init+0x24c>
    14e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14e4:	98 89       	ldd	r25, Y+16	; 0x10
    14e6:	86 30       	cpi	r24, 0x06	; 6
    14e8:	91 05       	cpc	r25, r1
    14ea:	09 f4       	brne	.+2      	; 0x14ee <UART_Init+0x11c>
    14ec:	5e c0       	rjmp	.+188    	; 0x15aa <UART_Init+0x1d8>
    14ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    14f0:	38 89       	ldd	r19, Y+16	; 0x10
    14f2:	2e 30       	cpi	r18, 0x0E	; 14
    14f4:	31 05       	cpc	r19, r1
    14f6:	09 f4       	brne	.+2      	; 0x14fa <UART_Init+0x128>
    14f8:	75 c0       	rjmp	.+234    	; 0x15e4 <UART_Init+0x212>
    14fa:	91 c0       	rjmp	.+290    	; 0x161e <UART_Init+0x24c>
	{
	case UART_5_Bit_CHAR:
		UCSRC|=1<<URSEL;
    14fc:	a0 e4       	ldi	r26, 0x40	; 64
    14fe:	b0 e0       	ldi	r27, 0x00	; 0
    1500:	e0 e4       	ldi	r30, 0x40	; 64
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	80 81       	ld	r24, Z
    1506:	80 68       	ori	r24, 0x80	; 128
    1508:	8c 93       	st	X, r24
		UCSRC &= ~(1<<UCSZ0);
    150a:	a0 e4       	ldi	r26, 0x40	; 64
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	e0 e4       	ldi	r30, 0x40	; 64
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	8d 7f       	andi	r24, 0xFD	; 253
    1516:	8c 93       	st	X, r24
		UCSRC &= ~(1<<UCSZ1);
    1518:	a0 e4       	ldi	r26, 0x40	; 64
    151a:	b0 e0       	ldi	r27, 0x00	; 0
    151c:	e0 e4       	ldi	r30, 0x40	; 64
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	8b 7f       	andi	r24, 0xFB	; 251
    1524:	8c 93       	st	X, r24
		UCSRB &= ~(1<<UCSZ2);
    1526:	aa e2       	ldi	r26, 0x2A	; 42
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e2       	ldi	r30, 0x2A	; 42
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8b 7f       	andi	r24, 0xFB	; 251
    1532:	8c 93       	st	X, r24
    1534:	76 c0       	rjmp	.+236    	; 0x1622 <UART_Init+0x250>
		break;
	case UART_6_Bit_CHAR:
		UCSRC|=1<<URSEL;
    1536:	a0 e4       	ldi	r26, 0x40	; 64
    1538:	b0 e0       	ldi	r27, 0x00	; 0
    153a:	e0 e4       	ldi	r30, 0x40	; 64
    153c:	f0 e0       	ldi	r31, 0x00	; 0
    153e:	80 81       	ld	r24, Z
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	8c 93       	st	X, r24
		UCSRC|=1<<UCSZ0;
    1544:	a0 e4       	ldi	r26, 0x40	; 64
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	e0 e4       	ldi	r30, 0x40	; 64
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	82 60       	ori	r24, 0x02	; 2
    1550:	8c 93       	st	X, r24
		UCSRC &= ~(1<<UCSZ1);
    1552:	a0 e4       	ldi	r26, 0x40	; 64
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	e0 e4       	ldi	r30, 0x40	; 64
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	8b 7f       	andi	r24, 0xFB	; 251
    155e:	8c 93       	st	X, r24
		UCSRB &= ~(1<<UCSZ2);
    1560:	aa e2       	ldi	r26, 0x2A	; 42
    1562:	b0 e0       	ldi	r27, 0x00	; 0
    1564:	ea e2       	ldi	r30, 0x2A	; 42
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 81       	ld	r24, Z
    156a:	8b 7f       	andi	r24, 0xFB	; 251
    156c:	8c 93       	st	X, r24
    156e:	59 c0       	rjmp	.+178    	; 0x1622 <UART_Init+0x250>
		break;
	case UART_7_Bit_CHAR:
		UCSRC|=1<<URSEL;
    1570:	a0 e4       	ldi	r26, 0x40	; 64
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e0 e4       	ldi	r30, 0x40	; 64
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	80 81       	ld	r24, Z
    157a:	80 68       	ori	r24, 0x80	; 128
    157c:	8c 93       	st	X, r24
		UCSRC|=1<<UCSZ1;
    157e:	a0 e4       	ldi	r26, 0x40	; 64
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e0 e4       	ldi	r30, 0x40	; 64
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	84 60       	ori	r24, 0x04	; 4
    158a:	8c 93       	st	X, r24
		UCSRC &= ~(1<<UCSZ0);
    158c:	a0 e4       	ldi	r26, 0x40	; 64
    158e:	b0 e0       	ldi	r27, 0x00	; 0
    1590:	e0 e4       	ldi	r30, 0x40	; 64
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	80 81       	ld	r24, Z
    1596:	8d 7f       	andi	r24, 0xFD	; 253
    1598:	8c 93       	st	X, r24
		UCSRB &= ~(1<<UCSZ2);
    159a:	aa e2       	ldi	r26, 0x2A	; 42
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	ea e2       	ldi	r30, 0x2A	; 42
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8b 7f       	andi	r24, 0xFB	; 251
    15a6:	8c 93       	st	X, r24
    15a8:	3c c0       	rjmp	.+120    	; 0x1622 <UART_Init+0x250>
		break;
	case UART_8_Bit_CHAR:
		UCSRC|=1<<URSEL;
    15aa:	a0 e4       	ldi	r26, 0x40	; 64
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e0 e4       	ldi	r30, 0x40	; 64
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	80 81       	ld	r24, Z
    15b4:	80 68       	ori	r24, 0x80	; 128
    15b6:	8c 93       	st	X, r24
		UCSRC|=1<<UCSZ0;
    15b8:	a0 e4       	ldi	r26, 0x40	; 64
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e0 e4       	ldi	r30, 0x40	; 64
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	82 60       	ori	r24, 0x02	; 2
    15c4:	8c 93       	st	X, r24
		UCSRC|=1<<UCSZ1;
    15c6:	a0 e4       	ldi	r26, 0x40	; 64
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e0 e4       	ldi	r30, 0x40	; 64
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	84 60       	ori	r24, 0x04	; 4
    15d2:	8c 93       	st	X, r24
		UCSRB &= ~(1<<UCSZ2);
    15d4:	aa e2       	ldi	r26, 0x2A	; 42
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	ea e2       	ldi	r30, 0x2A	; 42
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	8b 7f       	andi	r24, 0xFB	; 251
    15e0:	8c 93       	st	X, r24
    15e2:	1f c0       	rjmp	.+62     	; 0x1622 <UART_Init+0x250>
			break;
	case UART_9_Bit_CHAR:
		UCSRC|=1<<URSEL;
    15e4:	a0 e4       	ldi	r26, 0x40	; 64
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e0 e4       	ldi	r30, 0x40	; 64
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	80 68       	ori	r24, 0x80	; 128
    15f0:	8c 93       	st	X, r24
		UCSRC|=1<<UCSZ0;
    15f2:	a0 e4       	ldi	r26, 0x40	; 64
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e0 e4       	ldi	r30, 0x40	; 64
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	82 60       	ori	r24, 0x02	; 2
    15fe:	8c 93       	st	X, r24
		UCSRC|=1<<UCSZ1;
    1600:	a0 e4       	ldi	r26, 0x40	; 64
    1602:	b0 e0       	ldi	r27, 0x00	; 0
    1604:	e0 e4       	ldi	r30, 0x40	; 64
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	80 81       	ld	r24, Z
    160a:	84 60       	ori	r24, 0x04	; 4
    160c:	8c 93       	st	X, r24
		UCSRB|=1<<UCSZ2;
    160e:	aa e2       	ldi	r26, 0x2A	; 42
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	ea e2       	ldi	r30, 0x2A	; 42
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	84 60       	ori	r24, 0x04	; 4
    161a:	8c 93       	st	X, r24
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <UART_Init+0x250>
		break;
	default:
		return NOT_OK;
    161e:	1e 86       	std	Y+14, r1	; 0x0e
    1620:	9d c0       	rjmp	.+314    	; 0x175c <UART_Init+0x38a>
	}

	/*choose Parity mode*/
	switch(UART_cfg.ParityMode)
    1622:	8a 85       	ldd	r24, Y+10	; 0x0a
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	3d 87       	std	Y+13, r19	; 0x0d
    162a:	2c 87       	std	Y+12, r18	; 0x0c
    162c:	8c 85       	ldd	r24, Y+12	; 0x0c
    162e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1630:	81 30       	cpi	r24, 0x01	; 1
    1632:	91 05       	cpc	r25, r1
    1634:	c1 f0       	breq	.+48     	; 0x1666 <UART_Init+0x294>
    1636:	2c 85       	ldd	r18, Y+12	; 0x0c
    1638:	3d 85       	ldd	r19, Y+13	; 0x0d
    163a:	22 30       	cpi	r18, 0x02	; 2
    163c:	31 05       	cpc	r19, r1
    163e:	11 f1       	breq	.+68     	; 0x1684 <UART_Init+0x2b2>
    1640:	8c 85       	ldd	r24, Y+12	; 0x0c
    1642:	9d 85       	ldd	r25, Y+13	; 0x0d
    1644:	00 97       	sbiw	r24, 0x00	; 0
    1646:	69 f5       	brne	.+90     	; 0x16a2 <UART_Init+0x2d0>
	{
		case Parity_Dis:
			UCSRC &= ~(1<<UPM0);
    1648:	a0 e4       	ldi	r26, 0x40	; 64
    164a:	b0 e0       	ldi	r27, 0x00	; 0
    164c:	e0 e4       	ldi	r30, 0x40	; 64
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	8f 7e       	andi	r24, 0xEF	; 239
    1654:	8c 93       	st	X, r24
			UCSRC &= ~(1<<UPM1);
    1656:	a0 e4       	ldi	r26, 0x40	; 64
    1658:	b0 e0       	ldi	r27, 0x00	; 0
    165a:	e0 e4       	ldi	r30, 0x40	; 64
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	8f 7d       	andi	r24, 0xDF	; 223
    1662:	8c 93       	st	X, r24
    1664:	20 c0       	rjmp	.+64     	; 0x16a6 <UART_Init+0x2d4>
			break;
		case Parity_odd:
			UCSRC |= 1<<UPM0;
    1666:	a0 e4       	ldi	r26, 0x40	; 64
    1668:	b0 e0       	ldi	r27, 0x00	; 0
    166a:	e0 e4       	ldi	r30, 0x40	; 64
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
    1670:	80 61       	ori	r24, 0x10	; 16
    1672:	8c 93       	st	X, r24
			UCSRC |= 1<<UPM1;
    1674:	a0 e4       	ldi	r26, 0x40	; 64
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e0 e4       	ldi	r30, 0x40	; 64
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	80 81       	ld	r24, Z
    167e:	80 62       	ori	r24, 0x20	; 32
    1680:	8c 93       	st	X, r24
    1682:	11 c0       	rjmp	.+34     	; 0x16a6 <UART_Init+0x2d4>
			break;
		case Parity_Even:
			UCSRC &=~( 1<<UPM0);
    1684:	a0 e4       	ldi	r26, 0x40	; 64
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e0 e4       	ldi	r30, 0x40	; 64
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8f 7e       	andi	r24, 0xEF	; 239
    1690:	8c 93       	st	X, r24
			UCSRC |=1<<UPM1;
    1692:	a0 e4       	ldi	r26, 0x40	; 64
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e0 e4       	ldi	r30, 0x40	; 64
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	80 62       	ori	r24, 0x20	; 32
    169e:	8c 93       	st	X, r24
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <UART_Init+0x2d4>
			break;
		default:
			return NOT_OK;
    16a2:	1e 86       	std	Y+14, r1	; 0x0e
    16a4:	5b c0       	rjmp	.+182    	; 0x175c <UART_Init+0x38a>
	}

	/*choose number of stop bits*/
	if(UART_cfg.StopBitsNum==UART_1_STOPBIT)
    16a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	41 f4       	brne	.+16     	; 0x16bc <UART_Init+0x2ea>
	{
		UCSRC &=~( 1<<USBS);
    16ac:	a0 e4       	ldi	r26, 0x40	; 64
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e0 e4       	ldi	r30, 0x40	; 64
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	87 7f       	andi	r24, 0xF7	; 247
    16b8:	8c 93       	st	X, r24
    16ba:	0d c0       	rjmp	.+26     	; 0x16d6 <UART_Init+0x304>
	}
	else if(UART_cfg.StopBitsNum==UART_2_STOPBIT)
    16bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    16be:	82 30       	cpi	r24, 0x02	; 2
    16c0:	41 f4       	brne	.+16     	; 0x16d2 <UART_Init+0x300>
	{
		UCSRC |=(1<<USBS);
    16c2:	a0 e4       	ldi	r26, 0x40	; 64
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e0 e4       	ldi	r30, 0x40	; 64
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	80 81       	ld	r24, Z
    16cc:	88 60       	ori	r24, 0x08	; 8
    16ce:	8c 93       	st	X, r24
    16d0:	02 c0       	rjmp	.+4      	; 0x16d6 <UART_Init+0x304>
	}
	else
	{
		return NOT_OK;
    16d2:	1e 86       	std	Y+14, r1	; 0x0e
    16d4:	43 c0       	rjmp	.+134    	; 0x175c <UART_Init+0x38a>
	}
/*enable transmitter and receiver and start communication*/
	UART_StartComm();
    16d6:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <UART_StartComm>


	/**************check enable receiver interrupt************/
	if(UART_cfg.RecInt==UART_RxIntEn)
    16da:	8e 81       	ldd	r24, Y+6	; 0x06
    16dc:	81 30       	cpi	r24, 0x01	; 1
    16de:	41 f4       	brne	.+16     	; 0x16f0 <UART_Init+0x31e>
	{
		UCSRB |= 1<< RXCIE ;
    16e0:	aa e2       	ldi	r26, 0x2A	; 42
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	ea e2       	ldi	r30, 0x2A	; 42
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	80 81       	ld	r24, Z
    16ea:	80 68       	ori	r24, 0x80	; 128
    16ec:	8c 93       	st	X, r24
    16ee:	0a c0       	rjmp	.+20     	; 0x1704 <UART_Init+0x332>
	}
	else if(UART_cfg.RecInt==UART_RxIntDis)
    16f0:	8e 81       	ldd	r24, Y+6	; 0x06
    16f2:	88 23       	and	r24, r24
    16f4:	39 f4       	brne	.+14     	; 0x1704 <UART_Init+0x332>
	{
		UCSRB &= ~(1<<RXCIE);
    16f6:	aa e2       	ldi	r26, 0x2A	; 42
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	ea e2       	ldi	r30, 0x2A	; 42
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8f 77       	andi	r24, 0x7F	; 127
    1702:	8c 93       	st	X, r24
	}


	/***********check enable Transmitter interrupt***********/
	if(UART_cfg.TransInt==UART_TxIntEn)
    1704:	8f 81       	ldd	r24, Y+7	; 0x07
    1706:	81 30       	cpi	r24, 0x01	; 1
    1708:	41 f4       	brne	.+16     	; 0x171a <UART_Init+0x348>
	{
		UCSRB |= 1<< TXCIE ;
    170a:	aa e2       	ldi	r26, 0x2A	; 42
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	ea e2       	ldi	r30, 0x2A	; 42
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	80 64       	ori	r24, 0x40	; 64
    1716:	8c 93       	st	X, r24
    1718:	0a c0       	rjmp	.+20     	; 0x172e <UART_Init+0x35c>
	}
	else if(UART_cfg.TransInt==UART_TxIntDis)
    171a:	8f 81       	ldd	r24, Y+7	; 0x07
    171c:	88 23       	and	r24, r24
    171e:	39 f4       	brne	.+14     	; 0x172e <UART_Init+0x35c>
	{
		UCSRB &= ~ (1<<TXCIE);
    1720:	aa e2       	ldi	r26, 0x2A	; 42
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ea e2       	ldi	r30, 0x2A	; 42
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	8f 7b       	andi	r24, 0xBF	; 191
    172c:	8c 93       	st	X, r24
	}


	/***********check enable empty interrupt***********/
	if(UART_cfg.EmptyInt==UART_EmptyIntEn)
    172e:	88 85       	ldd	r24, Y+8	; 0x08
    1730:	81 30       	cpi	r24, 0x01	; 1
    1732:	41 f4       	brne	.+16     	; 0x1744 <UART_Init+0x372>
	{
		UCSRB |= (1<<UDRIE);
    1734:	aa e2       	ldi	r26, 0x2A	; 42
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	ea e2       	ldi	r30, 0x2A	; 42
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	80 62       	ori	r24, 0x20	; 32
    1740:	8c 93       	st	X, r24
    1742:	0a c0       	rjmp	.+20     	; 0x1758 <UART_Init+0x386>
	}
	else if(UART_cfg.EmptyInt==UART_EmptyIntDis)
    1744:	88 85       	ldd	r24, Y+8	; 0x08
    1746:	88 23       	and	r24, r24
    1748:	39 f4       	brne	.+14     	; 0x1758 <UART_Init+0x386>
	{
		UCSRB &= ~ (1<<UDRIE);
    174a:	aa e2       	ldi	r26, 0x2A	; 42
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	ea e2       	ldi	r30, 0x2A	; 42
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	8f 7d       	andi	r24, 0xDF	; 223
    1756:	8c 93       	st	X, r24
	}

	return oK;
    1758:	91 e0       	ldi	r25, 0x01	; 1
    175a:	9e 87       	std	Y+14, r25	; 0x0e
    175c:	8e 85       	ldd	r24, Y+14	; 0x0e
}
    175e:	60 96       	adiw	r28, 0x10	; 16
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	08 95       	ret

00001774 <UART_RecieveChar>:



Status_U UART_RecieveChar(uint8* a_Data_ptr) /*read char on UART module*/
{
    1774:	df 93       	push	r29
    1776:	cf 93       	push	r28
    1778:	00 d0       	rcall	.+0      	; 0x177a <UART_RecieveChar+0x6>
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
    1782:	eb e2       	ldi	r30, 0x2B	; 43
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 23       	and	r24, r24
    178a:	dc f7       	brge	.-10     	; 0x1782 <UART_RecieveChar+0xe>
	;
	/* Get and return received data from buffer */
	*a_Data_ptr=UDR;
    178c:	ec e2       	ldi	r30, 0x2C	; 44
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	e9 81       	ldd	r30, Y+1	; 0x01
    1794:	fa 81       	ldd	r31, Y+2	; 0x02
    1796:	80 83       	st	Z, r24
	return oK;
    1798:	81 e0       	ldi	r24, 0x01	; 1
}
    179a:	0f 90       	pop	r0
    179c:	0f 90       	pop	r0
    179e:	cf 91       	pop	r28
    17a0:	df 91       	pop	r29
    17a2:	08 95       	ret

000017a4 <UART_SendChar>:


/*send a char function*/
Status_U UART_SendChar(uint8 a_Data) /*send char on UART module*/
{
    17a4:	df 93       	push	r29
    17a6:	cf 93       	push	r28
    17a8:	0f 92       	push	r0
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )	;
    17b0:	eb e2       	ldi	r30, 0x2B	; 43
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 2f       	mov	r24, r24
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	80 72       	andi	r24, 0x20	; 32
    17bc:	90 70       	andi	r25, 0x00	; 0
    17be:	00 97       	sbiw	r24, 0x00	; 0
    17c0:	b9 f3       	breq	.-18     	; 0x17b0 <UART_SendChar+0xc>

	/* Put data into buffer, sends the data */
	UDR = a_Data;
    17c2:	ec e2       	ldi	r30, 0x2C	; 44
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	80 83       	st	Z, r24

	return oK;
    17ca:	81 e0       	ldi	r24, 0x01	; 1
}
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <UART_StartComm>:


/******************************************************************/
/*start communication by enabling the receiver and transmitter*/
Status_U UART_StartComm(void) /*start communication by UART*/
{
    17d4:	df 93       	push	r29
    17d6:	cf 93       	push	r28
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= 1<< RXEN ;
    17dc:	aa e2       	ldi	r26, 0x2A	; 42
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	ea e2       	ldi	r30, 0x2A	; 42
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	80 61       	ori	r24, 0x10	; 16
    17e8:	8c 93       	st	X, r24
	UCSRB |= 1<<TXEN;
    17ea:	aa e2       	ldi	r26, 0x2A	; 42
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	ea e2       	ldi	r30, 0x2A	; 42
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	88 60       	ori	r24, 0x08	; 8
    17f6:	8c 93       	st	X, r24
	return oK;
    17f8:	81 e0       	ldi	r24, 0x01	; 1
}
    17fa:	cf 91       	pop	r28
    17fc:	df 91       	pop	r29
    17fe:	08 95       	ret

00001800 <UART_StopComm>:


/******************************************************************/
/*stop communication by disabling the receiver and transmitter*/
Status_U UART_StopComm(void) /*stop communication by UART*/
{
    1800:	df 93       	push	r29
    1802:	cf 93       	push	r28
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
	UCSRB &= ~ (1<<RXEN);
    1808:	aa e2       	ldi	r26, 0x2A	; 42
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	ea e2       	ldi	r30, 0x2A	; 42
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	8f 7e       	andi	r24, 0xEF	; 239
    1814:	8c 93       	st	X, r24
	UCSRB &= ~ (1<<TXEN) ;
    1816:	aa e2       	ldi	r26, 0x2A	; 42
    1818:	b0 e0       	ldi	r27, 0x00	; 0
    181a:	ea e2       	ldi	r30, 0x2A	; 42
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	80 81       	ld	r24, Z
    1820:	87 7f       	andi	r24, 0xF7	; 247
    1822:	8c 93       	st	X, r24
	return oK;
    1824:	81 e0       	ldi	r24, 0x01	; 1
}
    1826:	cf 91       	pop	r28
    1828:	df 91       	pop	r29
    182a:	08 95       	ret

0000182c <UART_Send>:


/**********************************/
Status_U UART_Send(const uint8* a_data_ptr)/*stop communication by UART*/
{
    182c:	df 93       	push	r29
    182e:	cf 93       	push	r28
    1830:	00 d0       	rcall	.+0      	; 0x1832 <UART_Send+0x6>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
	return oK;
    183a:	81 e0       	ldi	r24, 0x01	; 1
}
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	cf 91       	pop	r28
    1842:	df 91       	pop	r29
    1844:	08 95       	ret

00001846 <UART_Recieve>:
Status_U UART_Recieve(uint8* a_data_ptr) /*stop communication by UART*/
{
    1846:	df 93       	push	r29
    1848:	cf 93       	push	r28
    184a:	00 d0       	rcall	.+0      	; 0x184c <UART_Recieve+0x6>
    184c:	cd b7       	in	r28, 0x3d	; 61
    184e:	de b7       	in	r29, 0x3e	; 62
    1850:	9a 83       	std	Y+2, r25	; 0x02
    1852:	89 83       	std	Y+1, r24	; 0x01
	return oK;
    1854:	81 e0       	ldi	r24, 0x01	; 1
}
    1856:	0f 90       	pop	r0
    1858:	0f 90       	pop	r0
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <Ultrasonic_Init>:
 */

#include "Ultrasonic.h"

void Ultrasonic_Init(void)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	cd b7       	in	r28, 0x3d	; 61
    1866:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(TRIG,OUTPUT);  //LED 1 PIN
    1868:	8d e0       	ldi	r24, 0x0D	; 13
    186a:	61 e0       	ldi	r22, 0x01	; 1
    186c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_WritePin(TRIG,LOW);
    1870:	8d e0       	ldi	r24, 0x0D	; 13
    1872:	60 e0       	ldi	r22, 0x00	; 0
    1874:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    1878:	cf 91       	pop	r28
    187a:	df 91       	pop	r29
    187c:	08 95       	ret

0000187e <Ultrasonic_Trig>:

void Ultrasonic_Trig(void)
{
    187e:	df 93       	push	r29
    1880:	cf 93       	push	r28
    1882:	cd b7       	in	r28, 0x3d	; 61
    1884:	de b7       	in	r29, 0x3e	; 62
    1886:	68 97       	sbiw	r28, 0x18	; 24
    1888:	0f b6       	in	r0, 0x3f	; 63
    188a:	f8 94       	cli
    188c:	de bf       	out	0x3e, r29	; 62
    188e:	0f be       	out	0x3f, r0	; 63
    1890:	cd bf       	out	0x3d, r28	; 61
	DIO_WritePin(TRIG,HIGH);
    1892:	8d e0       	ldi	r24, 0x0D	; 13
    1894:	61 e0       	ldi	r22, 0x01	; 1
    1896:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	a0 e7       	ldi	r26, 0x70	; 112
    18a0:	b1 e4       	ldi	r27, 0x41	; 65
    18a2:	8d 8b       	std	Y+21, r24	; 0x15
    18a4:	9e 8b       	std	Y+22, r25	; 0x16
    18a6:	af 8b       	std	Y+23, r26	; 0x17
    18a8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18aa:	6d 89       	ldd	r22, Y+21	; 0x15
    18ac:	7e 89       	ldd	r23, Y+22	; 0x16
    18ae:	8f 89       	ldd	r24, Y+23	; 0x17
    18b0:	98 8d       	ldd	r25, Y+24	; 0x18
    18b2:	2b ea       	ldi	r18, 0xAB	; 171
    18b4:	3a ea       	ldi	r19, 0xAA	; 170
    18b6:	4a ea       	ldi	r20, 0xAA	; 170
    18b8:	50 e4       	ldi	r21, 0x40	; 64
    18ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18be:	dc 01       	movw	r26, r24
    18c0:	cb 01       	movw	r24, r22
    18c2:	89 8b       	std	Y+17, r24	; 0x11
    18c4:	9a 8b       	std	Y+18, r25	; 0x12
    18c6:	ab 8b       	std	Y+19, r26	; 0x13
    18c8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    18ca:	69 89       	ldd	r22, Y+17	; 0x11
    18cc:	7a 89       	ldd	r23, Y+18	; 0x12
    18ce:	8b 89       	ldd	r24, Y+19	; 0x13
    18d0:	9c 89       	ldd	r25, Y+20	; 0x14
    18d2:	20 e0       	ldi	r18, 0x00	; 0
    18d4:	30 e0       	ldi	r19, 0x00	; 0
    18d6:	40 e8       	ldi	r20, 0x80	; 128
    18d8:	5f e3       	ldi	r21, 0x3F	; 63
    18da:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18de:	88 23       	and	r24, r24
    18e0:	1c f4       	brge	.+6      	; 0x18e8 <Ultrasonic_Trig+0x6a>
		__ticks = 1;
    18e2:	81 e0       	ldi	r24, 0x01	; 1
    18e4:	88 8b       	std	Y+16, r24	; 0x10
    18e6:	91 c0       	rjmp	.+290    	; 0x1a0a <Ultrasonic_Trig+0x18c>
	else if (__tmp > 255)
    18e8:	69 89       	ldd	r22, Y+17	; 0x11
    18ea:	7a 89       	ldd	r23, Y+18	; 0x12
    18ec:	8b 89       	ldd	r24, Y+19	; 0x13
    18ee:	9c 89       	ldd	r25, Y+20	; 0x14
    18f0:	20 e0       	ldi	r18, 0x00	; 0
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	4f e7       	ldi	r20, 0x7F	; 127
    18f6:	53 e4       	ldi	r21, 0x43	; 67
    18f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    18fc:	18 16       	cp	r1, r24
    18fe:	0c f0       	brlt	.+2      	; 0x1902 <Ultrasonic_Trig+0x84>
    1900:	7b c0       	rjmp	.+246    	; 0x19f8 <Ultrasonic_Trig+0x17a>
	{
		_delay_ms(__us / 1000.0);
    1902:	6d 89       	ldd	r22, Y+21	; 0x15
    1904:	7e 89       	ldd	r23, Y+22	; 0x16
    1906:	8f 89       	ldd	r24, Y+23	; 0x17
    1908:	98 8d       	ldd	r25, Y+24	; 0x18
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	4a e7       	ldi	r20, 0x7A	; 122
    1910:	54 e4       	ldi	r21, 0x44	; 68
    1912:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1916:	dc 01       	movw	r26, r24
    1918:	cb 01       	movw	r24, r22
    191a:	8c 87       	std	Y+12, r24	; 0x0c
    191c:	9d 87       	std	Y+13, r25	; 0x0d
    191e:	ae 87       	std	Y+14, r26	; 0x0e
    1920:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1922:	6c 85       	ldd	r22, Y+12	; 0x0c
    1924:	7d 85       	ldd	r23, Y+13	; 0x0d
    1926:	8e 85       	ldd	r24, Y+14	; 0x0e
    1928:	9f 85       	ldd	r25, Y+15	; 0x0f
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	4a e7       	ldi	r20, 0x7A	; 122
    1930:	55 e4       	ldi	r21, 0x45	; 69
    1932:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1936:	dc 01       	movw	r26, r24
    1938:	cb 01       	movw	r24, r22
    193a:	88 87       	std	Y+8, r24	; 0x08
    193c:	99 87       	std	Y+9, r25	; 0x09
    193e:	aa 87       	std	Y+10, r26	; 0x0a
    1940:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1942:	68 85       	ldd	r22, Y+8	; 0x08
    1944:	79 85       	ldd	r23, Y+9	; 0x09
    1946:	8a 85       	ldd	r24, Y+10	; 0x0a
    1948:	9b 85       	ldd	r25, Y+11	; 0x0b
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	40 e8       	ldi	r20, 0x80	; 128
    1950:	5f e3       	ldi	r21, 0x3F	; 63
    1952:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1956:	88 23       	and	r24, r24
    1958:	2c f4       	brge	.+10     	; 0x1964 <Ultrasonic_Trig+0xe6>
		__ticks = 1;
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	9f 83       	std	Y+7, r25	; 0x07
    1960:	8e 83       	std	Y+6, r24	; 0x06
    1962:	3f c0       	rjmp	.+126    	; 0x19e2 <Ultrasonic_Trig+0x164>
	else if (__tmp > 65535)
    1964:	68 85       	ldd	r22, Y+8	; 0x08
    1966:	79 85       	ldd	r23, Y+9	; 0x09
    1968:	8a 85       	ldd	r24, Y+10	; 0x0a
    196a:	9b 85       	ldd	r25, Y+11	; 0x0b
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	3f ef       	ldi	r19, 0xFF	; 255
    1970:	4f e7       	ldi	r20, 0x7F	; 127
    1972:	57 e4       	ldi	r21, 0x47	; 71
    1974:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1978:	18 16       	cp	r1, r24
    197a:	4c f5       	brge	.+82     	; 0x19ce <Ultrasonic_Trig+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    197c:	6c 85       	ldd	r22, Y+12	; 0x0c
    197e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1980:	8e 85       	ldd	r24, Y+14	; 0x0e
    1982:	9f 85       	ldd	r25, Y+15	; 0x0f
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1990:	dc 01       	movw	r26, r24
    1992:	cb 01       	movw	r24, r22
    1994:	bc 01       	movw	r22, r24
    1996:	cd 01       	movw	r24, r26
    1998:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    199c:	dc 01       	movw	r26, r24
    199e:	cb 01       	movw	r24, r22
    19a0:	9f 83       	std	Y+7, r25	; 0x07
    19a2:	8e 83       	std	Y+6, r24	; 0x06
    19a4:	0f c0       	rjmp	.+30     	; 0x19c4 <Ultrasonic_Trig+0x146>
    19a6:	80 e9       	ldi	r24, 0x90	; 144
    19a8:	91 e0       	ldi	r25, 0x01	; 1
    19aa:	9d 83       	std	Y+5, r25	; 0x05
    19ac:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19ae:	8c 81       	ldd	r24, Y+4	; 0x04
    19b0:	9d 81       	ldd	r25, Y+5	; 0x05
    19b2:	01 97       	sbiw	r24, 0x01	; 1
    19b4:	f1 f7       	brne	.-4      	; 0x19b2 <Ultrasonic_Trig+0x134>
    19b6:	9d 83       	std	Y+5, r25	; 0x05
    19b8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	8e 81       	ldd	r24, Y+6	; 0x06
    19bc:	9f 81       	ldd	r25, Y+7	; 0x07
    19be:	01 97       	sbiw	r24, 0x01	; 1
    19c0:	9f 83       	std	Y+7, r25	; 0x07
    19c2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19c4:	8e 81       	ldd	r24, Y+6	; 0x06
    19c6:	9f 81       	ldd	r25, Y+7	; 0x07
    19c8:	00 97       	sbiw	r24, 0x00	; 0
    19ca:	69 f7       	brne	.-38     	; 0x19a6 <Ultrasonic_Trig+0x128>
    19cc:	24 c0       	rjmp	.+72     	; 0x1a16 <Ultrasonic_Trig+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19ce:	68 85       	ldd	r22, Y+8	; 0x08
    19d0:	79 85       	ldd	r23, Y+9	; 0x09
    19d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    19d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    19d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	9f 83       	std	Y+7, r25	; 0x07
    19e0:	8e 83       	std	Y+6, r24	; 0x06
    19e2:	8e 81       	ldd	r24, Y+6	; 0x06
    19e4:	9f 81       	ldd	r25, Y+7	; 0x07
    19e6:	9b 83       	std	Y+3, r25	; 0x03
    19e8:	8a 83       	std	Y+2, r24	; 0x02
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	9b 81       	ldd	r25, Y+3	; 0x03
    19ee:	01 97       	sbiw	r24, 0x01	; 1
    19f0:	f1 f7       	brne	.-4      	; 0x19ee <Ultrasonic_Trig+0x170>
    19f2:	9b 83       	std	Y+3, r25	; 0x03
    19f4:	8a 83       	std	Y+2, r24	; 0x02
    19f6:	0f c0       	rjmp	.+30     	; 0x1a16 <Ultrasonic_Trig+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    19f8:	69 89       	ldd	r22, Y+17	; 0x11
    19fa:	7a 89       	ldd	r23, Y+18	; 0x12
    19fc:	8b 89       	ldd	r24, Y+19	; 0x13
    19fe:	9c 89       	ldd	r25, Y+20	; 0x14
    1a00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a04:	dc 01       	movw	r26, r24
    1a06:	cb 01       	movw	r24, r22
    1a08:	88 8b       	std	Y+16, r24	; 0x10
    1a0a:	88 89       	ldd	r24, Y+16	; 0x10
    1a0c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a0e:	89 81       	ldd	r24, Y+1	; 0x01
    1a10:	8a 95       	dec	r24
    1a12:	f1 f7       	brne	.-4      	; 0x1a10 <Ultrasonic_Trig+0x192>
    1a14:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	DIO_WritePin(TRIG,LOW);
    1a16:	8d e0       	ldi	r24, 0x0D	; 13
    1a18:	60 e0       	ldi	r22, 0x00	; 0
    1a1a:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    1a1e:	68 96       	adiw	r28, 0x18	; 24
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <del_ms>:
 *      Author: Hossam-PC
 */
#include "del.h"

void del_ms(uint32 x)
{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	2c 97       	sbiw	r28, 0x0c	; 12
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	69 87       	std	Y+9, r22	; 0x09
    1a46:	7a 87       	std	Y+10, r23	; 0x0a
    1a48:	8b 87       	std	Y+11, r24	; 0x0b
    1a4a:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32 i,j;
	for(i=0;i<x;i++)
    1a4c:	19 82       	std	Y+1, r1	; 0x01
    1a4e:	1a 82       	std	Y+2, r1	; 0x02
    1a50:	1b 82       	std	Y+3, r1	; 0x03
    1a52:	1c 82       	std	Y+4, r1	; 0x04
    1a54:	24 c0       	rjmp	.+72     	; 0x1a9e <del_ms+0x6e>
	{
		for(j=0;j<240;j++);
    1a56:	1d 82       	std	Y+5, r1	; 0x05
    1a58:	1e 82       	std	Y+6, r1	; 0x06
    1a5a:	1f 82       	std	Y+7, r1	; 0x07
    1a5c:	18 86       	std	Y+8, r1	; 0x08
    1a5e:	0b c0       	rjmp	.+22     	; 0x1a76 <del_ms+0x46>
    1a60:	8d 81       	ldd	r24, Y+5	; 0x05
    1a62:	9e 81       	ldd	r25, Y+6	; 0x06
    1a64:	af 81       	ldd	r26, Y+7	; 0x07
    1a66:	b8 85       	ldd	r27, Y+8	; 0x08
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	a1 1d       	adc	r26, r1
    1a6c:	b1 1d       	adc	r27, r1
    1a6e:	8d 83       	std	Y+5, r24	; 0x05
    1a70:	9e 83       	std	Y+6, r25	; 0x06
    1a72:	af 83       	std	Y+7, r26	; 0x07
    1a74:	b8 87       	std	Y+8, r27	; 0x08
    1a76:	8d 81       	ldd	r24, Y+5	; 0x05
    1a78:	9e 81       	ldd	r25, Y+6	; 0x06
    1a7a:	af 81       	ldd	r26, Y+7	; 0x07
    1a7c:	b8 85       	ldd	r27, Y+8	; 0x08
    1a7e:	80 3f       	cpi	r24, 0xF0	; 240
    1a80:	91 05       	cpc	r25, r1
    1a82:	a1 05       	cpc	r26, r1
    1a84:	b1 05       	cpc	r27, r1
    1a86:	60 f3       	brcs	.-40     	; 0x1a60 <del_ms+0x30>
#include "del.h"

void del_ms(uint32 x)
{
	volatile uint32 i,j;
	for(i=0;i<x;i++)
    1a88:	89 81       	ldd	r24, Y+1	; 0x01
    1a8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8c:	ab 81       	ldd	r26, Y+3	; 0x03
    1a8e:	bc 81       	ldd	r27, Y+4	; 0x04
    1a90:	01 96       	adiw	r24, 0x01	; 1
    1a92:	a1 1d       	adc	r26, r1
    1a94:	b1 1d       	adc	r27, r1
    1a96:	89 83       	std	Y+1, r24	; 0x01
    1a98:	9a 83       	std	Y+2, r25	; 0x02
    1a9a:	ab 83       	std	Y+3, r26	; 0x03
    1a9c:	bc 83       	std	Y+4, r27	; 0x04
    1a9e:	29 81       	ldd	r18, Y+1	; 0x01
    1aa0:	3a 81       	ldd	r19, Y+2	; 0x02
    1aa2:	4b 81       	ldd	r20, Y+3	; 0x03
    1aa4:	5c 81       	ldd	r21, Y+4	; 0x04
    1aa6:	89 85       	ldd	r24, Y+9	; 0x09
    1aa8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aaa:	ab 85       	ldd	r26, Y+11	; 0x0b
    1aac:	bc 85       	ldd	r27, Y+12	; 0x0c
    1aae:	28 17       	cp	r18, r24
    1ab0:	39 07       	cpc	r19, r25
    1ab2:	4a 07       	cpc	r20, r26
    1ab4:	5b 07       	cpc	r21, r27
    1ab6:	78 f2       	brcs	.-98     	; 0x1a56 <del_ms+0x26>
	{
		for(j=0;j<240;j++);
	}
}
    1ab8:	2c 96       	adiw	r28, 0x0c	; 12
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <main>:

static volatile int pulse = 0;
static volatile int i = 0;

int main(void)
{
    1aca:	0f 93       	push	r16
    1acc:	1f 93       	push	r17
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	c2 56       	subi	r28, 0x62	; 98
    1ad8:	d0 40       	sbci	r29, 0x00	; 0
    1ada:	0f b6       	in	r0, 0x3f	; 63
    1adc:	f8 94       	cli
    1ade:	de bf       	out	0x3e, r29	; 62
    1ae0:	0f be       	out	0x3f, r0	; 63
    1ae2:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF;
    1ae4:	ea e3       	ldi	r30, 0x3A	; 58
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8f ef       	ldi	r24, 0xFF	; 255
    1aea:	80 83       	st	Z, r24
    DDRB = 0xFF;
    1aec:	e7 e3       	ldi	r30, 0x37	; 55
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8f ef       	ldi	r24, 0xFF	; 255
    1af2:	80 83       	st	Z, r24
    DDRD = 0b11111011;
    1af4:	e1 e3       	ldi	r30, 0x31	; 49
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	8b ef       	ldi	r24, 0xFB	; 251
    1afa:	80 83       	st	Z, r24
    1afc:	fe 01       	movw	r30, r28
    1afe:	e3 5b       	subi	r30, 0xB3	; 179
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	80 e0       	ldi	r24, 0x00	; 0
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a8 e4       	ldi	r26, 0x48	; 72
    1b08:	b2 e4       	ldi	r27, 0x42	; 66
    1b0a:	80 83       	st	Z, r24
    1b0c:	91 83       	std	Z+1, r25	; 0x01
    1b0e:	a2 83       	std	Z+2, r26	; 0x02
    1b10:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b12:	8e 01       	movw	r16, r28
    1b14:	07 5b       	subi	r16, 0xB7	; 183
    1b16:	1f 4f       	sbci	r17, 0xFF	; 255
    1b18:	fe 01       	movw	r30, r28
    1b1a:	e3 5b       	subi	r30, 0xB3	; 179
    1b1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b1e:	60 81       	ld	r22, Z
    1b20:	71 81       	ldd	r23, Z+1	; 0x01
    1b22:	82 81       	ldd	r24, Z+2	; 0x02
    1b24:	93 81       	ldd	r25, Z+3	; 0x03
    1b26:	20 e0       	ldi	r18, 0x00	; 0
    1b28:	30 e0       	ldi	r19, 0x00	; 0
    1b2a:	4a e7       	ldi	r20, 0x7A	; 122
    1b2c:	53 e4       	ldi	r21, 0x43	; 67
    1b2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	f8 01       	movw	r30, r16
    1b38:	80 83       	st	Z, r24
    1b3a:	91 83       	std	Z+1, r25	; 0x01
    1b3c:	a2 83       	std	Z+2, r26	; 0x02
    1b3e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b40:	fe 01       	movw	r30, r28
    1b42:	e7 5b       	subi	r30, 0xB7	; 183
    1b44:	ff 4f       	sbci	r31, 0xFF	; 255
    1b46:	60 81       	ld	r22, Z
    1b48:	71 81       	ldd	r23, Z+1	; 0x01
    1b4a:	82 81       	ldd	r24, Z+2	; 0x02
    1b4c:	93 81       	ldd	r25, Z+3	; 0x03
    1b4e:	20 e0       	ldi	r18, 0x00	; 0
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	40 e8       	ldi	r20, 0x80	; 128
    1b54:	5f e3       	ldi	r21, 0x3F	; 63
    1b56:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b5a:	88 23       	and	r24, r24
    1b5c:	44 f4       	brge	.+16     	; 0x1b6e <main+0xa4>
		__ticks = 1;
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e9 5b       	subi	r30, 0xB9	; 185
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	91 83       	std	Z+1, r25	; 0x01
    1b6a:	80 83       	st	Z, r24
    1b6c:	64 c0       	rjmp	.+200    	; 0x1c36 <main+0x16c>
	else if (__tmp > 65535)
    1b6e:	fe 01       	movw	r30, r28
    1b70:	e7 5b       	subi	r30, 0xB7	; 183
    1b72:	ff 4f       	sbci	r31, 0xFF	; 255
    1b74:	60 81       	ld	r22, Z
    1b76:	71 81       	ldd	r23, Z+1	; 0x01
    1b78:	82 81       	ldd	r24, Z+2	; 0x02
    1b7a:	93 81       	ldd	r25, Z+3	; 0x03
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	3f ef       	ldi	r19, 0xFF	; 255
    1b80:	4f e7       	ldi	r20, 0x7F	; 127
    1b82:	57 e4       	ldi	r21, 0x47	; 71
    1b84:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b88:	18 16       	cp	r1, r24
    1b8a:	0c f0       	brlt	.+2      	; 0x1b8e <main+0xc4>
    1b8c:	43 c0       	rjmp	.+134    	; 0x1c14 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b8e:	fe 01       	movw	r30, r28
    1b90:	e3 5b       	subi	r30, 0xB3	; 179
    1b92:	ff 4f       	sbci	r31, 0xFF	; 255
    1b94:	60 81       	ld	r22, Z
    1b96:	71 81       	ldd	r23, Z+1	; 0x01
    1b98:	82 81       	ldd	r24, Z+2	; 0x02
    1b9a:	93 81       	ldd	r25, Z+3	; 0x03
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	51 e4       	ldi	r21, 0x41	; 65
    1ba4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba8:	dc 01       	movw	r26, r24
    1baa:	cb 01       	movw	r24, r22
    1bac:	8e 01       	movw	r16, r28
    1bae:	09 5b       	subi	r16, 0xB9	; 185
    1bb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb2:	bc 01       	movw	r22, r24
    1bb4:	cd 01       	movw	r24, r26
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
    1bc4:	1f c0       	rjmp	.+62     	; 0x1c04 <main+0x13a>
    1bc6:	fe 01       	movw	r30, r28
    1bc8:	eb 5b       	subi	r30, 0xBB	; 187
    1bca:	ff 4f       	sbci	r31, 0xFF	; 255
    1bcc:	89 e1       	ldi	r24, 0x19	; 25
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	91 83       	std	Z+1, r25	; 0x01
    1bd2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bd4:	fe 01       	movw	r30, r28
    1bd6:	eb 5b       	subi	r30, 0xBB	; 187
    1bd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bda:	80 81       	ld	r24, Z
    1bdc:	91 81       	ldd	r25, Z+1	; 0x01
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <main+0x114>
    1be2:	fe 01       	movw	r30, r28
    1be4:	eb 5b       	subi	r30, 0xBB	; 187
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	91 83       	std	Z+1, r25	; 0x01
    1bea:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bec:	de 01       	movw	r26, r28
    1bee:	a9 5b       	subi	r26, 0xB9	; 185
    1bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    1bf2:	fe 01       	movw	r30, r28
    1bf4:	e9 5b       	subi	r30, 0xB9	; 185
    1bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bf8:	80 81       	ld	r24, Z
    1bfa:	91 81       	ldd	r25, Z+1	; 0x01
    1bfc:	01 97       	sbiw	r24, 0x01	; 1
    1bfe:	11 96       	adiw	r26, 0x01	; 1
    1c00:	9c 93       	st	X, r25
    1c02:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c04:	fe 01       	movw	r30, r28
    1c06:	e9 5b       	subi	r30, 0xB9	; 185
    1c08:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0a:	80 81       	ld	r24, Z
    1c0c:	91 81       	ldd	r25, Z+1	; 0x01
    1c0e:	00 97       	sbiw	r24, 0x00	; 0
    1c10:	d1 f6       	brne	.-76     	; 0x1bc6 <main+0xfc>
    1c12:	27 c0       	rjmp	.+78     	; 0x1c62 <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c14:	8e 01       	movw	r16, r28
    1c16:	09 5b       	subi	r16, 0xB9	; 185
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	fe 01       	movw	r30, r28
    1c1c:	e7 5b       	subi	r30, 0xB7	; 183
    1c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c20:	60 81       	ld	r22, Z
    1c22:	71 81       	ldd	r23, Z+1	; 0x01
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	f8 01       	movw	r30, r16
    1c32:	91 83       	std	Z+1, r25	; 0x01
    1c34:	80 83       	st	Z, r24
    1c36:	de 01       	movw	r26, r28
    1c38:	ad 5b       	subi	r26, 0xBD	; 189
    1c3a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e9 5b       	subi	r30, 0xB9	; 185
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	8d 93       	st	X+, r24
    1c48:	9c 93       	st	X, r25
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	ed 5b       	subi	r30, 0xBD	; 189
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	80 81       	ld	r24, Z
    1c52:	91 81       	ldd	r25, Z+1	; 0x01
    1c54:	01 97       	sbiw	r24, 0x01	; 1
    1c56:	f1 f7       	brne	.-4      	; 0x1c54 <main+0x18a>
    1c58:	fe 01       	movw	r30, r28
    1c5a:	ed 5b       	subi	r30, 0xBD	; 189
    1c5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
    _delay_ms(50);

    GICR|=(1<<INT2);
    1c62:	ab e5       	ldi	r26, 0x5B	; 91
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	eb e5       	ldi	r30, 0x5B	; 91
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	80 62       	ori	r24, 0x20	; 32
    1c6e:	8c 93       	st	X, r24
//    MCUCR|=(1<<ISC00);

    Set_Bit(MCUCSR,ISC2);  //rising
    1c70:	a4 e5       	ldi	r26, 0x54	; 84
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e4 e5       	ldi	r30, 0x54	; 84
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 64       	ori	r24, 0x40	; 64
    1c7c:	8c 93       	st	X, r24
//    Set_Bit(MCUCR,ISC01);
    TCCR1A = 0;
    1c7e:	ef e4       	ldi	r30, 0x4F	; 79
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	10 82       	st	Z, r1

    int16_t COUNTA = 0;
    1c84:	fe 01       	movw	r30, r28
    1c86:	ef 5a       	subi	r30, 0xAF	; 175
    1c88:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8a:	11 82       	std	Z+1, r1	; 0x01
    1c8c:	10 82       	st	Z, r1
    char SHOWA [16];


    send_a_command(0x01); //Clear Screen 0x01 = 00000001
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	0e 94 06 11 	call	0x220c	; 0x220c <send_a_command>
    1c94:	fe 01       	movw	r30, r28
    1c96:	ff 96       	adiw	r30, 0x3f	; 63
    1c98:	80 e0       	ldi	r24, 0x00	; 0
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	a8 e4       	ldi	r26, 0x48	; 72
    1c9e:	b2 e4       	ldi	r27, 0x42	; 66
    1ca0:	80 83       	st	Z, r24
    1ca2:	91 83       	std	Z+1, r25	; 0x01
    1ca4:	a2 83       	std	Z+2, r26	; 0x02
    1ca6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ca8:	fe 01       	movw	r30, r28
    1caa:	ff 96       	adiw	r30, 0x3f	; 63
    1cac:	60 81       	ld	r22, Z
    1cae:	71 81       	ldd	r23, Z+1	; 0x01
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	93 81       	ldd	r25, Z+3	; 0x03
    1cb4:	20 e0       	ldi	r18, 0x00	; 0
    1cb6:	30 e0       	ldi	r19, 0x00	; 0
    1cb8:	4a e7       	ldi	r20, 0x7A	; 122
    1cba:	53 e4       	ldi	r21, 0x43	; 67
    1cbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	8b af       	std	Y+59, r24	; 0x3b
    1cc6:	9c af       	std	Y+60, r25	; 0x3c
    1cc8:	ad af       	std	Y+61, r26	; 0x3d
    1cca:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    1ccc:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cce:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cd0:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cd2:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e8       	ldi	r20, 0x80	; 128
    1cda:	5f e3       	ldi	r21, 0x3F	; 63
    1cdc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	2c f4       	brge	.+10     	; 0x1cee <main+0x224>
		__ticks = 1;
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9a af       	std	Y+58, r25	; 0x3a
    1cea:	89 af       	std	Y+57, r24	; 0x39
    1cec:	41 c0       	rjmp	.+130    	; 0x1d70 <main+0x2a6>
	else if (__tmp > 65535)
    1cee:	6b ad       	ldd	r22, Y+59	; 0x3b
    1cf0:	7c ad       	ldd	r23, Y+60	; 0x3c
    1cf2:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cf4:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	3f ef       	ldi	r19, 0xFF	; 255
    1cfa:	4f e7       	ldi	r20, 0x7F	; 127
    1cfc:	57 e4       	ldi	r21, 0x47	; 71
    1cfe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d02:	18 16       	cp	r1, r24
    1d04:	5c f5       	brge	.+86     	; 0x1d5c <main+0x292>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d06:	fe 01       	movw	r30, r28
    1d08:	ff 96       	adiw	r30, 0x3f	; 63
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e2       	ldi	r20, 0x20	; 32
    1d18:	51 e4       	ldi	r21, 0x41	; 65
    1d1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	bc 01       	movw	r22, r24
    1d24:	cd 01       	movw	r24, r26
    1d26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d2a:	dc 01       	movw	r26, r24
    1d2c:	cb 01       	movw	r24, r22
    1d2e:	9a af       	std	Y+58, r25	; 0x3a
    1d30:	89 af       	std	Y+57, r24	; 0x39
    1d32:	0f c0       	rjmp	.+30     	; 0x1d52 <main+0x288>
    1d34:	89 e1       	ldi	r24, 0x19	; 25
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	98 af       	std	Y+56, r25	; 0x38
    1d3a:	8f ab       	std	Y+55, r24	; 0x37
    1d3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1d3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1d40:	01 97       	sbiw	r24, 0x01	; 1
    1d42:	f1 f7       	brne	.-4      	; 0x1d40 <main+0x276>
    1d44:	98 af       	std	Y+56, r25	; 0x38
    1d46:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d48:	89 ad       	ldd	r24, Y+57	; 0x39
    1d4a:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d4c:	01 97       	sbiw	r24, 0x01	; 1
    1d4e:	9a af       	std	Y+58, r25	; 0x3a
    1d50:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d52:	89 ad       	ldd	r24, Y+57	; 0x39
    1d54:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d56:	00 97       	sbiw	r24, 0x00	; 0
    1d58:	69 f7       	brne	.-38     	; 0x1d34 <main+0x26a>
    1d5a:	14 c0       	rjmp	.+40     	; 0x1d84 <main+0x2ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d5c:	6b ad       	ldd	r22, Y+59	; 0x3b
    1d5e:	7c ad       	ldd	r23, Y+60	; 0x3c
    1d60:	8d ad       	ldd	r24, Y+61	; 0x3d
    1d62:	9e ad       	ldd	r25, Y+62	; 0x3e
    1d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	9a af       	std	Y+58, r25	; 0x3a
    1d6e:	89 af       	std	Y+57, r24	; 0x39
    1d70:	89 ad       	ldd	r24, Y+57	; 0x39
    1d72:	9a ad       	ldd	r25, Y+58	; 0x3a
    1d74:	9e ab       	std	Y+54, r25	; 0x36
    1d76:	8d ab       	std	Y+53, r24	; 0x35
    1d78:	8d a9       	ldd	r24, Y+53	; 0x35
    1d7a:	9e a9       	ldd	r25, Y+54	; 0x36
    1d7c:	01 97       	sbiw	r24, 0x01	; 1
    1d7e:	f1 f7       	brne	.-4      	; 0x1d7c <main+0x2b2>
    1d80:	9e ab       	std	Y+54, r25	; 0x36
    1d82:	8d ab       	std	Y+53, r24	; 0x35
    _delay_ms(50);
    send_a_command(0x38);
    1d84:	88 e3       	ldi	r24, 0x38	; 56
    1d86:	0e 94 06 11 	call	0x220c	; 0x220c <send_a_command>
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a8 e4       	ldi	r26, 0x48	; 72
    1d90:	b2 e4       	ldi	r27, 0x42	; 66
    1d92:	89 ab       	std	Y+49, r24	; 0x31
    1d94:	9a ab       	std	Y+50, r25	; 0x32
    1d96:	ab ab       	std	Y+51, r26	; 0x33
    1d98:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d9c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1da0:	9c a9       	ldd	r25, Y+52	; 0x34
    1da2:	20 e0       	ldi	r18, 0x00	; 0
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	4a e7       	ldi	r20, 0x7A	; 122
    1da8:	53 e4       	ldi	r21, 0x43	; 67
    1daa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dae:	dc 01       	movw	r26, r24
    1db0:	cb 01       	movw	r24, r22
    1db2:	8d a7       	std	Y+45, r24	; 0x2d
    1db4:	9e a7       	std	Y+46, r25	; 0x2e
    1db6:	af a7       	std	Y+47, r26	; 0x2f
    1db8:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    1dba:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dbc:	7e a5       	ldd	r23, Y+46	; 0x2e
    1dbe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dc0:	98 a9       	ldd	r25, Y+48	; 0x30
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	40 e8       	ldi	r20, 0x80	; 128
    1dc8:	5f e3       	ldi	r21, 0x3F	; 63
    1dca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	2c f4       	brge	.+10     	; 0x1ddc <main+0x312>
		__ticks = 1;
    1dd2:	81 e0       	ldi	r24, 0x01	; 1
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9c a7       	std	Y+44, r25	; 0x2c
    1dd8:	8b a7       	std	Y+43, r24	; 0x2b
    1dda:	3f c0       	rjmp	.+126    	; 0x1e5a <main+0x390>
	else if (__tmp > 65535)
    1ddc:	6d a5       	ldd	r22, Y+45	; 0x2d
    1dde:	7e a5       	ldd	r23, Y+46	; 0x2e
    1de0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1de2:	98 a9       	ldd	r25, Y+48	; 0x30
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	3f ef       	ldi	r19, 0xFF	; 255
    1de8:	4f e7       	ldi	r20, 0x7F	; 127
    1dea:	57 e4       	ldi	r21, 0x47	; 71
    1dec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1df0:	18 16       	cp	r1, r24
    1df2:	4c f5       	brge	.+82     	; 0x1e46 <main+0x37c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1df4:	69 a9       	ldd	r22, Y+49	; 0x31
    1df6:	7a a9       	ldd	r23, Y+50	; 0x32
    1df8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dfa:	9c a9       	ldd	r25, Y+52	; 0x34
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e2       	ldi	r20, 0x20	; 32
    1e02:	51 e4       	ldi	r21, 0x41	; 65
    1e04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	bc 01       	movw	r22, r24
    1e0e:	cd 01       	movw	r24, r26
    1e10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9c a7       	std	Y+44, r25	; 0x2c
    1e1a:	8b a7       	std	Y+43, r24	; 0x2b
    1e1c:	0f c0       	rjmp	.+30     	; 0x1e3c <main+0x372>
    1e1e:	89 e1       	ldi	r24, 0x19	; 25
    1e20:	90 e0       	ldi	r25, 0x00	; 0
    1e22:	9a a7       	std	Y+42, r25	; 0x2a
    1e24:	89 a7       	std	Y+41, r24	; 0x29
    1e26:	89 a5       	ldd	r24, Y+41	; 0x29
    1e28:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <main+0x360>
    1e2e:	9a a7       	std	Y+42, r25	; 0x2a
    1e30:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e32:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e34:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e36:	01 97       	sbiw	r24, 0x01	; 1
    1e38:	9c a7       	std	Y+44, r25	; 0x2c
    1e3a:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e40:	00 97       	sbiw	r24, 0x00	; 0
    1e42:	69 f7       	brne	.-38     	; 0x1e1e <main+0x354>
    1e44:	14 c0       	rjmp	.+40     	; 0x1e6e <main+0x3a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e46:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e48:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e4e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e52:	dc 01       	movw	r26, r24
    1e54:	cb 01       	movw	r24, r22
    1e56:	9c a7       	std	Y+44, r25	; 0x2c
    1e58:	8b a7       	std	Y+43, r24	; 0x2b
    1e5a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e5c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e5e:	98 a7       	std	Y+40, r25	; 0x28
    1e60:	8f a3       	std	Y+39, r24	; 0x27
    1e62:	8f a1       	ldd	r24, Y+39	; 0x27
    1e64:	98 a5       	ldd	r25, Y+40	; 0x28
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <main+0x39c>
    1e6a:	98 a7       	std	Y+40, r25	; 0x28
    1e6c:	8f a3       	std	Y+39, r24	; 0x27
    _delay_ms(50);
    send_a_command(0b00001111);
    1e6e:	8f e0       	ldi	r24, 0x0F	; 15
    1e70:	0e 94 06 11 	call	0x220c	; 0x220c <send_a_command>
    1e74:	80 e0       	ldi	r24, 0x00	; 0
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	a8 e4       	ldi	r26, 0x48	; 72
    1e7a:	b2 e4       	ldi	r27, 0x42	; 66
    1e7c:	8b a3       	std	Y+35, r24	; 0x23
    1e7e:	9c a3       	std	Y+36, r25	; 0x24
    1e80:	ad a3       	std	Y+37, r26	; 0x25
    1e82:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e84:	6b a1       	ldd	r22, Y+35	; 0x23
    1e86:	7c a1       	ldd	r23, Y+36	; 0x24
    1e88:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	53 e4       	ldi	r21, 0x43	; 67
    1e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e9e:	98 a3       	std	Y+32, r25	; 0x20
    1ea0:	a9 a3       	std	Y+33, r26	; 0x21
    1ea2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1ea4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ea6:	78 a1       	ldd	r23, Y+32	; 0x20
    1ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	40 e8       	ldi	r20, 0x80	; 128
    1eb2:	5f e3       	ldi	r21, 0x3F	; 63
    1eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1eb8:	88 23       	and	r24, r24
    1eba:	2c f4       	brge	.+10     	; 0x1ec6 <main+0x3fc>
		__ticks = 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
    1ebe:	90 e0       	ldi	r25, 0x00	; 0
    1ec0:	9e 8f       	std	Y+30, r25	; 0x1e
    1ec2:	8d 8f       	std	Y+29, r24	; 0x1d
    1ec4:	3f c0       	rjmp	.+126    	; 0x1f44 <main+0x47a>
	else if (__tmp > 65535)
    1ec6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1ec8:	78 a1       	ldd	r23, Y+32	; 0x20
    1eca:	89 a1       	ldd	r24, Y+33	; 0x21
    1ecc:	9a a1       	ldd	r25, Y+34	; 0x22
    1ece:	20 e0       	ldi	r18, 0x00	; 0
    1ed0:	3f ef       	ldi	r19, 0xFF	; 255
    1ed2:	4f e7       	ldi	r20, 0x7F	; 127
    1ed4:	57 e4       	ldi	r21, 0x47	; 71
    1ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eda:	18 16       	cp	r1, r24
    1edc:	4c f5       	brge	.+82     	; 0x1f30 <main+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ede:	6b a1       	ldd	r22, Y+35	; 0x23
    1ee0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ee2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee6:	20 e0       	ldi	r18, 0x00	; 0
    1ee8:	30 e0       	ldi	r19, 0x00	; 0
    1eea:	40 e2       	ldi	r20, 0x20	; 32
    1eec:	51 e4       	ldi	r21, 0x41	; 65
    1eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ef2:	dc 01       	movw	r26, r24
    1ef4:	cb 01       	movw	r24, r22
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	cd 01       	movw	r24, r26
    1efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1efe:	dc 01       	movw	r26, r24
    1f00:	cb 01       	movw	r24, r22
    1f02:	9e 8f       	std	Y+30, r25	; 0x1e
    1f04:	8d 8f       	std	Y+29, r24	; 0x1d
    1f06:	0f c0       	rjmp	.+30     	; 0x1f26 <main+0x45c>
    1f08:	89 e1       	ldi	r24, 0x19	; 25
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	9c 8f       	std	Y+28, r25	; 0x1c
    1f0e:	8b 8f       	std	Y+27, r24	; 0x1b
    1f10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <main+0x44a>
    1f18:	9c 8f       	std	Y+28, r25	; 0x1c
    1f1a:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f20:	01 97       	sbiw	r24, 0x01	; 1
    1f22:	9e 8f       	std	Y+30, r25	; 0x1e
    1f24:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f26:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f28:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f2a:	00 97       	sbiw	r24, 0x00	; 0
    1f2c:	69 f7       	brne	.-38     	; 0x1f08 <main+0x43e>
    1f2e:	14 c0       	rjmp	.+40     	; 0x1f58 <main+0x48e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f30:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1f32:	78 a1       	ldd	r23, Y+32	; 0x20
    1f34:	89 a1       	ldd	r24, Y+33	; 0x21
    1f36:	9a a1       	ldd	r25, Y+34	; 0x22
    1f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	9e 8f       	std	Y+30, r25	; 0x1e
    1f42:	8d 8f       	std	Y+29, r24	; 0x1d
    1f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f48:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4a:	89 8f       	std	Y+25, r24	; 0x19
    1f4c:	89 8d       	ldd	r24, Y+25	; 0x19
    1f4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <main+0x486>
    1f54:	9a 8f       	std	Y+26, r25	; 0x1a
    1f56:	89 8f       	std	Y+25, r24	; 0x19
    _delay_ms(50);

    sei();
    1f58:	78 94       	sei

    while(1)
    {
        PORTD|=(1<<PIND0);
    1f5a:	a2 e3       	ldi	r26, 0x32	; 50
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e2 e3       	ldi	r30, 0x32	; 50
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	81 60       	ori	r24, 0x01	; 1
    1f66:	8c 93       	st	X, r24
    1f68:	80 e0       	ldi	r24, 0x00	; 0
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	a0 e7       	ldi	r26, 0x70	; 112
    1f6e:	b1 e4       	ldi	r27, 0x41	; 65
    1f70:	8d 8b       	std	Y+21, r24	; 0x15
    1f72:	9e 8b       	std	Y+22, r25	; 0x16
    1f74:	af 8b       	std	Y+23, r26	; 0x17
    1f76:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f78:	6d 89       	ldd	r22, Y+21	; 0x15
    1f7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f80:	2b ea       	ldi	r18, 0xAB	; 171
    1f82:	3a ea       	ldi	r19, 0xAA	; 170
    1f84:	4a ea       	ldi	r20, 0xAA	; 170
    1f86:	5e e3       	ldi	r21, 0x3E	; 62
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	89 8b       	std	Y+17, r24	; 0x11
    1f92:	9a 8b       	std	Y+18, r25	; 0x12
    1f94:	ab 8b       	std	Y+19, r26	; 0x13
    1f96:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1f98:	69 89       	ldd	r22, Y+17	; 0x11
    1f9a:	7a 89       	ldd	r23, Y+18	; 0x12
    1f9c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9e:	9c 89       	ldd	r25, Y+20	; 0x14
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e8       	ldi	r20, 0x80	; 128
    1fa6:	5f e3       	ldi	r21, 0x3F	; 63
    1fa8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fac:	88 23       	and	r24, r24
    1fae:	1c f4       	brge	.+6      	; 0x1fb6 <main+0x4ec>
		__ticks = 1;
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	88 8b       	std	Y+16, r24	; 0x10
    1fb4:	91 c0       	rjmp	.+290    	; 0x20d8 <main+0x60e>
	else if (__tmp > 255)
    1fb6:	69 89       	ldd	r22, Y+17	; 0x11
    1fb8:	7a 89       	ldd	r23, Y+18	; 0x12
    1fba:	8b 89       	ldd	r24, Y+19	; 0x13
    1fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	4f e7       	ldi	r20, 0x7F	; 127
    1fc4:	53 e4       	ldi	r21, 0x43	; 67
    1fc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fca:	18 16       	cp	r1, r24
    1fcc:	0c f0       	brlt	.+2      	; 0x1fd0 <main+0x506>
    1fce:	7b c0       	rjmp	.+246    	; 0x20c6 <main+0x5fc>
	{
		_delay_ms(__us / 1000.0);
    1fd0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fd2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fd4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fd6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	54 e4       	ldi	r21, 0x44	; 68
    1fe0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	8c 87       	std	Y+12, r24	; 0x0c
    1fea:	9d 87       	std	Y+13, r25	; 0x0d
    1fec:	ae 87       	std	Y+14, r26	; 0x0e
    1fee:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ff2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ff4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	4a e7       	ldi	r20, 0x7A	; 122
    1ffe:	53 e4       	ldi	r21, 0x43	; 67
    2000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2004:	dc 01       	movw	r26, r24
    2006:	cb 01       	movw	r24, r22
    2008:	88 87       	std	Y+8, r24	; 0x08
    200a:	99 87       	std	Y+9, r25	; 0x09
    200c:	aa 87       	std	Y+10, r26	; 0x0a
    200e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2010:	68 85       	ldd	r22, Y+8	; 0x08
    2012:	79 85       	ldd	r23, Y+9	; 0x09
    2014:	8a 85       	ldd	r24, Y+10	; 0x0a
    2016:	9b 85       	ldd	r25, Y+11	; 0x0b
    2018:	20 e0       	ldi	r18, 0x00	; 0
    201a:	30 e0       	ldi	r19, 0x00	; 0
    201c:	40 e8       	ldi	r20, 0x80	; 128
    201e:	5f e3       	ldi	r21, 0x3F	; 63
    2020:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2024:	88 23       	and	r24, r24
    2026:	2c f4       	brge	.+10     	; 0x2032 <main+0x568>
		__ticks = 1;
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	9f 83       	std	Y+7, r25	; 0x07
    202e:	8e 83       	std	Y+6, r24	; 0x06
    2030:	3f c0       	rjmp	.+126    	; 0x20b0 <main+0x5e6>
	else if (__tmp > 65535)
    2032:	68 85       	ldd	r22, Y+8	; 0x08
    2034:	79 85       	ldd	r23, Y+9	; 0x09
    2036:	8a 85       	ldd	r24, Y+10	; 0x0a
    2038:	9b 85       	ldd	r25, Y+11	; 0x0b
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	3f ef       	ldi	r19, 0xFF	; 255
    203e:	4f e7       	ldi	r20, 0x7F	; 127
    2040:	57 e4       	ldi	r21, 0x47	; 71
    2042:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2046:	18 16       	cp	r1, r24
    2048:	4c f5       	brge	.+82     	; 0x209c <main+0x5d2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204a:	6c 85       	ldd	r22, Y+12	; 0x0c
    204c:	7d 85       	ldd	r23, Y+13	; 0x0d
    204e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2050:	9f 85       	ldd	r25, Y+15	; 0x0f
    2052:	20 e0       	ldi	r18, 0x00	; 0
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	40 e2       	ldi	r20, 0x20	; 32
    2058:	51 e4       	ldi	r21, 0x41	; 65
    205a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	bc 01       	movw	r22, r24
    2064:	cd 01       	movw	r24, r26
    2066:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	9f 83       	std	Y+7, r25	; 0x07
    2070:	8e 83       	std	Y+6, r24	; 0x06
    2072:	0f c0       	rjmp	.+30     	; 0x2092 <main+0x5c8>
    2074:	89 e1       	ldi	r24, 0x19	; 25
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	9d 83       	std	Y+5, r25	; 0x05
    207a:	8c 83       	std	Y+4, r24	; 0x04
    207c:	8c 81       	ldd	r24, Y+4	; 0x04
    207e:	9d 81       	ldd	r25, Y+5	; 0x05
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	f1 f7       	brne	.-4      	; 0x2080 <main+0x5b6>
    2084:	9d 83       	std	Y+5, r25	; 0x05
    2086:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2088:	8e 81       	ldd	r24, Y+6	; 0x06
    208a:	9f 81       	ldd	r25, Y+7	; 0x07
    208c:	01 97       	sbiw	r24, 0x01	; 1
    208e:	9f 83       	std	Y+7, r25	; 0x07
    2090:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2092:	8e 81       	ldd	r24, Y+6	; 0x06
    2094:	9f 81       	ldd	r25, Y+7	; 0x07
    2096:	00 97       	sbiw	r24, 0x00	; 0
    2098:	69 f7       	brne	.-38     	; 0x2074 <main+0x5aa>
    209a:	24 c0       	rjmp	.+72     	; 0x20e4 <main+0x61a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209c:	68 85       	ldd	r22, Y+8	; 0x08
    209e:	79 85       	ldd	r23, Y+9	; 0x09
    20a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    20a2:	9b 85       	ldd	r25, Y+11	; 0x0b
    20a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	9f 83       	std	Y+7, r25	; 0x07
    20ae:	8e 83       	std	Y+6, r24	; 0x06
    20b0:	8e 81       	ldd	r24, Y+6	; 0x06
    20b2:	9f 81       	ldd	r25, Y+7	; 0x07
    20b4:	9b 83       	std	Y+3, r25	; 0x03
    20b6:	8a 83       	std	Y+2, r24	; 0x02
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <main+0x5f2>
    20c0:	9b 83       	std	Y+3, r25	; 0x03
    20c2:	8a 83       	std	Y+2, r24	; 0x02
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <main+0x61a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20c6:	69 89       	ldd	r22, Y+17	; 0x11
    20c8:	7a 89       	ldd	r23, Y+18	; 0x12
    20ca:	8b 89       	ldd	r24, Y+19	; 0x13
    20cc:	9c 89       	ldd	r25, Y+20	; 0x14
    20ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	88 8b       	std	Y+16, r24	; 0x10
    20d8:	88 89       	ldd	r24, Y+16	; 0x10
    20da:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    20dc:	89 81       	ldd	r24, Y+1	; 0x01
    20de:	8a 95       	dec	r24
    20e0:	f1 f7       	brne	.-4      	; 0x20de <main+0x614>
    20e2:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(15);
        PORTD &=~(1<<PIND0);
    20e4:	a2 e3       	ldi	r26, 0x32	; 50
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e2 e3       	ldi	r30, 0x32	; 50
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8e 7f       	andi	r24, 0xFE	; 254
    20f0:	8c 93       	st	X, r24

        COUNTA = (pulse/580)+7;
    20f2:	80 91 88 00 	lds	r24, 0x0088
    20f6:	90 91 89 00 	lds	r25, 0x0089
    20fa:	24 e4       	ldi	r18, 0x44	; 68
    20fc:	32 e0       	ldi	r19, 0x02	; 2
    20fe:	b9 01       	movw	r22, r18
    2100:	0e 94 67 12 	call	0x24ce	; 0x24ce <__divmodhi4>
    2104:	cb 01       	movw	r24, r22
    2106:	fe 01       	movw	r30, r28
    2108:	ef 5a       	subi	r30, 0xAF	; 175
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	07 96       	adiw	r24, 0x07	; 7
    210e:	91 83       	std	Z+1, r25	; 0x01
    2110:	80 83       	st	Z, r24
        send_a_string ("CIRCUIT DIGEST");
    2112:	80 e6       	ldi	r24, 0x60	; 96
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	0e 94 4a 12 	call	0x2494	; 0x2494 <send_a_string>
        send_a_command(0x80 + 0x40 + 0);
    211a:	80 ec       	ldi	r24, 0xC0	; 192
    211c:	0e 94 06 11 	call	0x220c	; 0x220c <send_a_command>
        send_a_string ("DISTANCE=");
    2120:	8f e6       	ldi	r24, 0x6F	; 111
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	0e 94 4a 12 	call	0x2494	; 0x2494 <send_a_string>
        itoa(COUNTA,SHOWA,10);
    2128:	fe 01       	movw	r30, r28
    212a:	ef 5a       	subi	r30, 0xAF	; 175
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	9e 01       	movw	r18, r28
    2134:	2d 5a       	subi	r18, 0xAD	; 173
    2136:	3f 4f       	sbci	r19, 0xFF	; 255
    2138:	b9 01       	movw	r22, r18
    213a:	4a e0       	ldi	r20, 0x0A	; 10
    213c:	50 e0       	ldi	r21, 0x00	; 0
    213e:	0e 94 02 13 	call	0x2604	; 0x2604 <itoa>
        send_a_string(SHOWA);
    2142:	ce 01       	movw	r24, r28
    2144:	8d 5a       	subi	r24, 0xAD	; 173
    2146:	9f 4f       	sbci	r25, 0xFF	; 255
    2148:	0e 94 4a 12 	call	0x2494	; 0x2494 <send_a_string>
        send_a_string ("cm    ");
    214c:	89 e7       	ldi	r24, 0x79	; 121
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	0e 94 4a 12 	call	0x2494	; 0x2494 <send_a_string>
        send_a_command(0x80 + 0);
    2154:	80 e8       	ldi	r24, 0x80	; 128
    2156:	0e 94 06 11 	call	0x220c	; 0x220c <send_a_command>
    215a:	ff ce       	rjmp	.-514    	; 0x1f5a <main+0x490>

0000215c <__vector_1>:

    }
}

ISR(INT0_vect)
{
    215c:	1f 92       	push	r1
    215e:	0f 92       	push	r0
    2160:	0f b6       	in	r0, 0x3f	; 63
    2162:	0f 92       	push	r0
    2164:	11 24       	eor	r1, r1
    2166:	8f 93       	push	r24
    2168:	9f 93       	push	r25
    216a:	af 93       	push	r26
    216c:	bf 93       	push	r27
    216e:	ef 93       	push	r30
    2170:	ff 93       	push	r31
    2172:	df 93       	push	r29
    2174:	cf 93       	push	r28
    2176:	cd b7       	in	r28, 0x3d	; 61
    2178:	de b7       	in	r29, 0x3e	; 62
	 if (i==0)
    217a:	80 91 8a 00 	lds	r24, 0x008A
    217e:	90 91 8b 00 	lds	r25, 0x008B
    2182:	00 97       	sbiw	r24, 0x00	; 0
    2184:	a9 f4       	brne	.+42     	; 0x21b0 <__vector_1+0x54>
	    {
	        TCCR1B|=(1<<CS10);
    2186:	ae e4       	ldi	r26, 0x4E	; 78
    2188:	b0 e0       	ldi	r27, 0x00	; 0
    218a:	ee e4       	ldi	r30, 0x4E	; 78
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	80 81       	ld	r24, Z
    2190:	81 60       	ori	r24, 0x01	; 1
    2192:	8c 93       	st	X, r24
	        i=1;
    2194:	81 e0       	ldi	r24, 0x01	; 1
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	90 93 8b 00 	sts	0x008B, r25
    219c:	80 93 8a 00 	sts	0x008A, r24
	        Clr_Bit(MCUCSR,ISC2);  //falling
    21a0:	a4 e5       	ldi	r26, 0x54	; 84
    21a2:	b0 e0       	ldi	r27, 0x00	; 0
    21a4:	e4 e5       	ldi	r30, 0x54	; 84
    21a6:	f0 e0       	ldi	r31, 0x00	; 0
    21a8:	80 81       	ld	r24, Z
    21aa:	8f 7b       	andi	r24, 0xBF	; 191
    21ac:	8c 93       	st	X, r24
    21ae:	21 c0       	rjmp	.+66     	; 0x21f2 <__vector_1+0x96>
	    }
	 else if (i==1)
    21b0:	80 91 8a 00 	lds	r24, 0x008A
    21b4:	90 91 8b 00 	lds	r25, 0x008B
    21b8:	81 30       	cpi	r24, 0x01	; 1
    21ba:	91 05       	cpc	r25, r1
    21bc:	d1 f4       	brne	.+52     	; 0x21f2 <__vector_1+0x96>
    {
        TCCR1B=0;
    21be:	ee e4       	ldi	r30, 0x4E	; 78
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	10 82       	st	Z, r1
        pulse=TCNT1;
    21c4:	ec e4       	ldi	r30, 0x4C	; 76
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	91 81       	ldd	r25, Z+1	; 0x01
    21cc:	90 93 89 00 	sts	0x0089, r25
    21d0:	80 93 88 00 	sts	0x0088, r24
        TCNT1=0;
    21d4:	ec e4       	ldi	r30, 0x4C	; 76
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	11 82       	std	Z+1, r1	; 0x01
    21da:	10 82       	st	Z, r1
        i=0;
    21dc:	10 92 8b 00 	sts	0x008B, r1
    21e0:	10 92 8a 00 	sts	0x008A, r1
        Set_Bit(MCUCSR,ISC2);  //rising
    21e4:	a4 e5       	ldi	r26, 0x54	; 84
    21e6:	b0 e0       	ldi	r27, 0x00	; 0
    21e8:	e4 e5       	ldi	r30, 0x54	; 84
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	80 64       	ori	r24, 0x40	; 64
    21f0:	8c 93       	st	X, r24
    }
}
    21f2:	cf 91       	pop	r28
    21f4:	df 91       	pop	r29
    21f6:	ff 91       	pop	r31
    21f8:	ef 91       	pop	r30
    21fa:	bf 91       	pop	r27
    21fc:	af 91       	pop	r26
    21fe:	9f 91       	pop	r25
    2200:	8f 91       	pop	r24
    2202:	0f 90       	pop	r0
    2204:	0f be       	out	0x3f, r0	; 63
    2206:	0f 90       	pop	r0
    2208:	1f 90       	pop	r1
    220a:	18 95       	reti

0000220c <send_a_command>:

void send_a_command(unsigned char command)
{
    220c:	df 93       	push	r29
    220e:	cf 93       	push	r28
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	2f 97       	sbiw	r28, 0x0f	; 15
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	8f 87       	std	Y+15, r24	; 0x0f
    PORTB = command;
    2222:	e8 e3       	ldi	r30, 0x38	; 56
    2224:	f0 e0       	ldi	r31, 0x00	; 0
    2226:	8f 85       	ldd	r24, Y+15	; 0x0f
    2228:	80 83       	st	Z, r24
    PORTD &= ~ (1<<registerselection);
    222a:	a2 e3       	ldi	r26, 0x32	; 50
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e2 e3       	ldi	r30, 0x32	; 50
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	80 81       	ld	r24, Z
    2234:	8f 7b       	andi	r24, 0xBF	; 191
    2236:	8c 93       	st	X, r24
    PORTD |= 1<<enable;
    2238:	a2 e3       	ldi	r26, 0x32	; 50
    223a:	b0 e0       	ldi	r27, 0x00	; 0
    223c:	e2 e3       	ldi	r30, 0x32	; 50
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	80 81       	ld	r24, Z
    2242:	80 62       	ori	r24, 0x20	; 32
    2244:	8c 93       	st	X, r24
    2246:	80 e0       	ldi	r24, 0x00	; 0
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	a0 e0       	ldi	r26, 0x00	; 0
    224c:	b1 e4       	ldi	r27, 0x41	; 65
    224e:	8b 87       	std	Y+11, r24	; 0x0b
    2250:	9c 87       	std	Y+12, r25	; 0x0c
    2252:	ad 87       	std	Y+13, r26	; 0x0d
    2254:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2256:	6b 85       	ldd	r22, Y+11	; 0x0b
    2258:	7c 85       	ldd	r23, Y+12	; 0x0c
    225a:	8d 85       	ldd	r24, Y+13	; 0x0d
    225c:	9e 85       	ldd	r25, Y+14	; 0x0e
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	4a e7       	ldi	r20, 0x7A	; 122
    2264:	53 e4       	ldi	r21, 0x43	; 67
    2266:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226a:	dc 01       	movw	r26, r24
    226c:	cb 01       	movw	r24, r22
    226e:	8f 83       	std	Y+7, r24	; 0x07
    2270:	98 87       	std	Y+8, r25	; 0x08
    2272:	a9 87       	std	Y+9, r26	; 0x09
    2274:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2276:	6f 81       	ldd	r22, Y+7	; 0x07
    2278:	78 85       	ldd	r23, Y+8	; 0x08
    227a:	89 85       	ldd	r24, Y+9	; 0x09
    227c:	9a 85       	ldd	r25, Y+10	; 0x0a
    227e:	20 e0       	ldi	r18, 0x00	; 0
    2280:	30 e0       	ldi	r19, 0x00	; 0
    2282:	40 e8       	ldi	r20, 0x80	; 128
    2284:	5f e3       	ldi	r21, 0x3F	; 63
    2286:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    228a:	88 23       	and	r24, r24
    228c:	2c f4       	brge	.+10     	; 0x2298 <send_a_command+0x8c>
		__ticks = 1;
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	9e 83       	std	Y+6, r25	; 0x06
    2294:	8d 83       	std	Y+5, r24	; 0x05
    2296:	3f c0       	rjmp	.+126    	; 0x2316 <send_a_command+0x10a>
	else if (__tmp > 65535)
    2298:	6f 81       	ldd	r22, Y+7	; 0x07
    229a:	78 85       	ldd	r23, Y+8	; 0x08
    229c:	89 85       	ldd	r24, Y+9	; 0x09
    229e:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	3f ef       	ldi	r19, 0xFF	; 255
    22a4:	4f e7       	ldi	r20, 0x7F	; 127
    22a6:	57 e4       	ldi	r21, 0x47	; 71
    22a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22ac:	18 16       	cp	r1, r24
    22ae:	4c f5       	brge	.+82     	; 0x2302 <send_a_command+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e2       	ldi	r20, 0x20	; 32
    22be:	51 e4       	ldi	r21, 0x41	; 65
    22c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c4:	dc 01       	movw	r26, r24
    22c6:	cb 01       	movw	r24, r22
    22c8:	bc 01       	movw	r22, r24
    22ca:	cd 01       	movw	r24, r26
    22cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d0:	dc 01       	movw	r26, r24
    22d2:	cb 01       	movw	r24, r22
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	0f c0       	rjmp	.+30     	; 0x22f8 <send_a_command+0xec>
    22da:	89 e1       	ldi	r24, 0x19	; 25
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	9c 83       	std	Y+4, r25	; 0x04
    22e0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22e2:	8b 81       	ldd	r24, Y+3	; 0x03
    22e4:	9c 81       	ldd	r25, Y+4	; 0x04
    22e6:	01 97       	sbiw	r24, 0x01	; 1
    22e8:	f1 f7       	brne	.-4      	; 0x22e6 <send_a_command+0xda>
    22ea:	9c 83       	std	Y+4, r25	; 0x04
    22ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ee:	8d 81       	ldd	r24, Y+5	; 0x05
    22f0:	9e 81       	ldd	r25, Y+6	; 0x06
    22f2:	01 97       	sbiw	r24, 0x01	; 1
    22f4:	9e 83       	std	Y+6, r25	; 0x06
    22f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f8:	8d 81       	ldd	r24, Y+5	; 0x05
    22fa:	9e 81       	ldd	r25, Y+6	; 0x06
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	69 f7       	brne	.-38     	; 0x22da <send_a_command+0xce>
    2300:	14 c0       	rjmp	.+40     	; 0x232a <send_a_command+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2302:	6f 81       	ldd	r22, Y+7	; 0x07
    2304:	78 85       	ldd	r23, Y+8	; 0x08
    2306:	89 85       	ldd	r24, Y+9	; 0x09
    2308:	9a 85       	ldd	r25, Y+10	; 0x0a
    230a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230e:	dc 01       	movw	r26, r24
    2310:	cb 01       	movw	r24, r22
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	9a 83       	std	Y+2, r25	; 0x02
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	89 81       	ldd	r24, Y+1	; 0x01
    2320:	9a 81       	ldd	r25, Y+2	; 0x02
    2322:	01 97       	sbiw	r24, 0x01	; 1
    2324:	f1 f7       	brne	.-4      	; 0x2322 <send_a_command+0x116>
    2326:	9a 83       	std	Y+2, r25	; 0x02
    2328:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(8);
    PORTD &= ~1<<enable;
    232a:	a2 e3       	ldi	r26, 0x32	; 50
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e2 e3       	ldi	r30, 0x32	; 50
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	80 7c       	andi	r24, 0xC0	; 192
    2336:	8c 93       	st	X, r24
    PORTB = 0;
    2338:	e8 e3       	ldi	r30, 0x38	; 56
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	10 82       	st	Z, r1
}
    233e:	2f 96       	adiw	r28, 0x0f	; 15
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	cf 91       	pop	r28
    234c:	df 91       	pop	r29
    234e:	08 95       	ret

00002350 <send_a_character>:

void send_a_character(unsigned char character)
{
    2350:	df 93       	push	r29
    2352:	cf 93       	push	r28
    2354:	cd b7       	in	r28, 0x3d	; 61
    2356:	de b7       	in	r29, 0x3e	; 62
    2358:	2f 97       	sbiw	r28, 0x0f	; 15
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	8f 87       	std	Y+15, r24	; 0x0f
    PORTB = character;
    2366:	e8 e3       	ldi	r30, 0x38	; 56
    2368:	f0 e0       	ldi	r31, 0x00	; 0
    236a:	8f 85       	ldd	r24, Y+15	; 0x0f
    236c:	80 83       	st	Z, r24
    PORTD |= 1<<registerselection;
    236e:	a2 e3       	ldi	r26, 0x32	; 50
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e2 e3       	ldi	r30, 0x32	; 50
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	80 64       	ori	r24, 0x40	; 64
    237a:	8c 93       	st	X, r24
    PORTD |= 1<<enable;
    237c:	a2 e3       	ldi	r26, 0x32	; 50
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e2 e3       	ldi	r30, 0x32	; 50
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	80 62       	ori	r24, 0x20	; 32
    2388:	8c 93       	st	X, r24
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e0       	ldi	r26, 0x00	; 0
    2390:	b1 e4       	ldi	r27, 0x41	; 65
    2392:	8b 87       	std	Y+11, r24	; 0x0b
    2394:	9c 87       	std	Y+12, r25	; 0x0c
    2396:	ad 87       	std	Y+13, r26	; 0x0d
    2398:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	6b 85       	ldd	r22, Y+11	; 0x0b
    239c:	7c 85       	ldd	r23, Y+12	; 0x0c
    239e:	8d 85       	ldd	r24, Y+13	; 0x0d
    23a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a e7       	ldi	r20, 0x7A	; 122
    23a8:	53 e4       	ldi	r21, 0x43	; 67
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	8f 83       	std	Y+7, r24	; 0x07
    23b4:	98 87       	std	Y+8, r25	; 0x08
    23b6:	a9 87       	std	Y+9, r26	; 0x09
    23b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23ba:	6f 81       	ldd	r22, Y+7	; 0x07
    23bc:	78 85       	ldd	r23, Y+8	; 0x08
    23be:	89 85       	ldd	r24, Y+9	; 0x09
    23c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e8       	ldi	r20, 0x80	; 128
    23c8:	5f e3       	ldi	r21, 0x3F	; 63
    23ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23ce:	88 23       	and	r24, r24
    23d0:	2c f4       	brge	.+10     	; 0x23dc <send_a_character+0x8c>
		__ticks = 1;
    23d2:	81 e0       	ldi	r24, 0x01	; 1
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	9e 83       	std	Y+6, r25	; 0x06
    23d8:	8d 83       	std	Y+5, r24	; 0x05
    23da:	3f c0       	rjmp	.+126    	; 0x245a <send_a_character+0x10a>
	else if (__tmp > 65535)
    23dc:	6f 81       	ldd	r22, Y+7	; 0x07
    23de:	78 85       	ldd	r23, Y+8	; 0x08
    23e0:	89 85       	ldd	r24, Y+9	; 0x09
    23e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	3f ef       	ldi	r19, 0xFF	; 255
    23e8:	4f e7       	ldi	r20, 0x7F	; 127
    23ea:	57 e4       	ldi	r21, 0x47	; 71
    23ec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23f0:	18 16       	cp	r1, r24
    23f2:	4c f5       	brge	.+82     	; 0x2446 <send_a_character+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    23f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    23fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    23fc:	20 e0       	ldi	r18, 0x00	; 0
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e2       	ldi	r20, 0x20	; 32
    2402:	51 e4       	ldi	r21, 0x41	; 65
    2404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2408:	dc 01       	movw	r26, r24
    240a:	cb 01       	movw	r24, r22
    240c:	bc 01       	movw	r22, r24
    240e:	cd 01       	movw	r24, r26
    2410:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2414:	dc 01       	movw	r26, r24
    2416:	cb 01       	movw	r24, r22
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	0f c0       	rjmp	.+30     	; 0x243c <send_a_character+0xec>
    241e:	89 e1       	ldi	r24, 0x19	; 25
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	9c 83       	std	Y+4, r25	; 0x04
    2424:	8b 83       	std	Y+3, r24	; 0x03
    2426:	8b 81       	ldd	r24, Y+3	; 0x03
    2428:	9c 81       	ldd	r25, Y+4	; 0x04
    242a:	01 97       	sbiw	r24, 0x01	; 1
    242c:	f1 f7       	brne	.-4      	; 0x242a <send_a_character+0xda>
    242e:	9c 83       	std	Y+4, r25	; 0x04
    2430:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2432:	8d 81       	ldd	r24, Y+5	; 0x05
    2434:	9e 81       	ldd	r25, Y+6	; 0x06
    2436:	01 97       	sbiw	r24, 0x01	; 1
    2438:	9e 83       	std	Y+6, r25	; 0x06
    243a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243c:	8d 81       	ldd	r24, Y+5	; 0x05
    243e:	9e 81       	ldd	r25, Y+6	; 0x06
    2440:	00 97       	sbiw	r24, 0x00	; 0
    2442:	69 f7       	brne	.-38     	; 0x241e <send_a_character+0xce>
    2444:	14 c0       	rjmp	.+40     	; 0x246e <send_a_character+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2446:	6f 81       	ldd	r22, Y+7	; 0x07
    2448:	78 85       	ldd	r23, Y+8	; 0x08
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	9a 85       	ldd	r25, Y+10	; 0x0a
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	8d 81       	ldd	r24, Y+5	; 0x05
    245c:	9e 81       	ldd	r25, Y+6	; 0x06
    245e:	9a 83       	std	Y+2, r25	; 0x02
    2460:	89 83       	std	Y+1, r24	; 0x01
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	01 97       	sbiw	r24, 0x01	; 1
    2468:	f1 f7       	brne	.-4      	; 0x2466 <send_a_character+0x116>
    246a:	9a 83       	std	Y+2, r25	; 0x02
    246c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(8);
    PORTD &= ~1<<enable;
    246e:	a2 e3       	ldi	r26, 0x32	; 50
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e2 e3       	ldi	r30, 0x32	; 50
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	80 7c       	andi	r24, 0xC0	; 192
    247a:	8c 93       	st	X, r24
    PORTB = 0;
    247c:	e8 e3       	ldi	r30, 0x38	; 56
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	10 82       	st	Z, r1
}
    2482:	2f 96       	adiw	r28, 0x0f	; 15
    2484:	0f b6       	in	r0, 0x3f	; 63
    2486:	f8 94       	cli
    2488:	de bf       	out	0x3e, r29	; 62
    248a:	0f be       	out	0x3f, r0	; 63
    248c:	cd bf       	out	0x3d, r28	; 61
    248e:	cf 91       	pop	r28
    2490:	df 91       	pop	r29
    2492:	08 95       	ret

00002494 <send_a_string>:
void send_a_string(char *string_of_characters)
{
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <send_a_string+0x6>
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	9a 83       	std	Y+2, r25	; 0x02
    24a0:	89 83       	std	Y+1, r24	; 0x01
    24a2:	0b c0       	rjmp	.+22     	; 0x24ba <send_a_string+0x26>
    while(*string_of_characters > 0)
    {
        send_a_character(*string_of_characters++);
    24a4:	e9 81       	ldd	r30, Y+1	; 0x01
    24a6:	fa 81       	ldd	r31, Y+2	; 0x02
    24a8:	20 81       	ld	r18, Z
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	01 96       	adiw	r24, 0x01	; 1
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	82 2f       	mov	r24, r18
    24b6:	0e 94 a8 11 	call	0x2350	; 0x2350 <send_a_character>
    PORTD &= ~1<<enable;
    PORTB = 0;
}
void send_a_string(char *string_of_characters)
{
    while(*string_of_characters > 0)
    24ba:	e9 81       	ldd	r30, Y+1	; 0x01
    24bc:	fa 81       	ldd	r31, Y+2	; 0x02
    24be:	80 81       	ld	r24, Z
    24c0:	88 23       	and	r24, r24
    24c2:	81 f7       	brne	.-32     	; 0x24a4 <send_a_string+0x10>
    {
        send_a_character(*string_of_characters++);
    }
}
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	cf 91       	pop	r28
    24ca:	df 91       	pop	r29
    24cc:	08 95       	ret

000024ce <__divmodhi4>:
    24ce:	97 fb       	bst	r25, 7
    24d0:	09 2e       	mov	r0, r25
    24d2:	07 26       	eor	r0, r23
    24d4:	0a d0       	rcall	.+20     	; 0x24ea <__divmodhi4_neg1>
    24d6:	77 fd       	sbrc	r23, 7
    24d8:	04 d0       	rcall	.+8      	; 0x24e2 <__divmodhi4_neg2>
    24da:	27 d0       	rcall	.+78     	; 0x252a <__udivmodhi4>
    24dc:	06 d0       	rcall	.+12     	; 0x24ea <__divmodhi4_neg1>
    24de:	00 20       	and	r0, r0
    24e0:	1a f4       	brpl	.+6      	; 0x24e8 <__divmodhi4_exit>

000024e2 <__divmodhi4_neg2>:
    24e2:	70 95       	com	r23
    24e4:	61 95       	neg	r22
    24e6:	7f 4f       	sbci	r23, 0xFF	; 255

000024e8 <__divmodhi4_exit>:
    24e8:	08 95       	ret

000024ea <__divmodhi4_neg1>:
    24ea:	f6 f7       	brtc	.-4      	; 0x24e8 <__divmodhi4_exit>
    24ec:	90 95       	com	r25
    24ee:	81 95       	neg	r24
    24f0:	9f 4f       	sbci	r25, 0xFF	; 255
    24f2:	08 95       	ret

000024f4 <__divmodsi4>:
    24f4:	97 fb       	bst	r25, 7
    24f6:	09 2e       	mov	r0, r25
    24f8:	05 26       	eor	r0, r21
    24fa:	0e d0       	rcall	.+28     	; 0x2518 <__divmodsi4_neg1>
    24fc:	57 fd       	sbrc	r21, 7
    24fe:	04 d0       	rcall	.+8      	; 0x2508 <__divmodsi4_neg2>
    2500:	28 d0       	rcall	.+80     	; 0x2552 <__udivmodsi4>
    2502:	0a d0       	rcall	.+20     	; 0x2518 <__divmodsi4_neg1>
    2504:	00 1c       	adc	r0, r0
    2506:	38 f4       	brcc	.+14     	; 0x2516 <__divmodsi4_exit>

00002508 <__divmodsi4_neg2>:
    2508:	50 95       	com	r21
    250a:	40 95       	com	r20
    250c:	30 95       	com	r19
    250e:	21 95       	neg	r18
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	4f 4f       	sbci	r20, 0xFF	; 255
    2514:	5f 4f       	sbci	r21, 0xFF	; 255

00002516 <__divmodsi4_exit>:
    2516:	08 95       	ret

00002518 <__divmodsi4_neg1>:
    2518:	f6 f7       	brtc	.-4      	; 0x2516 <__divmodsi4_exit>
    251a:	90 95       	com	r25
    251c:	80 95       	com	r24
    251e:	70 95       	com	r23
    2520:	61 95       	neg	r22
    2522:	7f 4f       	sbci	r23, 0xFF	; 255
    2524:	8f 4f       	sbci	r24, 0xFF	; 255
    2526:	9f 4f       	sbci	r25, 0xFF	; 255
    2528:	08 95       	ret

0000252a <__udivmodhi4>:
    252a:	aa 1b       	sub	r26, r26
    252c:	bb 1b       	sub	r27, r27
    252e:	51 e1       	ldi	r21, 0x11	; 17
    2530:	07 c0       	rjmp	.+14     	; 0x2540 <__udivmodhi4_ep>

00002532 <__udivmodhi4_loop>:
    2532:	aa 1f       	adc	r26, r26
    2534:	bb 1f       	adc	r27, r27
    2536:	a6 17       	cp	r26, r22
    2538:	b7 07       	cpc	r27, r23
    253a:	10 f0       	brcs	.+4      	; 0x2540 <__udivmodhi4_ep>
    253c:	a6 1b       	sub	r26, r22
    253e:	b7 0b       	sbc	r27, r23

00002540 <__udivmodhi4_ep>:
    2540:	88 1f       	adc	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	5a 95       	dec	r21
    2546:	a9 f7       	brne	.-22     	; 0x2532 <__udivmodhi4_loop>
    2548:	80 95       	com	r24
    254a:	90 95       	com	r25
    254c:	bc 01       	movw	r22, r24
    254e:	cd 01       	movw	r24, r26
    2550:	08 95       	ret

00002552 <__udivmodsi4>:
    2552:	a1 e2       	ldi	r26, 0x21	; 33
    2554:	1a 2e       	mov	r1, r26
    2556:	aa 1b       	sub	r26, r26
    2558:	bb 1b       	sub	r27, r27
    255a:	fd 01       	movw	r30, r26
    255c:	0d c0       	rjmp	.+26     	; 0x2578 <__udivmodsi4_ep>

0000255e <__udivmodsi4_loop>:
    255e:	aa 1f       	adc	r26, r26
    2560:	bb 1f       	adc	r27, r27
    2562:	ee 1f       	adc	r30, r30
    2564:	ff 1f       	adc	r31, r31
    2566:	a2 17       	cp	r26, r18
    2568:	b3 07       	cpc	r27, r19
    256a:	e4 07       	cpc	r30, r20
    256c:	f5 07       	cpc	r31, r21
    256e:	20 f0       	brcs	.+8      	; 0x2578 <__udivmodsi4_ep>
    2570:	a2 1b       	sub	r26, r18
    2572:	b3 0b       	sbc	r27, r19
    2574:	e4 0b       	sbc	r30, r20
    2576:	f5 0b       	sbc	r31, r21

00002578 <__udivmodsi4_ep>:
    2578:	66 1f       	adc	r22, r22
    257a:	77 1f       	adc	r23, r23
    257c:	88 1f       	adc	r24, r24
    257e:	99 1f       	adc	r25, r25
    2580:	1a 94       	dec	r1
    2582:	69 f7       	brne	.-38     	; 0x255e <__udivmodsi4_loop>
    2584:	60 95       	com	r22
    2586:	70 95       	com	r23
    2588:	80 95       	com	r24
    258a:	90 95       	com	r25
    258c:	9b 01       	movw	r18, r22
    258e:	ac 01       	movw	r20, r24
    2590:	bd 01       	movw	r22, r26
    2592:	cf 01       	movw	r24, r30
    2594:	08 95       	ret

00002596 <__prologue_saves__>:
    2596:	2f 92       	push	r2
    2598:	3f 92       	push	r3
    259a:	4f 92       	push	r4
    259c:	5f 92       	push	r5
    259e:	6f 92       	push	r6
    25a0:	7f 92       	push	r7
    25a2:	8f 92       	push	r8
    25a4:	9f 92       	push	r9
    25a6:	af 92       	push	r10
    25a8:	bf 92       	push	r11
    25aa:	cf 92       	push	r12
    25ac:	df 92       	push	r13
    25ae:	ef 92       	push	r14
    25b0:	ff 92       	push	r15
    25b2:	0f 93       	push	r16
    25b4:	1f 93       	push	r17
    25b6:	cf 93       	push	r28
    25b8:	df 93       	push	r29
    25ba:	cd b7       	in	r28, 0x3d	; 61
    25bc:	de b7       	in	r29, 0x3e	; 62
    25be:	ca 1b       	sub	r28, r26
    25c0:	db 0b       	sbc	r29, r27
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	f8 94       	cli
    25c6:	de bf       	out	0x3e, r29	; 62
    25c8:	0f be       	out	0x3f, r0	; 63
    25ca:	cd bf       	out	0x3d, r28	; 61
    25cc:	09 94       	ijmp

000025ce <__epilogue_restores__>:
    25ce:	2a 88       	ldd	r2, Y+18	; 0x12
    25d0:	39 88       	ldd	r3, Y+17	; 0x11
    25d2:	48 88       	ldd	r4, Y+16	; 0x10
    25d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    25d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    25d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    25da:	8c 84       	ldd	r8, Y+12	; 0x0c
    25dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    25de:	aa 84       	ldd	r10, Y+10	; 0x0a
    25e0:	b9 84       	ldd	r11, Y+9	; 0x09
    25e2:	c8 84       	ldd	r12, Y+8	; 0x08
    25e4:	df 80       	ldd	r13, Y+7	; 0x07
    25e6:	ee 80       	ldd	r14, Y+6	; 0x06
    25e8:	fd 80       	ldd	r15, Y+5	; 0x05
    25ea:	0c 81       	ldd	r16, Y+4	; 0x04
    25ec:	1b 81       	ldd	r17, Y+3	; 0x03
    25ee:	aa 81       	ldd	r26, Y+2	; 0x02
    25f0:	b9 81       	ldd	r27, Y+1	; 0x01
    25f2:	ce 0f       	add	r28, r30
    25f4:	d1 1d       	adc	r29, r1
    25f6:	0f b6       	in	r0, 0x3f	; 63
    25f8:	f8 94       	cli
    25fa:	de bf       	out	0x3e, r29	; 62
    25fc:	0f be       	out	0x3f, r0	; 63
    25fe:	cd bf       	out	0x3d, r28	; 61
    2600:	ed 01       	movw	r28, r26
    2602:	08 95       	ret

00002604 <itoa>:
    2604:	fb 01       	movw	r30, r22
    2606:	9f 01       	movw	r18, r30
    2608:	e8 94       	clt
    260a:	42 30       	cpi	r20, 0x02	; 2
    260c:	c4 f0       	brlt	.+48     	; 0x263e <itoa+0x3a>
    260e:	45 32       	cpi	r20, 0x25	; 37
    2610:	b4 f4       	brge	.+44     	; 0x263e <itoa+0x3a>
    2612:	4a 30       	cpi	r20, 0x0A	; 10
    2614:	29 f4       	brne	.+10     	; 0x2620 <itoa+0x1c>
    2616:	97 fb       	bst	r25, 7
    2618:	1e f4       	brtc	.+6      	; 0x2620 <itoa+0x1c>
    261a:	90 95       	com	r25
    261c:	81 95       	neg	r24
    261e:	9f 4f       	sbci	r25, 0xFF	; 255
    2620:	64 2f       	mov	r22, r20
    2622:	77 27       	eor	r23, r23
    2624:	0e 94 95 12 	call	0x252a	; 0x252a <__udivmodhi4>
    2628:	80 5d       	subi	r24, 0xD0	; 208
    262a:	8a 33       	cpi	r24, 0x3A	; 58
    262c:	0c f0       	brlt	.+2      	; 0x2630 <itoa+0x2c>
    262e:	89 5d       	subi	r24, 0xD9	; 217
    2630:	81 93       	st	Z+, r24
    2632:	cb 01       	movw	r24, r22
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	a1 f7       	brne	.-24     	; 0x2620 <itoa+0x1c>
    2638:	16 f4       	brtc	.+4      	; 0x263e <itoa+0x3a>
    263a:	5d e2       	ldi	r21, 0x2D	; 45
    263c:	51 93       	st	Z+, r21
    263e:	10 82       	st	Z, r1
    2640:	c9 01       	movw	r24, r18
    2642:	0c 94 23 13 	jmp	0x2646	; 0x2646 <strrev>

00002646 <strrev>:
    2646:	dc 01       	movw	r26, r24
    2648:	fc 01       	movw	r30, r24
    264a:	67 2f       	mov	r22, r23
    264c:	71 91       	ld	r23, Z+
    264e:	77 23       	and	r23, r23
    2650:	e1 f7       	brne	.-8      	; 0x264a <strrev+0x4>
    2652:	32 97       	sbiw	r30, 0x02	; 2
    2654:	04 c0       	rjmp	.+8      	; 0x265e <strrev+0x18>
    2656:	7c 91       	ld	r23, X
    2658:	6d 93       	st	X+, r22
    265a:	70 83       	st	Z, r23
    265c:	62 91       	ld	r22, -Z
    265e:	ae 17       	cp	r26, r30
    2660:	bf 07       	cpc	r27, r31
    2662:	c8 f3       	brcs	.-14     	; 0x2656 <strrev+0x10>
    2664:	08 95       	ret

00002666 <_exit>:
    2666:	f8 94       	cli

00002668 <__stop_program>:
    2668:	ff cf       	rjmp	.-2      	; 0x2668 <__stop_program>
