
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000099a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000099a  00000a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800064  00800064  00000a32  2**0
                  ALLOC
  3 .stab         00001044  00000000  00000000  00000a34  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000a3d  00000000  00000000  00001a78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a5 36       	cpi	r26, 0x65	; 101
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 03 	call	0x6a8	; 0x6a8 <main>
  8a:	0c 94 cb 04 	jmp	0x996	; 0x996 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
#include "Gpio.h"



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  92:	df 93       	push	r29
  94:	cf 93       	push	r28
  96:	00 d0       	rcall	.+0      	; 0x98 <DIO_WritePin+0x6>
  98:	cd b7       	in	r28, 0x3d	; 61
  9a:	de b7       	in	r29, 0x3e	; 62
  9c:	89 83       	std	Y+1, r24	; 0x01
  9e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==LOW)
  a0:	8a 81       	ldd	r24, Y+2	; 0x02
  a2:	88 23       	and	r24, r24
  a4:	09 f0       	breq	.+2      	; 0xa8 <DIO_WritePin+0x16>
  a6:	74 c0       	rjmp	.+232    	; 0x190 <DIO_WritePin+0xfe>
	{
		if((PinNum>=0)&&(PinNum<=7))   //PORT A
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	88 30       	cpi	r24, 0x08	; 8
  ac:	a8 f4       	brcc	.+42     	; 0xd8 <DIO_WritePin+0x46>
		{
			Clr_Bit(PORTA,PinNum);
  ae:	ab e3       	ldi	r26, 0x3B	; 59
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	eb e3       	ldi	r30, 0x3B	; 59
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	48 2f       	mov	r20, r24
  ba:	89 81       	ldd	r24, Y+1	; 0x01
  bc:	28 2f       	mov	r18, r24
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 2e       	mov	r0, r18
  c6:	02 c0       	rjmp	.+4      	; 0xcc <DIO_WritePin+0x3a>
  c8:	88 0f       	add	r24, r24
  ca:	99 1f       	adc	r25, r25
  cc:	0a 94       	dec	r0
  ce:	e2 f7       	brpl	.-8      	; 0xc8 <DIO_WritePin+0x36>
  d0:	80 95       	com	r24
  d2:	84 23       	and	r24, r20
  d4:	8c 93       	st	X, r24
  d6:	cd c0       	rjmp	.+410    	; 0x272 <DIO_WritePin+0x1e0>
		}

		else if((PinNum>=8)&&(PinNum<=15)) // PORT B
  d8:	89 81       	ldd	r24, Y+1	; 0x01
  da:	88 30       	cpi	r24, 0x08	; 8
  dc:	d8 f0       	brcs	.+54     	; 0x114 <DIO_WritePin+0x82>
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	80 31       	cpi	r24, 0x10	; 16
  e2:	c0 f4       	brcc	.+48     	; 0x114 <DIO_WritePin+0x82>
		{
			Clr_Bit(PORTB,(PinNum-8));
  e4:	a8 e3       	ldi	r26, 0x38	; 56
  e6:	b0 e0       	ldi	r27, 0x00	; 0
  e8:	e8 e3       	ldi	r30, 0x38	; 56
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	80 81       	ld	r24, Z
  ee:	48 2f       	mov	r20, r24
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	88 2f       	mov	r24, r24
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	9c 01       	movw	r18, r24
  f8:	28 50       	subi	r18, 0x08	; 8
  fa:	30 40       	sbci	r19, 0x00	; 0
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 2e       	mov	r0, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_WritePin+0x76>
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	0a 94       	dec	r0
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_WritePin+0x72>
 10c:	80 95       	com	r24
 10e:	84 23       	and	r24, r20
 110:	8c 93       	st	X, r24
 112:	af c0       	rjmp	.+350    	; 0x272 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=16)&&(PinNum<=23)) //PORT C
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	80 31       	cpi	r24, 0x10	; 16
 118:	d8 f0       	brcs	.+54     	; 0x150 <DIO_WritePin+0xbe>
 11a:	89 81       	ldd	r24, Y+1	; 0x01
 11c:	88 31       	cpi	r24, 0x18	; 24
 11e:	c0 f4       	brcc	.+48     	; 0x150 <DIO_WritePin+0xbe>
		{
			Clr_Bit(PORTC,(PinNum-16));
 120:	a5 e3       	ldi	r26, 0x35	; 53
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	e5 e3       	ldi	r30, 0x35	; 53
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	48 2f       	mov	r20, r24
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 2f       	mov	r24, r24
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	9c 01       	movw	r18, r24
 134:	20 51       	subi	r18, 0x10	; 16
 136:	30 40       	sbci	r19, 0x00	; 0
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	02 2e       	mov	r0, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_WritePin+0xb2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	0a 94       	dec	r0
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_WritePin+0xae>
 148:	80 95       	com	r24
 14a:	84 23       	and	r24, r20
 14c:	8c 93       	st	X, r24
 14e:	91 c0       	rjmp	.+290    	; 0x272 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=24)&&(PinNum<=31)) //PORT D
 150:	89 81       	ldd	r24, Y+1	; 0x01
 152:	88 31       	cpi	r24, 0x18	; 24
 154:	08 f4       	brcc	.+2      	; 0x158 <DIO_WritePin+0xc6>
 156:	8d c0       	rjmp	.+282    	; 0x272 <DIO_WritePin+0x1e0>
 158:	89 81       	ldd	r24, Y+1	; 0x01
 15a:	80 32       	cpi	r24, 0x20	; 32
 15c:	08 f0       	brcs	.+2      	; 0x160 <DIO_WritePin+0xce>
 15e:	89 c0       	rjmp	.+274    	; 0x272 <DIO_WritePin+0x1e0>
		{
			Clr_Bit(PORTD,(PinNum-24));
 160:	a2 e3       	ldi	r26, 0x32	; 50
 162:	b0 e0       	ldi	r27, 0x00	; 0
 164:	e2 e3       	ldi	r30, 0x32	; 50
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	48 2f       	mov	r20, r24
 16c:	89 81       	ldd	r24, Y+1	; 0x01
 16e:	88 2f       	mov	r24, r24
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	9c 01       	movw	r18, r24
 174:	28 51       	subi	r18, 0x18	; 24
 176:	30 40       	sbci	r19, 0x00	; 0
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	02 2e       	mov	r0, r18
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_WritePin+0xf2>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	0a 94       	dec	r0
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_WritePin+0xee>
 188:	80 95       	com	r24
 18a:	84 23       	and	r24, r20
 18c:	8c 93       	st	X, r24
 18e:	71 c0       	rjmp	.+226    	; 0x272 <DIO_WritePin+0x1e0>
		}
	}
	else if(PinValue==HIGH)
 190:	8a 81       	ldd	r24, Y+2	; 0x02
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	09 f0       	breq	.+2      	; 0x198 <DIO_WritePin+0x106>
 196:	6d c0       	rjmp	.+218    	; 0x272 <DIO_WritePin+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	88 30       	cpi	r24, 0x08	; 8
 19c:	a0 f4       	brcc	.+40     	; 0x1c6 <DIO_WritePin+0x134>
		{
			Set_Bit(PORTA,PinNum);
 19e:	ab e3       	ldi	r26, 0x3B	; 59
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	eb e3       	ldi	r30, 0x3B	; 59
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	48 2f       	mov	r20, r24
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	28 2f       	mov	r18, r24
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 2e       	mov	r0, r18
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_WritePin+0x12a>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	0a 94       	dec	r0
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_WritePin+0x126>
 1c0:	84 2b       	or	r24, r20
 1c2:	8c 93       	st	X, r24
 1c4:	56 c0       	rjmp	.+172    	; 0x272 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=8&&PinNum<=15))	//PORT B
 1c6:	89 81       	ldd	r24, Y+1	; 0x01
 1c8:	88 30       	cpi	r24, 0x08	; 8
 1ca:	d0 f0       	brcs	.+52     	; 0x200 <DIO_WritePin+0x16e>
 1cc:	89 81       	ldd	r24, Y+1	; 0x01
 1ce:	80 31       	cpi	r24, 0x10	; 16
 1d0:	b8 f4       	brcc	.+46     	; 0x200 <DIO_WritePin+0x16e>
		{
			Set_Bit(PORTB,(PinNum-8));
 1d2:	a8 e3       	ldi	r26, 0x38	; 56
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	e8 e3       	ldi	r30, 0x38	; 56
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	80 81       	ld	r24, Z
 1dc:	48 2f       	mov	r20, r24
 1de:	89 81       	ldd	r24, Y+1	; 0x01
 1e0:	88 2f       	mov	r24, r24
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	9c 01       	movw	r18, r24
 1e6:	28 50       	subi	r18, 0x08	; 8
 1e8:	30 40       	sbci	r19, 0x00	; 0
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 2e       	mov	r0, r18
 1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <DIO_WritePin+0x164>
 1f2:	88 0f       	add	r24, r24
 1f4:	99 1f       	adc	r25, r25
 1f6:	0a 94       	dec	r0
 1f8:	e2 f7       	brpl	.-8      	; 0x1f2 <DIO_WritePin+0x160>
 1fa:	84 2b       	or	r24, r20
 1fc:	8c 93       	st	X, r24
 1fe:	39 c0       	rjmp	.+114    	; 0x272 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=16&&PinNum<=23))	//PORT C
 200:	89 81       	ldd	r24, Y+1	; 0x01
 202:	80 31       	cpi	r24, 0x10	; 16
 204:	d0 f0       	brcs	.+52     	; 0x23a <DIO_WritePin+0x1a8>
 206:	89 81       	ldd	r24, Y+1	; 0x01
 208:	88 31       	cpi	r24, 0x18	; 24
 20a:	b8 f4       	brcc	.+46     	; 0x23a <DIO_WritePin+0x1a8>
		{
			Set_Bit(PORTC,(PinNum-16));
 20c:	a5 e3       	ldi	r26, 0x35	; 53
 20e:	b0 e0       	ldi	r27, 0x00	; 0
 210:	e5 e3       	ldi	r30, 0x35	; 53
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	48 2f       	mov	r20, r24
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	88 2f       	mov	r24, r24
 21c:	90 e0       	ldi	r25, 0x00	; 0
 21e:	9c 01       	movw	r18, r24
 220:	20 51       	subi	r18, 0x10	; 16
 222:	30 40       	sbci	r19, 0x00	; 0
 224:	81 e0       	ldi	r24, 0x01	; 1
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	02 2e       	mov	r0, r18
 22a:	02 c0       	rjmp	.+4      	; 0x230 <DIO_WritePin+0x19e>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	0a 94       	dec	r0
 232:	e2 f7       	brpl	.-8      	; 0x22c <DIO_WritePin+0x19a>
 234:	84 2b       	or	r24, r20
 236:	8c 93       	st	X, r24
 238:	1c c0       	rjmp	.+56     	; 0x272 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=24&&PinNum<=31))	//PORT D
 23a:	89 81       	ldd	r24, Y+1	; 0x01
 23c:	88 31       	cpi	r24, 0x18	; 24
 23e:	c8 f0       	brcs	.+50     	; 0x272 <DIO_WritePin+0x1e0>
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	80 32       	cpi	r24, 0x20	; 32
 244:	b0 f4       	brcc	.+44     	; 0x272 <DIO_WritePin+0x1e0>
		{
			Set_Bit(PORTD,(PinNum-24));
 246:	a2 e3       	ldi	r26, 0x32	; 50
 248:	b0 e0       	ldi	r27, 0x00	; 0
 24a:	e2 e3       	ldi	r30, 0x32	; 50
 24c:	f0 e0       	ldi	r31, 0x00	; 0
 24e:	80 81       	ld	r24, Z
 250:	48 2f       	mov	r20, r24
 252:	89 81       	ldd	r24, Y+1	; 0x01
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	9c 01       	movw	r18, r24
 25a:	28 51       	subi	r18, 0x18	; 24
 25c:	30 40       	sbci	r19, 0x00	; 0
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	02 2e       	mov	r0, r18
 264:	02 c0       	rjmp	.+4      	; 0x26a <DIO_WritePin+0x1d8>
 266:	88 0f       	add	r24, r24
 268:	99 1f       	adc	r25, r25
 26a:	0a 94       	dec	r0
 26c:	e2 f7       	brpl	.-8      	; 0x266 <DIO_WritePin+0x1d4>
 26e:	84 2b       	or	r24, r20
 270:	8c 93       	st	X, r24
		}
	}
}
 272:	0f 90       	pop	r0
 274:	0f 90       	pop	r0
 276:	cf 91       	pop	r28
 278:	df 91       	pop	r29
 27a:	08 95       	ret

0000027c <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
 27c:	df 93       	push	r29
 27e:	cf 93       	push	r28
 280:	00 d0       	rcall	.+0      	; 0x282 <DIO_ReadPin+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
 286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 res=0;
 288:	19 82       	std	Y+1, r1	; 0x01
	if((PinNum>=0)&&(PinNum<=7))	//PORT A
 28a:	8a 81       	ldd	r24, Y+2	; 0x02
 28c:	88 30       	cpi	r24, 0x08	; 8
 28e:	90 f4       	brcc	.+36     	; 0x2b4 <DIO_ReadPin+0x38>
	{
		res= Get_Bit(PINA,PinNum);
 290:	e9 e3       	ldi	r30, 0x39	; 57
 292:	f0 e0       	ldi	r31, 0x00	; 0
 294:	80 81       	ld	r24, Z
 296:	48 2f       	mov	r20, r24
 298:	8a 81       	ldd	r24, Y+2	; 0x02
 29a:	28 2f       	mov	r18, r24
 29c:	30 e0       	ldi	r19, 0x00	; 0
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 2e       	mov	r0, r18
 2a4:	02 c0       	rjmp	.+4      	; 0x2aa <DIO_ReadPin+0x2e>
 2a6:	88 0f       	add	r24, r24
 2a8:	99 1f       	adc	r25, r25
 2aa:	0a 94       	dec	r0
 2ac:	e2 f7       	brpl	.-8      	; 0x2a6 <DIO_ReadPin+0x2a>
 2ae:	84 23       	and	r24, r20
 2b0:	89 83       	std	Y+1, r24	; 0x01
 2b2:	50 c0       	rjmp	.+160    	; 0x354 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 2b4:	8a 81       	ldd	r24, Y+2	; 0x02
 2b6:	88 30       	cpi	r24, 0x08	; 8
 2b8:	c0 f0       	brcs	.+48     	; 0x2ea <DIO_ReadPin+0x6e>
 2ba:	8a 81       	ldd	r24, Y+2	; 0x02
 2bc:	80 31       	cpi	r24, 0x10	; 16
 2be:	a8 f4       	brcc	.+42     	; 0x2ea <DIO_ReadPin+0x6e>
	{
		res= Get_Bit(PINB,(PinNum-8));
 2c0:	e6 e3       	ldi	r30, 0x36	; 54
 2c2:	f0 e0       	ldi	r31, 0x00	; 0
 2c4:	80 81       	ld	r24, Z
 2c6:	48 2f       	mov	r20, r24
 2c8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ca:	88 2f       	mov	r24, r24
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	9c 01       	movw	r18, r24
 2d0:	28 50       	subi	r18, 0x08	; 8
 2d2:	30 40       	sbci	r19, 0x00	; 0
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	02 2e       	mov	r0, r18
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_ReadPin+0x64>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	0a 94       	dec	r0
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_ReadPin+0x60>
 2e4:	84 23       	and	r24, r20
 2e6:	89 83       	std	Y+1, r24	; 0x01
 2e8:	35 c0       	rjmp	.+106    	; 0x354 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 2ea:	8a 81       	ldd	r24, Y+2	; 0x02
 2ec:	80 31       	cpi	r24, 0x10	; 16
 2ee:	c0 f0       	brcs	.+48     	; 0x320 <DIO_ReadPin+0xa4>
 2f0:	8a 81       	ldd	r24, Y+2	; 0x02
 2f2:	88 31       	cpi	r24, 0x18	; 24
 2f4:	a8 f4       	brcc	.+42     	; 0x320 <DIO_ReadPin+0xa4>
	{
		res= Get_Bit(PINC,(PinNum-16));
 2f6:	e3 e3       	ldi	r30, 0x33	; 51
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	48 2f       	mov	r20, r24
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	88 2f       	mov	r24, r24
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	9c 01       	movw	r18, r24
 306:	20 51       	subi	r18, 0x10	; 16
 308:	30 40       	sbci	r19, 0x00	; 0
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	90 e0       	ldi	r25, 0x00	; 0
 30e:	02 2e       	mov	r0, r18
 310:	02 c0       	rjmp	.+4      	; 0x316 <DIO_ReadPin+0x9a>
 312:	88 0f       	add	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	0a 94       	dec	r0
 318:	e2 f7       	brpl	.-8      	; 0x312 <DIO_ReadPin+0x96>
 31a:	84 23       	and	r24, r20
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	1a c0       	rjmp	.+52     	; 0x354 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=24)&&(PinNum<=31))	//PORT D
 320:	8a 81       	ldd	r24, Y+2	; 0x02
 322:	88 31       	cpi	r24, 0x18	; 24
 324:	b8 f0       	brcs	.+46     	; 0x354 <DIO_ReadPin+0xd8>
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	80 32       	cpi	r24, 0x20	; 32
 32a:	a0 f4       	brcc	.+40     	; 0x354 <DIO_ReadPin+0xd8>
	{
		res= Get_Bit(PIND,(PinNum-24));
 32c:	e0 e3       	ldi	r30, 0x30	; 48
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	80 81       	ld	r24, Z
 332:	48 2f       	mov	r20, r24
 334:	8a 81       	ldd	r24, Y+2	; 0x02
 336:	88 2f       	mov	r24, r24
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	9c 01       	movw	r18, r24
 33c:	28 51       	subi	r18, 0x18	; 24
 33e:	30 40       	sbci	r19, 0x00	; 0
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 2e       	mov	r0, r18
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_ReadPin+0xd0>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	0a 94       	dec	r0
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_ReadPin+0xcc>
 350:	84 23       	and	r24, r20
 352:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
 354:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 356:	0f 90       	pop	r0
 358:	0f 90       	pop	r0
 35a:	cf 91       	pop	r28
 35c:	df 91       	pop	r29
 35e:	08 95       	ret

00000360 <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 360:	df 93       	push	r29
 362:	cf 93       	push	r28
 364:	00 d0       	rcall	.+0      	; 0x366 <DIO_SetPinDirection+0x6>
 366:	cd b7       	in	r28, 0x3d	; 61
 368:	de b7       	in	r29, 0x3e	; 62
 36a:	89 83       	std	Y+1, r24	; 0x01
 36c:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==OUTPUT)						//set pin direction high
 36e:	8a 81       	ldd	r24, Y+2	; 0x02
 370:	81 30       	cpi	r24, 0x01	; 1
 372:	09 f0       	breq	.+2      	; 0x376 <DIO_SetPinDirection+0x16>
 374:	70 c0       	rjmp	.+224    	; 0x456 <DIO_SetPinDirection+0xf6>
	{
		if((PinNum>=0)&&(PinNum<=7))	//PORT A
 376:	89 81       	ldd	r24, Y+1	; 0x01
 378:	88 30       	cpi	r24, 0x08	; 8
 37a:	a0 f4       	brcc	.+40     	; 0x3a4 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
 37c:	aa e3       	ldi	r26, 0x3A	; 58
 37e:	b0 e0       	ldi	r27, 0x00	; 0
 380:	ea e3       	ldi	r30, 0x3A	; 58
 382:	f0 e0       	ldi	r31, 0x00	; 0
 384:	80 81       	ld	r24, Z
 386:	48 2f       	mov	r20, r24
 388:	89 81       	ldd	r24, Y+1	; 0x01
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	02 2e       	mov	r0, r18
 394:	02 c0       	rjmp	.+4      	; 0x39a <DIO_SetPinDirection+0x3a>
 396:	88 0f       	add	r24, r24
 398:	99 1f       	adc	r25, r25
 39a:	0a 94       	dec	r0
 39c:	e2 f7       	brpl	.-8      	; 0x396 <DIO_SetPinDirection+0x36>
 39e:	84 2b       	or	r24, r20
 3a0:	8c 93       	st	X, r24
 3a2:	ce c0       	rjmp	.+412    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 3a4:	89 81       	ldd	r24, Y+1	; 0x01
 3a6:	88 30       	cpi	r24, 0x08	; 8
 3a8:	d0 f0       	brcs	.+52     	; 0x3de <DIO_SetPinDirection+0x7e>
 3aa:	89 81       	ldd	r24, Y+1	; 0x01
 3ac:	80 31       	cpi	r24, 0x10	; 16
 3ae:	b8 f4       	brcc	.+46     	; 0x3de <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
 3b0:	a7 e3       	ldi	r26, 0x37	; 55
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	e7 e3       	ldi	r30, 0x37	; 55
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	48 2f       	mov	r20, r24
 3bc:	89 81       	ldd	r24, Y+1	; 0x01
 3be:	88 2f       	mov	r24, r24
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	9c 01       	movw	r18, r24
 3c4:	28 50       	subi	r18, 0x08	; 8
 3c6:	30 40       	sbci	r19, 0x00	; 0
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	90 e0       	ldi	r25, 0x00	; 0
 3cc:	02 2e       	mov	r0, r18
 3ce:	02 c0       	rjmp	.+4      	; 0x3d4 <DIO_SetPinDirection+0x74>
 3d0:	88 0f       	add	r24, r24
 3d2:	99 1f       	adc	r25, r25
 3d4:	0a 94       	dec	r0
 3d6:	e2 f7       	brpl	.-8      	; 0x3d0 <DIO_SetPinDirection+0x70>
 3d8:	84 2b       	or	r24, r20
 3da:	8c 93       	st	X, r24
 3dc:	b1 c0       	rjmp	.+354    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 3de:	89 81       	ldd	r24, Y+1	; 0x01
 3e0:	80 31       	cpi	r24, 0x10	; 16
 3e2:	d0 f0       	brcs	.+52     	; 0x418 <DIO_SetPinDirection+0xb8>
 3e4:	89 81       	ldd	r24, Y+1	; 0x01
 3e6:	88 31       	cpi	r24, 0x18	; 24
 3e8:	b8 f4       	brcc	.+46     	; 0x418 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
 3ea:	a4 e3       	ldi	r26, 0x34	; 52
 3ec:	b0 e0       	ldi	r27, 0x00	; 0
 3ee:	e4 e3       	ldi	r30, 0x34	; 52
 3f0:	f0 e0       	ldi	r31, 0x00	; 0
 3f2:	80 81       	ld	r24, Z
 3f4:	48 2f       	mov	r20, r24
 3f6:	89 81       	ldd	r24, Y+1	; 0x01
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	9c 01       	movw	r18, r24
 3fe:	20 51       	subi	r18, 0x10	; 16
 400:	30 40       	sbci	r19, 0x00	; 0
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	02 2e       	mov	r0, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <DIO_SetPinDirection+0xae>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	0a 94       	dec	r0
 410:	e2 f7       	brpl	.-8      	; 0x40a <DIO_SetPinDirection+0xaa>
 412:	84 2b       	or	r24, r20
 414:	8c 93       	st	X, r24
 416:	94 c0       	rjmp	.+296    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=24)&&(PinNum<=31))		//PORT D
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	88 31       	cpi	r24, 0x18	; 24
 41c:	08 f4       	brcc	.+2      	; 0x420 <DIO_SetPinDirection+0xc0>
 41e:	90 c0       	rjmp	.+288    	; 0x540 <DIO_SetPinDirection+0x1e0>
 420:	89 81       	ldd	r24, Y+1	; 0x01
 422:	80 32       	cpi	r24, 0x20	; 32
 424:	08 f0       	brcs	.+2      	; 0x428 <DIO_SetPinDirection+0xc8>
 426:	8c c0       	rjmp	.+280    	; 0x540 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRD,(PinNum-24));
 428:	a1 e3       	ldi	r26, 0x31	; 49
 42a:	b0 e0       	ldi	r27, 0x00	; 0
 42c:	e1 e3       	ldi	r30, 0x31	; 49
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	80 81       	ld	r24, Z
 432:	48 2f       	mov	r20, r24
 434:	89 81       	ldd	r24, Y+1	; 0x01
 436:	88 2f       	mov	r24, r24
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	9c 01       	movw	r18, r24
 43c:	28 51       	subi	r18, 0x18	; 24
 43e:	30 40       	sbci	r19, 0x00	; 0
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	02 2e       	mov	r0, r18
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_SetPinDirection+0xec>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	0a 94       	dec	r0
 44e:	e2 f7       	brpl	.-8      	; 0x448 <DIO_SetPinDirection+0xe8>
 450:	84 2b       	or	r24, r20
 452:	8c 93       	st	X, r24
 454:	75 c0       	rjmp	.+234    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==INPUT)
 456:	8a 81       	ldd	r24, Y+2	; 0x02
 458:	88 23       	and	r24, r24
 45a:	09 f0       	breq	.+2      	; 0x45e <DIO_SetPinDirection+0xfe>
 45c:	71 c0       	rjmp	.+226    	; 0x540 <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
 45e:	89 81       	ldd	r24, Y+1	; 0x01
 460:	88 30       	cpi	r24, 0x08	; 8
 462:	a8 f4       	brcc	.+42     	; 0x48e <DIO_SetPinDirection+0x12e>
		{
			Clr_Bit(DDRA,PinNum);
 464:	aa e3       	ldi	r26, 0x3A	; 58
 466:	b0 e0       	ldi	r27, 0x00	; 0
 468:	ea e3       	ldi	r30, 0x3A	; 58
 46a:	f0 e0       	ldi	r31, 0x00	; 0
 46c:	80 81       	ld	r24, Z
 46e:	48 2f       	mov	r20, r24
 470:	89 81       	ldd	r24, Y+1	; 0x01
 472:	28 2f       	mov	r18, r24
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 2e       	mov	r0, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <DIO_SetPinDirection+0x122>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	0a 94       	dec	r0
 484:	e2 f7       	brpl	.-8      	; 0x47e <DIO_SetPinDirection+0x11e>
 486:	80 95       	com	r24
 488:	84 23       	and	r24, r20
 48a:	8c 93       	st	X, r24
 48c:	59 c0       	rjmp	.+178    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 48e:	89 81       	ldd	r24, Y+1	; 0x01
 490:	88 30       	cpi	r24, 0x08	; 8
 492:	d8 f0       	brcs	.+54     	; 0x4ca <DIO_SetPinDirection+0x16a>
 494:	89 81       	ldd	r24, Y+1	; 0x01
 496:	80 31       	cpi	r24, 0x10	; 16
 498:	c0 f4       	brcc	.+48     	; 0x4ca <DIO_SetPinDirection+0x16a>
		{
			Clr_Bit(DDRB,(PinNum-8));
 49a:	a7 e3       	ldi	r26, 0x37	; 55
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	e7 e3       	ldi	r30, 0x37	; 55
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	80 81       	ld	r24, Z
 4a4:	48 2f       	mov	r20, r24
 4a6:	89 81       	ldd	r24, Y+1	; 0x01
 4a8:	88 2f       	mov	r24, r24
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	9c 01       	movw	r18, r24
 4ae:	28 50       	subi	r18, 0x08	; 8
 4b0:	30 40       	sbci	r19, 0x00	; 0
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 2e       	mov	r0, r18
 4b8:	02 c0       	rjmp	.+4      	; 0x4be <DIO_SetPinDirection+0x15e>
 4ba:	88 0f       	add	r24, r24
 4bc:	99 1f       	adc	r25, r25
 4be:	0a 94       	dec	r0
 4c0:	e2 f7       	brpl	.-8      	; 0x4ba <DIO_SetPinDirection+0x15a>
 4c2:	80 95       	com	r24
 4c4:	84 23       	and	r24, r20
 4c6:	8c 93       	st	X, r24
 4c8:	3b c0       	rjmp	.+118    	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 4ca:	89 81       	ldd	r24, Y+1	; 0x01
 4cc:	80 31       	cpi	r24, 0x10	; 16
 4ce:	d8 f0       	brcs	.+54     	; 0x506 <DIO_SetPinDirection+0x1a6>
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	88 31       	cpi	r24, 0x18	; 24
 4d4:	c0 f4       	brcc	.+48     	; 0x506 <DIO_SetPinDirection+0x1a6>
		{
			Clr_Bit(DDRC,(PinNum-16));
 4d6:	a4 e3       	ldi	r26, 0x34	; 52
 4d8:	b0 e0       	ldi	r27, 0x00	; 0
 4da:	e4 e3       	ldi	r30, 0x34	; 52
 4dc:	f0 e0       	ldi	r31, 0x00	; 0
 4de:	80 81       	ld	r24, Z
 4e0:	48 2f       	mov	r20, r24
 4e2:	89 81       	ldd	r24, Y+1	; 0x01
 4e4:	88 2f       	mov	r24, r24
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	9c 01       	movw	r18, r24
 4ea:	20 51       	subi	r18, 0x10	; 16
 4ec:	30 40       	sbci	r19, 0x00	; 0
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	02 2e       	mov	r0, r18
 4f4:	02 c0       	rjmp	.+4      	; 0x4fa <DIO_SetPinDirection+0x19a>
 4f6:	88 0f       	add	r24, r24
 4f8:	99 1f       	adc	r25, r25
 4fa:	0a 94       	dec	r0
 4fc:	e2 f7       	brpl	.-8      	; 0x4f6 <DIO_SetPinDirection+0x196>
 4fe:	80 95       	com	r24
 500:	84 23       	and	r24, r20
 502:	8c 93       	st	X, r24
 504:	1d c0       	rjmp	.+58     	; 0x540 <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=24)&&(PinNum<=31)) 	//PORT D
 506:	89 81       	ldd	r24, Y+1	; 0x01
 508:	88 31       	cpi	r24, 0x18	; 24
 50a:	d0 f0       	brcs	.+52     	; 0x540 <DIO_SetPinDirection+0x1e0>
 50c:	89 81       	ldd	r24, Y+1	; 0x01
 50e:	80 32       	cpi	r24, 0x20	; 32
 510:	b8 f4       	brcc	.+46     	; 0x540 <DIO_SetPinDirection+0x1e0>

		{
			Clr_Bit(DDRD,(PinNum-24));
 512:	a1 e3       	ldi	r26, 0x31	; 49
 514:	b0 e0       	ldi	r27, 0x00	; 0
 516:	e1 e3       	ldi	r30, 0x31	; 49
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	80 81       	ld	r24, Z
 51c:	48 2f       	mov	r20, r24
 51e:	89 81       	ldd	r24, Y+1	; 0x01
 520:	88 2f       	mov	r24, r24
 522:	90 e0       	ldi	r25, 0x00	; 0
 524:	9c 01       	movw	r18, r24
 526:	28 51       	subi	r18, 0x18	; 24
 528:	30 40       	sbci	r19, 0x00	; 0
 52a:	81 e0       	ldi	r24, 0x01	; 1
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	02 2e       	mov	r0, r18
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_SetPinDirection+0x1d6>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	0a 94       	dec	r0
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_SetPinDirection+0x1d2>
 53a:	80 95       	com	r24
 53c:	84 23       	and	r24, r20
 53e:	8c 93       	st	X, r24
		}
	}
}
 540:	0f 90       	pop	r0
 542:	0f 90       	pop	r0
 544:	cf 91       	pop	r28
 546:	df 91       	pop	r29
 548:	08 95       	ret

0000054a <timer0_init>:
#include "Standard_Types.h"



void timer0_init(void)  // timer initial
{
 54a:	df 93       	push	r29
 54c:	cf 93       	push	r28
 54e:	cd b7       	in	r28, 0x3d	; 61
 550:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |= (1 << CS01)|(1 << CS00); //prescaler=64
 552:	a3 e5       	ldi	r26, 0x53	; 83
 554:	b0 e0       	ldi	r27, 0x00	; 0
 556:	e3 e5       	ldi	r30, 0x53	; 83
 558:	f0 e0       	ldi	r31, 0x00	; 0
 55a:	80 81       	ld	r24, Z
 55c:	83 60       	ori	r24, 0x03	; 3
 55e:	8c 93       	st	X, r24
    TCNT0 = 0;
 560:	e2 e5       	ldi	r30, 0x52	; 82
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	10 82       	st	Z, r1
}
 566:	cf 91       	pop	r28
 568:	df 91       	pop	r29
 56a:	08 95       	ret

0000056c <timer_delay>:


void timer_delay(uint32 n)
{
 56c:	df 93       	push	r29
 56e:	cf 93       	push	r28
 570:	cd b7       	in	r28, 0x3d	; 61
 572:	de b7       	in	r29, 0x3e	; 62
 574:	28 97       	sbiw	r28, 0x08	; 8
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	6d 83       	std	Y+5, r22	; 0x05
 582:	7e 83       	std	Y+6, r23	; 0x06
 584:	8f 83       	std	Y+7, r24	; 0x07
 586:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	OCR0=249;
 588:	ec e5       	ldi	r30, 0x5C	; 92
 58a:	f0 e0       	ldi	r31, 0x00	; 0
 58c:	89 ef       	ldi	r24, 0xF9	; 249
 58e:	80 83       	st	Z, r24
	TCNT0=0;
 590:	e2 e5       	ldi	r30, 0x52	; 82
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	10 82       	st	Z, r1
	for(i=0;i<n/2;i++)
 596:	19 82       	std	Y+1, r1	; 0x01
 598:	1a 82       	std	Y+2, r1	; 0x02
 59a:	1b 82       	std	Y+3, r1	; 0x03
 59c:	1c 82       	std	Y+4, r1	; 0x04
 59e:	1b c0       	rjmp	.+54     	; 0x5d6 <timer_delay+0x6a>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
 5a0:	e8 e5       	ldi	r30, 0x58	; 88
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	88 2f       	mov	r24, r24
 5a8:	90 e0       	ldi	r25, 0x00	; 0
 5aa:	81 70       	andi	r24, 0x01	; 1
 5ac:	90 70       	andi	r25, 0x00	; 0
 5ae:	00 97       	sbiw	r24, 0x00	; 0
 5b0:	b9 f3       	breq	.-18     	; 0x5a0 <timer_delay+0x34>
		Set_Bit(TIFR,OCF0);
 5b2:	a8 e5       	ldi	r26, 0x58	; 88
 5b4:	b0 e0       	ldi	r27, 0x00	; 0
 5b6:	e8 e5       	ldi	r30, 0x58	; 88
 5b8:	f0 e0       	ldi	r31, 0x00	; 0
 5ba:	80 81       	ld	r24, Z
 5bc:	82 60       	ori	r24, 0x02	; 2
 5be:	8c 93       	st	X, r24
void timer_delay(uint32 n)
{
	uint32 i;
	OCR0=249;
	TCNT0=0;
	for(i=0;i<n/2;i++)
 5c0:	89 81       	ldd	r24, Y+1	; 0x01
 5c2:	9a 81       	ldd	r25, Y+2	; 0x02
 5c4:	ab 81       	ldd	r26, Y+3	; 0x03
 5c6:	bc 81       	ldd	r27, Y+4	; 0x04
 5c8:	01 96       	adiw	r24, 0x01	; 1
 5ca:	a1 1d       	adc	r26, r1
 5cc:	b1 1d       	adc	r27, r1
 5ce:	89 83       	std	Y+1, r24	; 0x01
 5d0:	9a 83       	std	Y+2, r25	; 0x02
 5d2:	ab 83       	std	Y+3, r26	; 0x03
 5d4:	bc 83       	std	Y+4, r27	; 0x04
 5d6:	8d 81       	ldd	r24, Y+5	; 0x05
 5d8:	9e 81       	ldd	r25, Y+6	; 0x06
 5da:	af 81       	ldd	r26, Y+7	; 0x07
 5dc:	b8 85       	ldd	r27, Y+8	; 0x08
 5de:	9c 01       	movw	r18, r24
 5e0:	ad 01       	movw	r20, r26
 5e2:	56 95       	lsr	r21
 5e4:	47 95       	ror	r20
 5e6:	37 95       	ror	r19
 5e8:	27 95       	ror	r18
 5ea:	89 81       	ldd	r24, Y+1	; 0x01
 5ec:	9a 81       	ldd	r25, Y+2	; 0x02
 5ee:	ab 81       	ldd	r26, Y+3	; 0x03
 5f0:	bc 81       	ldd	r27, Y+4	; 0x04
 5f2:	82 17       	cp	r24, r18
 5f4:	93 07       	cpc	r25, r19
 5f6:	a4 07       	cpc	r26, r20
 5f8:	b5 07       	cpc	r27, r21
 5fa:	90 f2       	brcs	.-92     	; 0x5a0 <timer_delay+0x34>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
		Set_Bit(TIFR,OCF0);
	}

}
 5fc:	28 96       	adiw	r28, 0x08	; 8
 5fe:	0f b6       	in	r0, 0x3f	; 63
 600:	f8 94       	cli
 602:	de bf       	out	0x3e, r29	; 62
 604:	0f be       	out	0x3f, r0	; 63
 606:	cd bf       	out	0x3d, r28	; 61
 608:	cf 91       	pop	r28
 60a:	df 91       	pop	r29
 60c:	08 95       	ret

0000060e <del_ms>:
 *      Author: Hossam-PC
 */
#include "del.h"

void del_ms(uint32 x)
{
 60e:	df 93       	push	r29
 610:	cf 93       	push	r28
 612:	cd b7       	in	r28, 0x3d	; 61
 614:	de b7       	in	r29, 0x3e	; 62
 616:	2c 97       	sbiw	r28, 0x0c	; 12
 618:	0f b6       	in	r0, 0x3f	; 63
 61a:	f8 94       	cli
 61c:	de bf       	out	0x3e, r29	; 62
 61e:	0f be       	out	0x3f, r0	; 63
 620:	cd bf       	out	0x3d, r28	; 61
 622:	69 87       	std	Y+9, r22	; 0x09
 624:	7a 87       	std	Y+10, r23	; 0x0a
 626:	8b 87       	std	Y+11, r24	; 0x0b
 628:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32 i,j;
	for(i=0;i<x;i++)
 62a:	19 82       	std	Y+1, r1	; 0x01
 62c:	1a 82       	std	Y+2, r1	; 0x02
 62e:	1b 82       	std	Y+3, r1	; 0x03
 630:	1c 82       	std	Y+4, r1	; 0x04
 632:	24 c0       	rjmp	.+72     	; 0x67c <del_ms+0x6e>
	{
		for(j=0;j<240;j++);
 634:	1d 82       	std	Y+5, r1	; 0x05
 636:	1e 82       	std	Y+6, r1	; 0x06
 638:	1f 82       	std	Y+7, r1	; 0x07
 63a:	18 86       	std	Y+8, r1	; 0x08
 63c:	0b c0       	rjmp	.+22     	; 0x654 <del_ms+0x46>
 63e:	8d 81       	ldd	r24, Y+5	; 0x05
 640:	9e 81       	ldd	r25, Y+6	; 0x06
 642:	af 81       	ldd	r26, Y+7	; 0x07
 644:	b8 85       	ldd	r27, Y+8	; 0x08
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	a1 1d       	adc	r26, r1
 64a:	b1 1d       	adc	r27, r1
 64c:	8d 83       	std	Y+5, r24	; 0x05
 64e:	9e 83       	std	Y+6, r25	; 0x06
 650:	af 83       	std	Y+7, r26	; 0x07
 652:	b8 87       	std	Y+8, r27	; 0x08
 654:	8d 81       	ldd	r24, Y+5	; 0x05
 656:	9e 81       	ldd	r25, Y+6	; 0x06
 658:	af 81       	ldd	r26, Y+7	; 0x07
 65a:	b8 85       	ldd	r27, Y+8	; 0x08
 65c:	80 3f       	cpi	r24, 0xF0	; 240
 65e:	91 05       	cpc	r25, r1
 660:	a1 05       	cpc	r26, r1
 662:	b1 05       	cpc	r27, r1
 664:	60 f3       	brcs	.-40     	; 0x63e <del_ms+0x30>
#include "del.h"

void del_ms(uint32 x)
{
	volatile uint32 i,j;
	for(i=0;i<x;i++)
 666:	89 81       	ldd	r24, Y+1	; 0x01
 668:	9a 81       	ldd	r25, Y+2	; 0x02
 66a:	ab 81       	ldd	r26, Y+3	; 0x03
 66c:	bc 81       	ldd	r27, Y+4	; 0x04
 66e:	01 96       	adiw	r24, 0x01	; 1
 670:	a1 1d       	adc	r26, r1
 672:	b1 1d       	adc	r27, r1
 674:	89 83       	std	Y+1, r24	; 0x01
 676:	9a 83       	std	Y+2, r25	; 0x02
 678:	ab 83       	std	Y+3, r26	; 0x03
 67a:	bc 83       	std	Y+4, r27	; 0x04
 67c:	29 81       	ldd	r18, Y+1	; 0x01
 67e:	3a 81       	ldd	r19, Y+2	; 0x02
 680:	4b 81       	ldd	r20, Y+3	; 0x03
 682:	5c 81       	ldd	r21, Y+4	; 0x04
 684:	89 85       	ldd	r24, Y+9	; 0x09
 686:	9a 85       	ldd	r25, Y+10	; 0x0a
 688:	ab 85       	ldd	r26, Y+11	; 0x0b
 68a:	bc 85       	ldd	r27, Y+12	; 0x0c
 68c:	28 17       	cp	r18, r24
 68e:	39 07       	cpc	r19, r25
 690:	4a 07       	cpc	r20, r26
 692:	5b 07       	cpc	r21, r27
 694:	78 f2       	brcs	.-98     	; 0x634 <del_ms+0x26>
	{
		for(j=0;j<240;j++);
	}
}
 696:	2c 96       	adiw	r28, 0x0c	; 12
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	f8 94       	cli
 69c:	de bf       	out	0x3e, r29	; 62
 69e:	0f be       	out	0x3f, r0	; 63
 6a0:	cd bf       	out	0x3d, r28	; 61
 6a2:	cf 91       	pop	r28
 6a4:	df 91       	pop	r29
 6a6:	08 95       	ret

000006a8 <main>:
void se7en_show(uint8 num);
void se7en_enable(uint8 num);
void se7en_init(void);

int main(void)
{
 6a8:	df 93       	push	r29
 6aa:	cf 93       	push	r28
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
 6b0:	2c 97       	sbiw	r28, 0x0c	; 12
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	f8 94       	cli
 6b6:	de bf       	out	0x3e, r29	; 62
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0,k=0,j=0;
 6bc:	1c 82       	std	Y+4, r1	; 0x04
 6be:	1b 82       	std	Y+3, r1	; 0x03
 6c0:	1a 82       	std	Y+2, r1	; 0x02
	uint8 flag=0;
 6c2:	19 82       	std	Y+1, r1	; 0x01
	uint8 arr[3]={0,0,0};
 6c4:	ce 01       	movw	r24, r28
 6c6:	05 96       	adiw	r24, 0x05	; 5
 6c8:	99 87       	std	Y+9, r25	; 0x09
 6ca:	88 87       	std	Y+8, r24	; 0x08
 6cc:	e0 e6       	ldi	r30, 0x60	; 96
 6ce:	f0 e0       	ldi	r31, 0x00	; 0
 6d0:	fb 87       	std	Y+11, r31	; 0x0b
 6d2:	ea 87       	std	Y+10, r30	; 0x0a
 6d4:	f3 e0       	ldi	r31, 0x03	; 3
 6d6:	fc 87       	std	Y+12, r31	; 0x0c
 6d8:	ea 85       	ldd	r30, Y+10	; 0x0a
 6da:	fb 85       	ldd	r31, Y+11	; 0x0b
 6dc:	00 80       	ld	r0, Z
 6de:	8a 85       	ldd	r24, Y+10	; 0x0a
 6e0:	9b 85       	ldd	r25, Y+11	; 0x0b
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	9b 87       	std	Y+11, r25	; 0x0b
 6e6:	8a 87       	std	Y+10, r24	; 0x0a
 6e8:	e8 85       	ldd	r30, Y+8	; 0x08
 6ea:	f9 85       	ldd	r31, Y+9	; 0x09
 6ec:	00 82       	st	Z, r0
 6ee:	88 85       	ldd	r24, Y+8	; 0x08
 6f0:	99 85       	ldd	r25, Y+9	; 0x09
 6f2:	01 96       	adiw	r24, 0x01	; 1
 6f4:	99 87       	std	Y+9, r25	; 0x09
 6f6:	88 87       	std	Y+8, r24	; 0x08
 6f8:	9c 85       	ldd	r25, Y+12	; 0x0c
 6fa:	91 50       	subi	r25, 0x01	; 1
 6fc:	9c 87       	std	Y+12, r25	; 0x0c
 6fe:	ec 85       	ldd	r30, Y+12	; 0x0c
 700:	ee 23       	and	r30, r30
 702:	51 f7       	brne	.-44     	; 0x6d8 <main+0x30>
	DIO_SetPinDirection(LED0,OUTPUT); //led>>output
 704:	8c e0       	ldi	r24, 0x0C	; 12
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>
		/*button 1 keypad*/ /*counter button*/
	DIO_SetPinDirection(row1,INPUT); //row1 input
 70c:	82 e1       	ldi	r24, 0x12	; 18
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>

	DIO_SetPinDirection(col1,OUTPUT);//col1 output
 714:	85 e1       	ldi	r24, 0x15	; 21
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>

	DIO_WritePin(row1,HIGH); //pull up resistor
 71c:	82 e1       	ldi	r24, 0x12	; 18
 71e:	61 e0       	ldi	r22, 0x01	; 1
 720:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(col1,LOW);
 724:	85 e1       	ldi	r24, 0x15	; 21
 726:	60 e0       	ldi	r22, 0x00	; 0
 728:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>

		/*button 0*/ /*reset button*/
	DIO_SetPinDirection(btn0,INPUT); //btn0 input
 72c:	84 e1       	ldi	r24, 0x14	; 20
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>

		/* 7 segment*/
	se7en_enable(1);
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	0e 94 83 04 	call	0x906	; 0x906 <se7en_enable>
	se7en_init();
 73a:	0e 94 9c 04 	call	0x938	; 0x938 <se7en_init>

   while(1)
   {
		if(scan_count())
 73e:	0e 94 0e 04 	call	0x81c	; 0x81c <scan_count>
 742:	88 23       	and	r24, r24
 744:	e1 f1       	breq	.+120    	; 0x7be <main+0x116>
		{
			for(k=0;k<3;k++)
 746:	1b 82       	std	Y+3, r1	; 0x03
 748:	35 c0       	rjmp	.+106    	; 0x7b4 <main+0x10c>

			{
			   if(scan_count()&&(flag==0))
 74a:	0e 94 0e 04 	call	0x81c	; 0x81c <scan_count>
 74e:	88 23       	and	r24, r24
 750:	71 f1       	breq	.+92     	; 0x7ae <main+0x106>
 752:	89 81       	ldd	r24, Y+1	; 0x01
 754:	88 23       	and	r24, r24
 756:	59 f5       	brne	.+86     	; 0x7ae <main+0x106>
				{
				   for(i=0;i<10;i++)
 758:	1c 82       	std	Y+4, r1	; 0x04
 75a:	13 c0       	rjmp	.+38     	; 0x782 <main+0xda>
				   {
					  if(scan_count())
 75c:	0e 94 0e 04 	call	0x81c	; 0x81c <scan_count>
 760:	88 23       	and	r24, r24
 762:	31 f0       	breq	.+12     	; 0x770 <main+0xc8>
					  {
						  counter++;
 764:	80 91 64 00 	lds	r24, 0x0064
 768:	8f 5f       	subi	r24, 0xFF	; 255
 76a:	80 93 64 00 	sts	0x0064, r24
						  i=0;
 76e:	1c 82       	std	Y+4, r1	; 0x04
					  }
					  del_ms(110);
 770:	6e e6       	ldi	r22, 0x6E	; 110
 772:	70 e0       	ldi	r23, 0x00	; 0
 774:	80 e0       	ldi	r24, 0x00	; 0
 776:	90 e0       	ldi	r25, 0x00	; 0
 778:	0e 94 07 03 	call	0x60e	; 0x60e <del_ms>
			for(k=0;k<3;k++)

			{
			   if(scan_count()&&(flag==0))
				{
				   for(i=0;i<10;i++)
 77c:	8c 81       	ldd	r24, Y+4	; 0x04
 77e:	8f 5f       	subi	r24, 0xFF	; 255
 780:	8c 83       	std	Y+4, r24	; 0x04
 782:	8c 81       	ldd	r24, Y+4	; 0x04
 784:	8a 30       	cpi	r24, 0x0A	; 10
 786:	50 f3       	brcs	.-44     	; 0x75c <main+0xb4>
						  i=0;
					  }
					  del_ms(110);
				   }

			   arr[k]=counter;
 788:	8b 81       	ldd	r24, Y+3	; 0x03
 78a:	28 2f       	mov	r18, r24
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	40 91 64 00 	lds	r20, 0x0064
 792:	ce 01       	movw	r24, r28
 794:	05 96       	adiw	r24, 0x05	; 5
 796:	fc 01       	movw	r30, r24
 798:	e2 0f       	add	r30, r18
 79a:	f3 1f       	adc	r31, r19
 79c:	40 83       	st	Z, r20
			   counter=0;
 79e:	10 92 64 00 	sts	0x0064, r1
			   del_ms(1000);
 7a2:	68 ee       	ldi	r22, 0xE8	; 232
 7a4:	73 e0       	ldi	r23, 0x03	; 3
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 07 03 	call	0x60e	; 0x60e <del_ms>

   while(1)
   {
		if(scan_count())
		{
			for(k=0;k<3;k++)
 7ae:	8b 81       	ldd	r24, Y+3	; 0x03
 7b0:	8f 5f       	subi	r24, 0xFF	; 255
 7b2:	8b 83       	std	Y+3, r24	; 0x03
 7b4:	8b 81       	ldd	r24, Y+3	; 0x03
 7b6:	83 30       	cpi	r24, 0x03	; 3
 7b8:	40 f2       	brcs	.-112    	; 0x74a <main+0xa2>
			   arr[k]=counter;
			   counter=0;
			   del_ms(1000);
				}
			}
			   flag=1;
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	89 83       	std	Y+1, r24	; 0x01
		}
	   if(flag==1)
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	81 30       	cpi	r24, 0x01	; 1
 7c2:	11 f5       	brne	.+68     	; 0x808 <main+0x160>
	   {
		   for(j=0;j<3;j++)
 7c4:	1a 82       	std	Y+2, r1	; 0x02
 7c6:	1d c0       	rjmp	.+58     	; 0x802 <main+0x15a>
		   {
		   se7en_show(arr[j]);
 7c8:	8a 81       	ldd	r24, Y+2	; 0x02
 7ca:	28 2f       	mov	r18, r24
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	ce 01       	movw	r24, r28
 7d0:	05 96       	adiw	r24, 0x05	; 5
 7d2:	fc 01       	movw	r30, r24
 7d4:	e2 0f       	add	r30, r18
 7d6:	f3 1f       	adc	r31, r19
 7d8:	80 81       	ld	r24, Z
 7da:	0e 94 48 04 	call	0x890	; 0x890 <se7en_show>
		   del_ms(1000);
 7de:	68 ee       	ldi	r22, 0xE8	; 232
 7e0:	73 e0       	ldi	r23, 0x03	; 3
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	0e 94 07 03 	call	0x60e	; 0x60e <del_ms>
		   se7en_show(9);
 7ea:	89 e0       	ldi	r24, 0x09	; 9
 7ec:	0e 94 48 04 	call	0x890	; 0x890 <se7en_show>
		   del_ms(1000);
 7f0:	68 ee       	ldi	r22, 0xE8	; 232
 7f2:	73 e0       	ldi	r23, 0x03	; 3
 7f4:	80 e0       	ldi	r24, 0x00	; 0
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	0e 94 07 03 	call	0x60e	; 0x60e <del_ms>
			}
			   flag=1;
		}
	   if(flag==1)
	   {
		   for(j=0;j<3;j++)
 7fc:	8a 81       	ldd	r24, Y+2	; 0x02
 7fe:	8f 5f       	subi	r24, 0xFF	; 255
 800:	8a 83       	std	Y+2, r24	; 0x02
 802:	8a 81       	ldd	r24, Y+2	; 0x02
 804:	83 30       	cpi	r24, 0x03	; 3
 806:	00 f3       	brcs	.-64     	; 0x7c8 <main+0x120>
		   del_ms(1000);
		   se7en_show(9);
		   del_ms(1000);
		   }
	   }
	   if(scan_reset())
 808:	0e 94 2b 04 	call	0x856	; 0x856 <scan_reset>
 80c:	88 23       	and	r24, r24
 80e:	09 f4       	brne	.+2      	; 0x812 <main+0x16a>
 810:	96 cf       	rjmp	.-212    	; 0x73e <main+0x96>
		{
		   counter=0;
 812:	10 92 64 00 	sts	0x0064, r1
		   flag=0;
 816:	19 82       	std	Y+1, r1	; 0x01
		   k=0;
 818:	1b 82       	std	Y+3, r1	; 0x03
 81a:	91 cf       	rjmp	.-222    	; 0x73e <main+0x96>

0000081c <scan_count>:
   return 0;

}

uint8 scan_count(void)  //keypad button 1 pull up resistor
{
 81c:	df 93       	push	r29
 81e:	cf 93       	push	r28
 820:	0f 92       	push	r0
 822:	cd b7       	in	r28, 0x3d	; 61
 824:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
 826:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(row1)==0)
 828:	82 e1       	ldi	r24, 0x12	; 18
 82a:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_ReadPin>
 82e:	88 23       	and	r24, r24
 830:	69 f4       	brne	.+26     	; 0x84c <scan_count+0x30>
		{
			del_ms(30);
 832:	6e e1       	ldi	r22, 0x1E	; 30
 834:	70 e0       	ldi	r23, 0x00	; 0
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	0e 94 07 03 	call	0x60e	; 0x60e <del_ms>
			if(DIO_ReadPin(row1)==0)
 83e:	82 e1       	ldi	r24, 0x12	; 18
 840:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_ReadPin>
 844:	88 23       	and	r24, r24
 846:	11 f4       	brne	.+4      	; 0x84c <scan_count+0x30>
			{
				ret=1;
 848:	81 e0       	ldi	r24, 0x01	; 1
 84a:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
 84c:	89 81       	ldd	r24, Y+1	; 0x01
}
 84e:	0f 90       	pop	r0
 850:	cf 91       	pop	r28
 852:	df 91       	pop	r29
 854:	08 95       	ret

00000856 <scan_reset>:

uint8 scan_reset(void)  //button pull down resistor
{
 856:	df 93       	push	r29
 858:	cf 93       	push	r28
 85a:	0f 92       	push	r0
 85c:	cd b7       	in	r28, 0x3d	; 61
 85e:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
 860:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn0))
 862:	84 e1       	ldi	r24, 0x14	; 20
 864:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_ReadPin>
 868:	88 23       	and	r24, r24
 86a:	69 f0       	breq	.+26     	; 0x886 <__stack+0x27>
		{
			del_ms(30);
 86c:	6e e1       	ldi	r22, 0x1E	; 30
 86e:	70 e0       	ldi	r23, 0x00	; 0
 870:	80 e0       	ldi	r24, 0x00	; 0
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	0e 94 07 03 	call	0x60e	; 0x60e <del_ms>
			if(DIO_ReadPin(btn0))
 878:	84 e1       	ldi	r24, 0x14	; 20
 87a:	0e 94 3e 01 	call	0x27c	; 0x27c <DIO_ReadPin>
 87e:	88 23       	and	r24, r24
 880:	11 f0       	breq	.+4      	; 0x886 <__stack+0x27>
			{
				ret=1;
 882:	81 e0       	ldi	r24, 0x01	; 1
 884:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
 886:	89 81       	ldd	r24, Y+1	; 0x01
}
 888:	0f 90       	pop	r0
 88a:	cf 91       	pop	r28
 88c:	df 91       	pop	r29
 88e:	08 95       	ret

00000890 <se7en_show>:

void se7en_show(uint8 num)
{
 890:	df 93       	push	r29
 892:	cf 93       	push	r28
 894:	0f 92       	push	r0
 896:	cd b7       	in	r28, 0x3d	; 61
 898:	de b7       	in	r29, 0x3e	; 62
 89a:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(se7seg_A,(num&(0x01)));
 89c:	89 81       	ldd	r24, Y+1	; 0x01
 89e:	98 2f       	mov	r25, r24
 8a0:	91 70       	andi	r25, 0x01	; 1
 8a2:	88 e0       	ldi	r24, 0x08	; 8
 8a4:	69 2f       	mov	r22, r25
 8a6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(se7seg_B,(num&(0x02))>>1);
 8aa:	89 81       	ldd	r24, Y+1	; 0x01
 8ac:	88 2f       	mov	r24, r24
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	82 70       	andi	r24, 0x02	; 2
 8b2:	90 70       	andi	r25, 0x00	; 0
 8b4:	95 95       	asr	r25
 8b6:	87 95       	ror	r24
 8b8:	98 2f       	mov	r25, r24
 8ba:	89 e0       	ldi	r24, 0x09	; 9
 8bc:	69 2f       	mov	r22, r25
 8be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(se7seg_C,(num&(0x04))>>2);
 8c2:	89 81       	ldd	r24, Y+1	; 0x01
 8c4:	88 2f       	mov	r24, r24
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	84 70       	andi	r24, 0x04	; 4
 8ca:	90 70       	andi	r25, 0x00	; 0
 8cc:	95 95       	asr	r25
 8ce:	87 95       	ror	r24
 8d0:	95 95       	asr	r25
 8d2:	87 95       	ror	r24
 8d4:	98 2f       	mov	r25, r24
 8d6:	8a e0       	ldi	r24, 0x0A	; 10
 8d8:	69 2f       	mov	r22, r25
 8da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(se7seg_D,(num&(0x08))>>3);
 8de:	89 81       	ldd	r24, Y+1	; 0x01
 8e0:	88 2f       	mov	r24, r24
 8e2:	90 e0       	ldi	r25, 0x00	; 0
 8e4:	88 70       	andi	r24, 0x08	; 8
 8e6:	90 70       	andi	r25, 0x00	; 0
 8e8:	95 95       	asr	r25
 8ea:	87 95       	ror	r24
 8ec:	95 95       	asr	r25
 8ee:	87 95       	ror	r24
 8f0:	95 95       	asr	r25
 8f2:	87 95       	ror	r24
 8f4:	98 2f       	mov	r25, r24
 8f6:	8b e0       	ldi	r24, 0x0B	; 11
 8f8:	69 2f       	mov	r22, r25
 8fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 8fe:	0f 90       	pop	r0
 900:	cf 91       	pop	r28
 902:	df 91       	pop	r29
 904:	08 95       	ret

00000906 <se7en_enable>:

void se7en_enable(uint8 num)
{
 906:	df 93       	push	r29
 908:	cf 93       	push	r28
 90a:	0f 92       	push	r0
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
 910:	89 83       	std	Y+1, r24	; 0x01
	if(num==1)
 912:	89 81       	ldd	r24, Y+1	; 0x01
 914:	81 30       	cpi	r24, 0x01	; 1
 916:	29 f4       	brne	.+10     	; 0x922 <se7en_enable+0x1c>
	DIO_WritePin(se7seg_EN1,HIGH);
 918:	8a e1       	ldi	r24, 0x1A	; 26
 91a:	61 e0       	ldi	r22, 0x01	; 1
 91c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 920:	07 c0       	rjmp	.+14     	; 0x930 <se7en_enable+0x2a>
	else if(num==2)
 922:	89 81       	ldd	r24, Y+1	; 0x01
 924:	82 30       	cpi	r24, 0x02	; 2
 926:	21 f4       	brne	.+8      	; 0x930 <se7en_enable+0x2a>
	DIO_WritePin(se7seg_EN2,HIGH);
 928:	8b e1       	ldi	r24, 0x1B	; 27
 92a:	61 e0       	ldi	r22, 0x01	; 1
 92c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 930:	0f 90       	pop	r0
 932:	cf 91       	pop	r28
 934:	df 91       	pop	r29
 936:	08 95       	ret

00000938 <se7en_init>:

void se7en_init(void)
{
 938:	df 93       	push	r29
 93a:	cf 93       	push	r28
 93c:	cd b7       	in	r28, 0x3d	; 61
 93e:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(se7seg_A,OUTPUT);
 940:	88 e0       	ldi	r24, 0x08	; 8
 942:	61 e0       	ldi	r22, 0x01	; 1
 944:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_B,OUTPUT);
 948:	89 e0       	ldi	r24, 0x09	; 9
 94a:	61 e0       	ldi	r22, 0x01	; 1
 94c:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_C,OUTPUT);
 950:	8a e0       	ldi	r24, 0x0A	; 10
 952:	61 e0       	ldi	r22, 0x01	; 1
 954:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_D,OUTPUT);
 958:	8b e0       	ldi	r24, 0x0B	; 11
 95a:	61 e0       	ldi	r22, 0x01	; 1
 95c:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_EN1,OUTPUT);
 960:	8a e1       	ldi	r24, 0x1A	; 26
 962:	61 e0       	ldi	r22, 0x01	; 1
 964:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_EN2,OUTPUT);
 968:	8b e1       	ldi	r24, 0x1B	; 27
 96a:	61 e0       	ldi	r22, 0x01	; 1
 96c:	0e 94 b0 01 	call	0x360	; 0x360 <DIO_SetPinDirection>

	DIO_WritePin(se7seg_A,LOW);
 970:	88 e0       	ldi	r24, 0x08	; 8
 972:	60 e0       	ldi	r22, 0x00	; 0
 974:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
 978:	88 e0       	ldi	r24, 0x08	; 8
 97a:	60 e0       	ldi	r22, 0x00	; 0
 97c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
 980:	88 e0       	ldi	r24, 0x08	; 8
 982:	60 e0       	ldi	r22, 0x00	; 0
 984:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
 988:	88 e0       	ldi	r24, 0x08	; 8
 98a:	60 e0       	ldi	r22, 0x00	; 0
 98c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
}
 990:	cf 91       	pop	r28
 992:	df 91       	pop	r29
 994:	08 95       	ret

00000996 <_exit>:
 996:	f8 94       	cli

00000998 <__stop_program>:
 998:	ff cf       	rjmp	.-2      	; 0x998 <__stop_program>
