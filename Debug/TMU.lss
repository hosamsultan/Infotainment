
TMU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d68  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000032c  00800060  00800060  00000ddc  2**0
                  ALLOC
  2 .stab         00001500  00000000  00000000  00000ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008ea  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	13 e0       	ldi	r17, 0x03	; 3
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 38       	cpi	r26, 0x8C	; 140
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 c4 05 	call	0xb88	; 0xb88 <main>
  74:	0c 94 b2 06 	jmp	0xd64	; 0xd64 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <scan_btn1>:
#include "Buttons.h"

#include "Gpio.h"
#include "del.h"
uint8 scan_btn1(void)  //keypad button 1 pull up resistor
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	0f 92       	push	r0
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
  86:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn1)==0)
  88:	8a e0       	ldi	r24, 0x0A	; 10
  8a:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_ReadPin>
  8e:	88 23       	and	r24, r24
  90:	69 f4       	brne	.+26     	; 0xac <scan_btn1+0x30>
		{
			del_ms(30);
  92:	6e e1       	ldi	r22, 0x1E	; 30
  94:	70 e0       	ldi	r23, 0x00	; 0
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	0e 94 77 05 	call	0xaee	; 0xaee <del_ms>
			if(DIO_ReadPin(btn1)==0)
  9e:	8a e0       	ldi	r24, 0x0A	; 10
  a0:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_ReadPin>
  a4:	88 23       	and	r24, r24
  a6:	11 f4       	brne	.+4      	; 0xac <scan_btn1+0x30>
			{
				ret=1;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
  ac:	89 81       	ldd	r24, Y+1	; 0x01
}
  ae:	0f 90       	pop	r0
  b0:	cf 91       	pop	r28
  b2:	df 91       	pop	r29
  b4:	08 95       	ret

000000b6 <scan_btn0>:

uint8 scan_btn0(void)  //button pull down resistor
{
  b6:	df 93       	push	r29
  b8:	cf 93       	push	r28
  ba:	0f 92       	push	r0
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
  c0:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn0))
  c2:	84 e1       	ldi	r24, 0x14	; 20
  c4:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_ReadPin>
  c8:	88 23       	and	r24, r24
  ca:	69 f0       	breq	.+26     	; 0xe6 <scan_btn0+0x30>
		{
			del_ms(30);
  cc:	6e e1       	ldi	r22, 0x1E	; 30
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 77 05 	call	0xaee	; 0xaee <del_ms>
			if(DIO_ReadPin(btn0))
  d8:	84 e1       	ldi	r24, 0x14	; 20
  da:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_ReadPin>
  de:	88 23       	and	r24, r24
  e0:	11 f0       	breq	.+4      	; 0xe6 <scan_btn0+0x30>
			{
				ret=1;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
  e6:	89 81       	ldd	r24, Y+1	; 0x01
}
  e8:	0f 90       	pop	r0
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <DIO_WritePin>:
#include "Gpio.h"



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	00 d0       	rcall	.+0      	; 0xf6 <DIO_WritePin+0x6>
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	89 83       	std	Y+1, r24	; 0x01
  fc:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==LOW)
  fe:	8a 81       	ldd	r24, Y+2	; 0x02
 100:	88 23       	and	r24, r24
 102:	09 f0       	breq	.+2      	; 0x106 <DIO_WritePin+0x16>
 104:	74 c0       	rjmp	.+232    	; 0x1ee <DIO_WritePin+0xfe>
	{
		if((PinNum>=0)&&(PinNum<=7))   //PORT A
 106:	89 81       	ldd	r24, Y+1	; 0x01
 108:	88 30       	cpi	r24, 0x08	; 8
 10a:	a8 f4       	brcc	.+42     	; 0x136 <DIO_WritePin+0x46>
		{
			Clr_Bit(PORTA,PinNum);
 10c:	ab e3       	ldi	r26, 0x3B	; 59
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	eb e3       	ldi	r30, 0x3B	; 59
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	80 81       	ld	r24, Z
 116:	48 2f       	mov	r20, r24
 118:	89 81       	ldd	r24, Y+1	; 0x01
 11a:	28 2f       	mov	r18, r24
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 2e       	mov	r0, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_WritePin+0x3a>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_WritePin+0x36>
 12e:	80 95       	com	r24
 130:	84 23       	and	r24, r20
 132:	8c 93       	st	X, r24
 134:	cd c0       	rjmp	.+410    	; 0x2d0 <DIO_WritePin+0x1e0>
		}

		else if((PinNum>=8)&&(PinNum<=15)) // PORT B
 136:	89 81       	ldd	r24, Y+1	; 0x01
 138:	88 30       	cpi	r24, 0x08	; 8
 13a:	d8 f0       	brcs	.+54     	; 0x172 <DIO_WritePin+0x82>
 13c:	89 81       	ldd	r24, Y+1	; 0x01
 13e:	80 31       	cpi	r24, 0x10	; 16
 140:	c0 f4       	brcc	.+48     	; 0x172 <DIO_WritePin+0x82>
		{
			Clr_Bit(PORTB,(PinNum-8));
 142:	a8 e3       	ldi	r26, 0x38	; 56
 144:	b0 e0       	ldi	r27, 0x00	; 0
 146:	e8 e3       	ldi	r30, 0x38	; 56
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	48 2f       	mov	r20, r24
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	88 2f       	mov	r24, r24
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	9c 01       	movw	r18, r24
 156:	28 50       	subi	r18, 0x08	; 8
 158:	30 40       	sbci	r19, 0x00	; 0
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 2e       	mov	r0, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_WritePin+0x76>
 162:	88 0f       	add	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_WritePin+0x72>
 16a:	80 95       	com	r24
 16c:	84 23       	and	r24, r20
 16e:	8c 93       	st	X, r24
 170:	af c0       	rjmp	.+350    	; 0x2d0 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=16)&&(PinNum<=23)) //PORT C
 172:	89 81       	ldd	r24, Y+1	; 0x01
 174:	80 31       	cpi	r24, 0x10	; 16
 176:	d8 f0       	brcs	.+54     	; 0x1ae <DIO_WritePin+0xbe>
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	88 31       	cpi	r24, 0x18	; 24
 17c:	c0 f4       	brcc	.+48     	; 0x1ae <DIO_WritePin+0xbe>
		{
			Clr_Bit(PORTC,(PinNum-16));
 17e:	a5 e3       	ldi	r26, 0x35	; 53
 180:	b0 e0       	ldi	r27, 0x00	; 0
 182:	e5 e3       	ldi	r30, 0x35	; 53
 184:	f0 e0       	ldi	r31, 0x00	; 0
 186:	80 81       	ld	r24, Z
 188:	48 2f       	mov	r20, r24
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	88 2f       	mov	r24, r24
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	9c 01       	movw	r18, r24
 192:	20 51       	subi	r18, 0x10	; 16
 194:	30 40       	sbci	r19, 0x00	; 0
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 2e       	mov	r0, r18
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_WritePin+0xb2>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	0a 94       	dec	r0
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_WritePin+0xae>
 1a6:	80 95       	com	r24
 1a8:	84 23       	and	r24, r20
 1aa:	8c 93       	st	X, r24
 1ac:	91 c0       	rjmp	.+290    	; 0x2d0 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=24)&&(PinNum<=31)) //PORT D
 1ae:	89 81       	ldd	r24, Y+1	; 0x01
 1b0:	88 31       	cpi	r24, 0x18	; 24
 1b2:	08 f4       	brcc	.+2      	; 0x1b6 <DIO_WritePin+0xc6>
 1b4:	8d c0       	rjmp	.+282    	; 0x2d0 <DIO_WritePin+0x1e0>
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	80 32       	cpi	r24, 0x20	; 32
 1ba:	08 f0       	brcs	.+2      	; 0x1be <DIO_WritePin+0xce>
 1bc:	89 c0       	rjmp	.+274    	; 0x2d0 <DIO_WritePin+0x1e0>
		{
			Clr_Bit(PORTD,(PinNum-24));
 1be:	a2 e3       	ldi	r26, 0x32	; 50
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e2 e3       	ldi	r30, 0x32	; 50
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	48 2f       	mov	r20, r24
 1ca:	89 81       	ldd	r24, Y+1	; 0x01
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	9c 01       	movw	r18, r24
 1d2:	28 51       	subi	r18, 0x18	; 24
 1d4:	30 40       	sbci	r19, 0x00	; 0
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	02 2e       	mov	r0, r18
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_WritePin+0xf2>
 1de:	88 0f       	add	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	0a 94       	dec	r0
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_WritePin+0xee>
 1e6:	80 95       	com	r24
 1e8:	84 23       	and	r24, r20
 1ea:	8c 93       	st	X, r24
 1ec:	71 c0       	rjmp	.+226    	; 0x2d0 <DIO_WritePin+0x1e0>
		}
	}
	else if(PinValue==HIGH)
 1ee:	8a 81       	ldd	r24, Y+2	; 0x02
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	09 f0       	breq	.+2      	; 0x1f6 <DIO_WritePin+0x106>
 1f4:	6d c0       	rjmp	.+218    	; 0x2d0 <DIO_WritePin+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
 1f6:	89 81       	ldd	r24, Y+1	; 0x01
 1f8:	88 30       	cpi	r24, 0x08	; 8
 1fa:	a0 f4       	brcc	.+40     	; 0x224 <DIO_WritePin+0x134>
		{
			Set_Bit(PORTA,PinNum);
 1fc:	ab e3       	ldi	r26, 0x3B	; 59
 1fe:	b0 e0       	ldi	r27, 0x00	; 0
 200:	eb e3       	ldi	r30, 0x3B	; 59
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	48 2f       	mov	r20, r24
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	28 2f       	mov	r18, r24
 20c:	30 e0       	ldi	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WritePin+0x12a>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WritePin+0x126>
 21e:	84 2b       	or	r24, r20
 220:	8c 93       	st	X, r24
 222:	56 c0       	rjmp	.+172    	; 0x2d0 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=8&&PinNum<=15))	//PORT B
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	88 30       	cpi	r24, 0x08	; 8
 228:	d0 f0       	brcs	.+52     	; 0x25e <DIO_WritePin+0x16e>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	80 31       	cpi	r24, 0x10	; 16
 22e:	b8 f4       	brcc	.+46     	; 0x25e <DIO_WritePin+0x16e>
		{
			Set_Bit(PORTB,(PinNum-8));
 230:	a8 e3       	ldi	r26, 0x38	; 56
 232:	b0 e0       	ldi	r27, 0x00	; 0
 234:	e8 e3       	ldi	r30, 0x38	; 56
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	9c 01       	movw	r18, r24
 244:	28 50       	subi	r18, 0x08	; 8
 246:	30 40       	sbci	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_WritePin+0x164>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_WritePin+0x160>
 258:	84 2b       	or	r24, r20
 25a:	8c 93       	st	X, r24
 25c:	39 c0       	rjmp	.+114    	; 0x2d0 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=16&&PinNum<=23))	//PORT C
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	80 31       	cpi	r24, 0x10	; 16
 262:	d0 f0       	brcs	.+52     	; 0x298 <DIO_WritePin+0x1a8>
 264:	89 81       	ldd	r24, Y+1	; 0x01
 266:	88 31       	cpi	r24, 0x18	; 24
 268:	b8 f4       	brcc	.+46     	; 0x298 <DIO_WritePin+0x1a8>
		{
			Set_Bit(PORTC,(PinNum-16));
 26a:	a5 e3       	ldi	r26, 0x35	; 53
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e5 e3       	ldi	r30, 0x35	; 53
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	48 2f       	mov	r20, r24
 276:	89 81       	ldd	r24, Y+1	; 0x01
 278:	88 2f       	mov	r24, r24
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	9c 01       	movw	r18, r24
 27e:	20 51       	subi	r18, 0x10	; 16
 280:	30 40       	sbci	r19, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	90 e0       	ldi	r25, 0x00	; 0
 286:	02 2e       	mov	r0, r18
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_WritePin+0x19e>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	0a 94       	dec	r0
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_WritePin+0x19a>
 292:	84 2b       	or	r24, r20
 294:	8c 93       	st	X, r24
 296:	1c c0       	rjmp	.+56     	; 0x2d0 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=24&&PinNum<=31))	//PORT D
 298:	89 81       	ldd	r24, Y+1	; 0x01
 29a:	88 31       	cpi	r24, 0x18	; 24
 29c:	c8 f0       	brcs	.+50     	; 0x2d0 <DIO_WritePin+0x1e0>
 29e:	89 81       	ldd	r24, Y+1	; 0x01
 2a0:	80 32       	cpi	r24, 0x20	; 32
 2a2:	b0 f4       	brcc	.+44     	; 0x2d0 <DIO_WritePin+0x1e0>
		{
			Set_Bit(PORTD,(PinNum-24));
 2a4:	a2 e3       	ldi	r26, 0x32	; 50
 2a6:	b0 e0       	ldi	r27, 0x00	; 0
 2a8:	e2 e3       	ldi	r30, 0x32	; 50
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	80 81       	ld	r24, Z
 2ae:	48 2f       	mov	r20, r24
 2b0:	89 81       	ldd	r24, Y+1	; 0x01
 2b2:	88 2f       	mov	r24, r24
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	9c 01       	movw	r18, r24
 2b8:	28 51       	subi	r18, 0x18	; 24
 2ba:	30 40       	sbci	r19, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	02 2e       	mov	r0, r18
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_WritePin+0x1d8>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_WritePin+0x1d4>
 2cc:	84 2b       	or	r24, r20
 2ce:	8c 93       	st	X, r24
		}
	}
}
 2d0:	0f 90       	pop	r0
 2d2:	0f 90       	pop	r0
 2d4:	cf 91       	pop	r28
 2d6:	df 91       	pop	r29
 2d8:	08 95       	ret

000002da <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	00 d0       	rcall	.+0      	; 0x2e0 <DIO_ReadPin+0x6>
 2e0:	cd b7       	in	r28, 0x3d	; 61
 2e2:	de b7       	in	r29, 0x3e	; 62
 2e4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 res=0;
 2e6:	19 82       	std	Y+1, r1	; 0x01
	if((PinNum>=0)&&(PinNum<=7))	//PORT A
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	88 30       	cpi	r24, 0x08	; 8
 2ec:	90 f4       	brcc	.+36     	; 0x312 <DIO_ReadPin+0x38>
	{
		res= Get_Bit(PINA,PinNum);
 2ee:	e9 e3       	ldi	r30, 0x39	; 57
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	48 2f       	mov	r20, r24
 2f6:	8a 81       	ldd	r24, Y+2	; 0x02
 2f8:	28 2f       	mov	r18, r24
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	90 e0       	ldi	r25, 0x00	; 0
 300:	02 2e       	mov	r0, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_ReadPin+0x2e>
 304:	88 0f       	add	r24, r24
 306:	99 1f       	adc	r25, r25
 308:	0a 94       	dec	r0
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_ReadPin+0x2a>
 30c:	84 23       	and	r24, r20
 30e:	89 83       	std	Y+1, r24	; 0x01
 310:	50 c0       	rjmp	.+160    	; 0x3b2 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 312:	8a 81       	ldd	r24, Y+2	; 0x02
 314:	88 30       	cpi	r24, 0x08	; 8
 316:	c0 f0       	brcs	.+48     	; 0x348 <DIO_ReadPin+0x6e>
 318:	8a 81       	ldd	r24, Y+2	; 0x02
 31a:	80 31       	cpi	r24, 0x10	; 16
 31c:	a8 f4       	brcc	.+42     	; 0x348 <DIO_ReadPin+0x6e>
	{
		res= Get_Bit(PINB,(PinNum-8));
 31e:	e6 e3       	ldi	r30, 0x36	; 54
 320:	f0 e0       	ldi	r31, 0x00	; 0
 322:	80 81       	ld	r24, Z
 324:	48 2f       	mov	r20, r24
 326:	8a 81       	ldd	r24, Y+2	; 0x02
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	9c 01       	movw	r18, r24
 32e:	28 50       	subi	r18, 0x08	; 8
 330:	30 40       	sbci	r19, 0x00	; 0
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	02 2e       	mov	r0, r18
 338:	02 c0       	rjmp	.+4      	; 0x33e <DIO_ReadPin+0x64>
 33a:	88 0f       	add	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	0a 94       	dec	r0
 340:	e2 f7       	brpl	.-8      	; 0x33a <DIO_ReadPin+0x60>
 342:	84 23       	and	r24, r20
 344:	89 83       	std	Y+1, r24	; 0x01
 346:	35 c0       	rjmp	.+106    	; 0x3b2 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 348:	8a 81       	ldd	r24, Y+2	; 0x02
 34a:	80 31       	cpi	r24, 0x10	; 16
 34c:	c0 f0       	brcs	.+48     	; 0x37e <DIO_ReadPin+0xa4>
 34e:	8a 81       	ldd	r24, Y+2	; 0x02
 350:	88 31       	cpi	r24, 0x18	; 24
 352:	a8 f4       	brcc	.+42     	; 0x37e <DIO_ReadPin+0xa4>
	{
		res= Get_Bit(PINC,(PinNum-16));
 354:	e3 e3       	ldi	r30, 0x33	; 51
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	80 81       	ld	r24, Z
 35a:	48 2f       	mov	r20, r24
 35c:	8a 81       	ldd	r24, Y+2	; 0x02
 35e:	88 2f       	mov	r24, r24
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	9c 01       	movw	r18, r24
 364:	20 51       	subi	r18, 0x10	; 16
 366:	30 40       	sbci	r19, 0x00	; 0
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	02 2e       	mov	r0, r18
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_ReadPin+0x9a>
 370:	88 0f       	add	r24, r24
 372:	99 1f       	adc	r25, r25
 374:	0a 94       	dec	r0
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_ReadPin+0x96>
 378:	84 23       	and	r24, r20
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	1a c0       	rjmp	.+52     	; 0x3b2 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=24)&&(PinNum<=31))	//PORT D
 37e:	8a 81       	ldd	r24, Y+2	; 0x02
 380:	88 31       	cpi	r24, 0x18	; 24
 382:	b8 f0       	brcs	.+46     	; 0x3b2 <DIO_ReadPin+0xd8>
 384:	8a 81       	ldd	r24, Y+2	; 0x02
 386:	80 32       	cpi	r24, 0x20	; 32
 388:	a0 f4       	brcc	.+40     	; 0x3b2 <DIO_ReadPin+0xd8>
	{
		res= Get_Bit(PIND,(PinNum-24));
 38a:	e0 e3       	ldi	r30, 0x30	; 48
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	48 2f       	mov	r20, r24
 392:	8a 81       	ldd	r24, Y+2	; 0x02
 394:	88 2f       	mov	r24, r24
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	9c 01       	movw	r18, r24
 39a:	28 51       	subi	r18, 0x18	; 24
 39c:	30 40       	sbci	r19, 0x00	; 0
 39e:	81 e0       	ldi	r24, 0x01	; 1
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	02 2e       	mov	r0, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <DIO_ReadPin+0xd0>
 3a6:	88 0f       	add	r24, r24
 3a8:	99 1f       	adc	r25, r25
 3aa:	0a 94       	dec	r0
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <DIO_ReadPin+0xcc>
 3ae:	84 23       	and	r24, r20
 3b0:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 3b4:	0f 90       	pop	r0
 3b6:	0f 90       	pop	r0
 3b8:	cf 91       	pop	r28
 3ba:	df 91       	pop	r29
 3bc:	08 95       	ret

000003be <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 3be:	df 93       	push	r29
 3c0:	cf 93       	push	r28
 3c2:	00 d0       	rcall	.+0      	; 0x3c4 <DIO_SetPinDirection+0x6>
 3c4:	cd b7       	in	r28, 0x3d	; 61
 3c6:	de b7       	in	r29, 0x3e	; 62
 3c8:	89 83       	std	Y+1, r24	; 0x01
 3ca:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==OUTPUT)						//set pin direction high
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	81 30       	cpi	r24, 0x01	; 1
 3d0:	09 f0       	breq	.+2      	; 0x3d4 <DIO_SetPinDirection+0x16>
 3d2:	70 c0       	rjmp	.+224    	; 0x4b4 <DIO_SetPinDirection+0xf6>
	{
		if((PinNum>=0)&&(PinNum<=7))	//PORT A
 3d4:	89 81       	ldd	r24, Y+1	; 0x01
 3d6:	88 30       	cpi	r24, 0x08	; 8
 3d8:	a0 f4       	brcc	.+40     	; 0x402 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
 3da:	aa e3       	ldi	r26, 0x3A	; 58
 3dc:	b0 e0       	ldi	r27, 0x00	; 0
 3de:	ea e3       	ldi	r30, 0x3A	; 58
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	48 2f       	mov	r20, r24
 3e6:	89 81       	ldd	r24, Y+1	; 0x01
 3e8:	28 2f       	mov	r18, r24
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 2e       	mov	r0, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_SetPinDirection+0x3a>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_SetPinDirection+0x36>
 3fc:	84 2b       	or	r24, r20
 3fe:	8c 93       	st	X, r24
 400:	ce c0       	rjmp	.+412    	; 0x59e <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	88 30       	cpi	r24, 0x08	; 8
 406:	d0 f0       	brcs	.+52     	; 0x43c <DIO_SetPinDirection+0x7e>
 408:	89 81       	ldd	r24, Y+1	; 0x01
 40a:	80 31       	cpi	r24, 0x10	; 16
 40c:	b8 f4       	brcc	.+46     	; 0x43c <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
 40e:	a7 e3       	ldi	r26, 0x37	; 55
 410:	b0 e0       	ldi	r27, 0x00	; 0
 412:	e7 e3       	ldi	r30, 0x37	; 55
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	48 2f       	mov	r20, r24
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	88 2f       	mov	r24, r24
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	9c 01       	movw	r18, r24
 422:	28 50       	subi	r18, 0x08	; 8
 424:	30 40       	sbci	r19, 0x00	; 0
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	02 2e       	mov	r0, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <DIO_SetPinDirection+0x74>
 42e:	88 0f       	add	r24, r24
 430:	99 1f       	adc	r25, r25
 432:	0a 94       	dec	r0
 434:	e2 f7       	brpl	.-8      	; 0x42e <DIO_SetPinDirection+0x70>
 436:	84 2b       	or	r24, r20
 438:	8c 93       	st	X, r24
 43a:	b1 c0       	rjmp	.+354    	; 0x59e <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 43c:	89 81       	ldd	r24, Y+1	; 0x01
 43e:	80 31       	cpi	r24, 0x10	; 16
 440:	d0 f0       	brcs	.+52     	; 0x476 <DIO_SetPinDirection+0xb8>
 442:	89 81       	ldd	r24, Y+1	; 0x01
 444:	88 31       	cpi	r24, 0x18	; 24
 446:	b8 f4       	brcc	.+46     	; 0x476 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
 448:	a4 e3       	ldi	r26, 0x34	; 52
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	e4 e3       	ldi	r30, 0x34	; 52
 44e:	f0 e0       	ldi	r31, 0x00	; 0
 450:	80 81       	ld	r24, Z
 452:	48 2f       	mov	r20, r24
 454:	89 81       	ldd	r24, Y+1	; 0x01
 456:	88 2f       	mov	r24, r24
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	9c 01       	movw	r18, r24
 45c:	20 51       	subi	r18, 0x10	; 16
 45e:	30 40       	sbci	r19, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 2e       	mov	r0, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_SetPinDirection+0xae>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_SetPinDirection+0xaa>
 470:	84 2b       	or	r24, r20
 472:	8c 93       	st	X, r24
 474:	94 c0       	rjmp	.+296    	; 0x59e <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=24)&&(PinNum<=31))		//PORT D
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	88 31       	cpi	r24, 0x18	; 24
 47a:	08 f4       	brcc	.+2      	; 0x47e <DIO_SetPinDirection+0xc0>
 47c:	90 c0       	rjmp	.+288    	; 0x59e <DIO_SetPinDirection+0x1e0>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	80 32       	cpi	r24, 0x20	; 32
 482:	08 f0       	brcs	.+2      	; 0x486 <DIO_SetPinDirection+0xc8>
 484:	8c c0       	rjmp	.+280    	; 0x59e <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRD,(PinNum-24));
 486:	a1 e3       	ldi	r26, 0x31	; 49
 488:	b0 e0       	ldi	r27, 0x00	; 0
 48a:	e1 e3       	ldi	r30, 0x31	; 49
 48c:	f0 e0       	ldi	r31, 0x00	; 0
 48e:	80 81       	ld	r24, Z
 490:	48 2f       	mov	r20, r24
 492:	89 81       	ldd	r24, Y+1	; 0x01
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	9c 01       	movw	r18, r24
 49a:	28 51       	subi	r18, 0x18	; 24
 49c:	30 40       	sbci	r19, 0x00	; 0
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	02 2e       	mov	r0, r18
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <DIO_SetPinDirection+0xec>
 4a6:	88 0f       	add	r24, r24
 4a8:	99 1f       	adc	r25, r25
 4aa:	0a 94       	dec	r0
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <DIO_SetPinDirection+0xe8>
 4ae:	84 2b       	or	r24, r20
 4b0:	8c 93       	st	X, r24
 4b2:	75 c0       	rjmp	.+234    	; 0x59e <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==INPUT)
 4b4:	8a 81       	ldd	r24, Y+2	; 0x02
 4b6:	88 23       	and	r24, r24
 4b8:	09 f0       	breq	.+2      	; 0x4bc <DIO_SetPinDirection+0xfe>
 4ba:	71 c0       	rjmp	.+226    	; 0x59e <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
 4bc:	89 81       	ldd	r24, Y+1	; 0x01
 4be:	88 30       	cpi	r24, 0x08	; 8
 4c0:	a8 f4       	brcc	.+42     	; 0x4ec <DIO_SetPinDirection+0x12e>
		{
			Clr_Bit(DDRA,PinNum);
 4c2:	aa e3       	ldi	r26, 0x3A	; 58
 4c4:	b0 e0       	ldi	r27, 0x00	; 0
 4c6:	ea e3       	ldi	r30, 0x3A	; 58
 4c8:	f0 e0       	ldi	r31, 0x00	; 0
 4ca:	80 81       	ld	r24, Z
 4cc:	48 2f       	mov	r20, r24
 4ce:	89 81       	ldd	r24, Y+1	; 0x01
 4d0:	28 2f       	mov	r18, r24
 4d2:	30 e0       	ldi	r19, 0x00	; 0
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 2e       	mov	r0, r18
 4da:	02 c0       	rjmp	.+4      	; 0x4e0 <DIO_SetPinDirection+0x122>
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	0a 94       	dec	r0
 4e2:	e2 f7       	brpl	.-8      	; 0x4dc <DIO_SetPinDirection+0x11e>
 4e4:	80 95       	com	r24
 4e6:	84 23       	and	r24, r20
 4e8:	8c 93       	st	X, r24
 4ea:	59 c0       	rjmp	.+178    	; 0x59e <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	88 30       	cpi	r24, 0x08	; 8
 4f0:	d8 f0       	brcs	.+54     	; 0x528 <DIO_SetPinDirection+0x16a>
 4f2:	89 81       	ldd	r24, Y+1	; 0x01
 4f4:	80 31       	cpi	r24, 0x10	; 16
 4f6:	c0 f4       	brcc	.+48     	; 0x528 <DIO_SetPinDirection+0x16a>
		{
			Clr_Bit(DDRB,(PinNum-8));
 4f8:	a7 e3       	ldi	r26, 0x37	; 55
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	e7 e3       	ldi	r30, 0x37	; 55
 4fe:	f0 e0       	ldi	r31, 0x00	; 0
 500:	80 81       	ld	r24, Z
 502:	48 2f       	mov	r20, r24
 504:	89 81       	ldd	r24, Y+1	; 0x01
 506:	88 2f       	mov	r24, r24
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	9c 01       	movw	r18, r24
 50c:	28 50       	subi	r18, 0x08	; 8
 50e:	30 40       	sbci	r19, 0x00	; 0
 510:	81 e0       	ldi	r24, 0x01	; 1
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	02 2e       	mov	r0, r18
 516:	02 c0       	rjmp	.+4      	; 0x51c <DIO_SetPinDirection+0x15e>
 518:	88 0f       	add	r24, r24
 51a:	99 1f       	adc	r25, r25
 51c:	0a 94       	dec	r0
 51e:	e2 f7       	brpl	.-8      	; 0x518 <DIO_SetPinDirection+0x15a>
 520:	80 95       	com	r24
 522:	84 23       	and	r24, r20
 524:	8c 93       	st	X, r24
 526:	3b c0       	rjmp	.+118    	; 0x59e <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 528:	89 81       	ldd	r24, Y+1	; 0x01
 52a:	80 31       	cpi	r24, 0x10	; 16
 52c:	d8 f0       	brcs	.+54     	; 0x564 <DIO_SetPinDirection+0x1a6>
 52e:	89 81       	ldd	r24, Y+1	; 0x01
 530:	88 31       	cpi	r24, 0x18	; 24
 532:	c0 f4       	brcc	.+48     	; 0x564 <DIO_SetPinDirection+0x1a6>
		{
			Clr_Bit(DDRC,(PinNum-16));
 534:	a4 e3       	ldi	r26, 0x34	; 52
 536:	b0 e0       	ldi	r27, 0x00	; 0
 538:	e4 e3       	ldi	r30, 0x34	; 52
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	80 81       	ld	r24, Z
 53e:	48 2f       	mov	r20, r24
 540:	89 81       	ldd	r24, Y+1	; 0x01
 542:	88 2f       	mov	r24, r24
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	9c 01       	movw	r18, r24
 548:	20 51       	subi	r18, 0x10	; 16
 54a:	30 40       	sbci	r19, 0x00	; 0
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	90 e0       	ldi	r25, 0x00	; 0
 550:	02 2e       	mov	r0, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_SetPinDirection+0x19a>
 554:	88 0f       	add	r24, r24
 556:	99 1f       	adc	r25, r25
 558:	0a 94       	dec	r0
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_SetPinDirection+0x196>
 55c:	80 95       	com	r24
 55e:	84 23       	and	r24, r20
 560:	8c 93       	st	X, r24
 562:	1d c0       	rjmp	.+58     	; 0x59e <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=24)&&(PinNum<=31)) 	//PORT D
 564:	89 81       	ldd	r24, Y+1	; 0x01
 566:	88 31       	cpi	r24, 0x18	; 24
 568:	d0 f0       	brcs	.+52     	; 0x59e <DIO_SetPinDirection+0x1e0>
 56a:	89 81       	ldd	r24, Y+1	; 0x01
 56c:	80 32       	cpi	r24, 0x20	; 32
 56e:	b8 f4       	brcc	.+46     	; 0x59e <DIO_SetPinDirection+0x1e0>

		{
			Clr_Bit(DDRD,(PinNum-24));
 570:	a1 e3       	ldi	r26, 0x31	; 49
 572:	b0 e0       	ldi	r27, 0x00	; 0
 574:	e1 e3       	ldi	r30, 0x31	; 49
 576:	f0 e0       	ldi	r31, 0x00	; 0
 578:	80 81       	ld	r24, Z
 57a:	48 2f       	mov	r20, r24
 57c:	89 81       	ldd	r24, Y+1	; 0x01
 57e:	88 2f       	mov	r24, r24
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	9c 01       	movw	r18, r24
 584:	28 51       	subi	r18, 0x18	; 24
 586:	30 40       	sbci	r19, 0x00	; 0
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	02 2e       	mov	r0, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_SetPinDirection+0x1d6>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	0a 94       	dec	r0
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_SetPinDirection+0x1d2>
 598:	80 95       	com	r24
 59a:	84 23       	and	r24, r20
 59c:	8c 93       	st	X, r24
		}
	}
}
 59e:	0f 90       	pop	r0
 5a0:	0f 90       	pop	r0
 5a2:	cf 91       	pop	r28
 5a4:	df 91       	pop	r29
 5a6:	08 95       	ret

000005a8 <Global_Interrupt_Enable>:


#include "Interrupt.h"

void Global_Interrupt_Enable(void)
{
 5a8:	df 93       	push	r29
 5aa:	cf 93       	push	r28
 5ac:	cd b7       	in	r28, 0x3d	; 61
 5ae:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,I);
 5b0:	af e5       	ldi	r26, 0x5F	; 95
 5b2:	b0 e0       	ldi	r27, 0x00	; 0
 5b4:	ef e5       	ldi	r30, 0x5F	; 95
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	80 81       	ld	r24, Z
 5ba:	80 68       	ori	r24, 0x80	; 128
 5bc:	8c 93       	st	X, r24
}
 5be:	cf 91       	pop	r28
 5c0:	df 91       	pop	r29
 5c2:	08 95       	ret

000005c4 <Timer1_overflow_Interrupt_Enable>:

void Timer1_overflow_Interrupt_Enable(void)
{
 5c4:	df 93       	push	r29
 5c6:	cf 93       	push	r28
 5c8:	cd b7       	in	r28, 0x3d	; 61
 5ca:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TOIE1);
 5cc:	a9 e5       	ldi	r26, 0x59	; 89
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	e9 e5       	ldi	r30, 0x59	; 89
 5d2:	f0 e0       	ldi	r31, 0x00	; 0
 5d4:	80 81       	ld	r24, Z
 5d6:	84 60       	ori	r24, 0x04	; 4
 5d8:	8c 93       	st	X, r24
}
 5da:	cf 91       	pop	r28
 5dc:	df 91       	pop	r29
 5de:	08 95       	ret

000005e0 <Timer0_overflow_Interrupt_Enable>:
void Timer0_overflow_Interrupt_Enable(void)
{
 5e0:	df 93       	push	r29
 5e2:	cf 93       	push	r28
 5e4:	cd b7       	in	r28, 0x3d	; 61
 5e6:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TOIE0);
 5e8:	a9 e5       	ldi	r26, 0x59	; 89
 5ea:	b0 e0       	ldi	r27, 0x00	; 0
 5ec:	e9 e5       	ldi	r30, 0x59	; 89
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	81 60       	ori	r24, 0x01	; 1
 5f4:	8c 93       	st	X, r24
}
 5f6:	cf 91       	pop	r28
 5f8:	df 91       	pop	r29
 5fa:	08 95       	ret

000005fc <Timer1_Input_capture_Interrupt_Enable>:
void Timer1_Input_capture_Interrupt_Enable(void)
{
 5fc:	df 93       	push	r29
 5fe:	cf 93       	push	r28
 600:	cd b7       	in	r28, 0x3d	; 61
 602:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TICIE1);
 604:	a9 e5       	ldi	r26, 0x59	; 89
 606:	b0 e0       	ldi	r27, 0x00	; 0
 608:	e9 e5       	ldi	r30, 0x59	; 89
 60a:	f0 e0       	ldi	r31, 0x00	; 0
 60c:	80 81       	ld	r24, Z
 60e:	80 62       	ori	r24, 0x20	; 32
 610:	8c 93       	st	X, r24
}
 612:	cf 91       	pop	r28
 614:	df 91       	pop	r29
 616:	08 95       	ret

00000618 <Ext2_Interrupt2_Enable>:

void Ext2_Interrupt2_Enable(void)
{
 618:	df 93       	push	r29
 61a:	cf 93       	push	r28
 61c:	cd b7       	in	r28, 0x3d	; 61
 61e:	de b7       	in	r29, 0x3e	; 62
    Set_Bit(GICR,INT2);
 620:	ab e5       	ldi	r26, 0x5B	; 91
 622:	b0 e0       	ldi	r27, 0x00	; 0
 624:	eb e5       	ldi	r30, 0x5B	; 91
 626:	f0 e0       	ldi	r31, 0x00	; 0
 628:	80 81       	ld	r24, Z
 62a:	80 62       	ori	r24, 0x20	; 32
 62c:	8c 93       	st	X, r24
}
 62e:	cf 91       	pop	r28
 630:	df 91       	pop	r29
 632:	08 95       	ret

00000634 <Ext2_Interrupt2_Mode>:

void Ext2_Interrupt2_Mode(uint8 mode)
{
 634:	df 93       	push	r29
 636:	cf 93       	push	r28
 638:	00 d0       	rcall	.+0      	; 0x63a <Ext2_Interrupt2_Mode+0x6>
 63a:	0f 92       	push	r0
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
 640:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
 642:	89 81       	ldd	r24, Y+1	; 0x01
 644:	28 2f       	mov	r18, r24
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	3b 83       	std	Y+3, r19	; 0x03
 64a:	2a 83       	std	Y+2, r18	; 0x02
 64c:	8a 81       	ldd	r24, Y+2	; 0x02
 64e:	9b 81       	ldd	r25, Y+3	; 0x03
 650:	00 97       	sbiw	r24, 0x00	; 0
 652:	31 f0       	breq	.+12     	; 0x660 <Ext2_Interrupt2_Mode+0x2c>
 654:	2a 81       	ldd	r18, Y+2	; 0x02
 656:	3b 81       	ldd	r19, Y+3	; 0x03
 658:	21 30       	cpi	r18, 0x01	; 1
 65a:	31 05       	cpc	r19, r1
 65c:	49 f0       	breq	.+18     	; 0x670 <Ext2_Interrupt2_Mode+0x3c>
 65e:	0f c0       	rjmp	.+30     	; 0x67e <Ext2_Interrupt2_Mode+0x4a>
		{
		case 0:
			 Clr_Bit(MCUCSR,ISC2);
 660:	a4 e5       	ldi	r26, 0x54	; 84
 662:	b0 e0       	ldi	r27, 0x00	; 0
 664:	e4 e5       	ldi	r30, 0x54	; 84
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	80 81       	ld	r24, Z
 66a:	8f 7b       	andi	r24, 0xBF	; 191
 66c:	8c 93       	st	X, r24
 66e:	07 c0       	rjmp	.+14     	; 0x67e <Ext2_Interrupt2_Mode+0x4a>
			break;
		case 1:
			Set_Bit(MCUCSR,ISC2);
 670:	a4 e5       	ldi	r26, 0x54	; 84
 672:	b0 e0       	ldi	r27, 0x00	; 0
 674:	e4 e5       	ldi	r30, 0x54	; 84
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	80 81       	ld	r24, Z
 67a:	80 64       	ori	r24, 0x40	; 64
 67c:	8c 93       	st	X, r24
			break;
		}
}
 67e:	0f 90       	pop	r0
 680:	0f 90       	pop	r0
 682:	0f 90       	pop	r0
 684:	cf 91       	pop	r28
 686:	df 91       	pop	r29
 688:	08 95       	ret

0000068a <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
 68a:	df 93       	push	r29
 68c:	cf 93       	push	r28
 68e:	cd b7       	in	r28, 0x3d	; 61
 690:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG,I);
 692:	af e5       	ldi	r26, 0x5F	; 95
 694:	b0 e0       	ldi	r27, 0x00	; 0
 696:	ef e5       	ldi	r30, 0x5F	; 95
 698:	f0 e0       	ldi	r31, 0x00	; 0
 69a:	80 81       	ld	r24, Z
 69c:	8f 77       	andi	r24, 0x7F	; 127
 69e:	8c 93       	st	X, r24
}
 6a0:	cf 91       	pop	r28
 6a2:	df 91       	pop	r29
 6a4:	08 95       	ret

000006a6 <Timer0_overflow_Interrupt_Disable>:

void Timer0_overflow_Interrupt_Disable()
{
 6a6:	df 93       	push	r29
 6a8:	cf 93       	push	r28
 6aa:	cd b7       	in	r28, 0x3d	; 61
 6ac:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK,TOIE0);
 6ae:	a9 e5       	ldi	r26, 0x59	; 89
 6b0:	b0 e0       	ldi	r27, 0x00	; 0
 6b2:	e9 e5       	ldi	r30, 0x59	; 89
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	8e 7f       	andi	r24, 0xFE	; 254
 6ba:	8c 93       	st	X, r24
}
 6bc:	cf 91       	pop	r28
 6be:	df 91       	pop	r29
 6c0:	08 95       	ret

000006c2 <TMU_Init>:


/*************************************************************/
		/*TMU init Function*/
void TMU_Init(uint8 TickTime_a, uint8 TimerID_a )
{
 6c2:	df 93       	push	r29
 6c4:	cf 93       	push	r28
 6c6:	00 d0       	rcall	.+0      	; 0x6c8 <TMU_Init+0x6>
 6c8:	cd b7       	in	r28, 0x3d	; 61
 6ca:	de b7       	in	r29, 0x3e	; 62
 6cc:	89 83       	std	Y+1, r24	; 0x01
 6ce:	6a 83       	std	Y+2, r22	; 0x02
	switch (TickTime_a)
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	88 2f       	mov	r24, r24
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	81 30       	cpi	r24, 0x01	; 1
 6d8:	91 05       	cpc	r25, r1
 6da:	19 f4       	brne	.+6      	; 0x6e2 <TMU_Init+0x20>
	{
	case 1:
		Timer0_Set_OCR0(130);
 6dc:	82 e8       	ldi	r24, 0x82	; 130
 6de:	0e 94 ee 04 	call	0x9dc	; 0x9dc <Timer0_Set_OCR0>

	default:
		break;
	}

	switch (TimerID_a)
 6e2:	8a 81       	ldd	r24, Y+2	; 0x02
 6e4:	88 2f       	mov	r24, r24
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	81 30       	cpi	r24, 0x01	; 1
 6ea:	91 05       	cpc	r25, r1
 6ec:	41 f4       	brne	.+16     	; 0x6fe <TMU_Init+0x3c>
		{
		case 1:
			Timer0_init(&Notify);
 6ee:	86 ea       	ldi	r24, 0xA6	; 166
 6f0:	94 e0       	ldi	r25, 0x04	; 4
 6f2:	0e 94 c0 04 	call	0x980	; 0x980 <Timer0_init>
			Timer0_Input_capture_Interrupt_Enable();
 6f6:	0e 94 69 05 	call	0xad2	; 0xad2 <Timer0_Input_capture_Interrupt_Enable>
			Global_Interrupt_Enable();
 6fa:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <Global_Interrupt_Enable>

		default:
			break;
		}

}
 6fe:	0f 90       	pop	r0
 700:	0f 90       	pop	r0
 702:	cf 91       	pop	r28
 704:	df 91       	pop	r29
 706:	08 95       	ret

00000708 <TMU_Start>:
/*************************************************************/
		/*TMU start Function*/
void TMU_Start( void(*ptr)(void), uint32 Time_a, uint8 freq,uint8 ID )
{
 708:	0f 93       	push	r16
 70a:	df 93       	push	r29
 70c:	cf 93       	push	r28
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	28 97       	sbiw	r28, 0x08	; 8
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	f8 94       	cli
 718:	de bf       	out	0x3e, r29	; 62
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	9a 83       	std	Y+2, r25	; 0x02
 720:	89 83       	std	Y+1, r24	; 0x01
 722:	4b 83       	std	Y+3, r20	; 0x03
 724:	5c 83       	std	Y+4, r21	; 0x04
 726:	6d 83       	std	Y+5, r22	; 0x05
 728:	7e 83       	std	Y+6, r23	; 0x06
 72a:	2f 83       	std	Y+7, r18	; 0x07
 72c:	08 87       	std	Y+8, r16	; 0x08
	TMU_ARR[ID].Func_ptr_m = ptr;
 72e:	88 85       	ldd	r24, Y+8	; 0x08
 730:	88 2f       	mov	r24, r24
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	88 0f       	add	r24, r24
 736:	99 1f       	adc	r25, r25
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	88 0f       	add	r24, r24
 73e:	99 1f       	adc	r25, r25
 740:	fc 01       	movw	r30, r24
 742:	e4 59       	subi	r30, 0x94	; 148
 744:	ff 4f       	sbci	r31, 0xFF	; 255
 746:	89 81       	ldd	r24, Y+1	; 0x01
 748:	9a 81       	ldd	r25, Y+2	; 0x02
 74a:	91 83       	std	Z+1, r25	; 0x01
 74c:	80 83       	st	Z, r24
	TMU_ARR[ID].Time_m = Time_a;
 74e:	88 85       	ldd	r24, Y+8	; 0x08
 750:	88 2f       	mov	r24, r24
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	88 0f       	add	r24, r24
 756:	99 1f       	adc	r25, r25
 758:	88 0f       	add	r24, r24
 75a:	99 1f       	adc	r25, r25
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	88 0f       	add	r24, r24
 760:	99 1f       	adc	r25, r25
 762:	fc 01       	movw	r30, r24
 764:	e4 59       	subi	r30, 0x94	; 148
 766:	ff 4f       	sbci	r31, 0xFF	; 255
 768:	8b 81       	ldd	r24, Y+3	; 0x03
 76a:	9c 81       	ldd	r25, Y+4	; 0x04
 76c:	ad 81       	ldd	r26, Y+5	; 0x05
 76e:	be 81       	ldd	r27, Y+6	; 0x06
 770:	80 83       	st	Z, r24
 772:	91 83       	std	Z+1, r25	; 0x01
 774:	a2 83       	std	Z+2, r26	; 0x02
 776:	b3 83       	std	Z+3, r27	; 0x03
	TMU_ARR[ID].Freq_m = freq;
 778:	88 85       	ldd	r24, Y+8	; 0x08
 77a:	88 2f       	mov	r24, r24
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	88 0f       	add	r24, r24
 780:	99 1f       	adc	r25, r25
 782:	88 0f       	add	r24, r24
 784:	99 1f       	adc	r25, r25
 786:	88 0f       	add	r24, r24
 788:	99 1f       	adc	r25, r25
 78a:	fc 01       	movw	r30, r24
 78c:	ee 58       	subi	r30, 0x8E	; 142
 78e:	ff 4f       	sbci	r31, 0xFF	; 255
 790:	8f 81       	ldd	r24, Y+7	; 0x07
 792:	80 83       	st	Z, r24
	Num_Tmus++;
 794:	80 91 68 00 	lds	r24, 0x0068
 798:	8f 5f       	subi	r24, 0xFF	; 255
 79a:	80 93 68 00 	sts	0x0068, r24

}
 79e:	28 96       	adiw	r28, 0x08	; 8
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
 7aa:	cf 91       	pop	r28
 7ac:	df 91       	pop	r29
 7ae:	0f 91       	pop	r16
 7b0:	08 95       	ret

000007b2 <TMU_Stop>:


/*************************************************************/
		/*TMU stop Function*/
void TMU_Stop( uint8 ID )
{
 7b2:	df 93       	push	r29
 7b4:	cf 93       	push	r28
 7b6:	0f 92       	push	r0
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
 7bc:	89 83       	std	Y+1, r24	; 0x01
	TMU_ARR[ID].Func_ptr_m = NuLL;
 7be:	89 81       	ldd	r24, Y+1	; 0x01
 7c0:	88 2f       	mov	r24, r24
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	88 0f       	add	r24, r24
 7c6:	99 1f       	adc	r25, r25
 7c8:	88 0f       	add	r24, r24
 7ca:	99 1f       	adc	r25, r25
 7cc:	88 0f       	add	r24, r24
 7ce:	99 1f       	adc	r25, r25
 7d0:	fc 01       	movw	r30, r24
 7d2:	e4 59       	subi	r30, 0x94	; 148
 7d4:	ff 4f       	sbci	r31, 0xFF	; 255
 7d6:	11 82       	std	Z+1, r1	; 0x01
 7d8:	10 82       	st	Z, r1
}
 7da:	0f 90       	pop	r0
 7dc:	cf 91       	pop	r28
 7de:	df 91       	pop	r29
 7e0:	08 95       	ret

000007e2 <TMU_Dispatch>:

/*************************************************************/
		/*TMU Dispatch Function*/
void TMU_Dispatch(void)
{
 7e2:	ef 92       	push	r14
 7e4:	ff 92       	push	r15
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	df 93       	push	r29
 7ec:	cf 93       	push	r28
 7ee:	0f 92       	push	r0
 7f0:	cd b7       	in	r28, 0x3d	; 61
 7f2:	de b7       	in	r29, 0x3e	; 62
	uint8 i =0;
 7f4:	19 82       	std	Y+1, r1	; 0x01
	if(flag>temp)
 7f6:	20 91 60 00 	lds	r18, 0x0060
 7fa:	30 91 61 00 	lds	r19, 0x0061
 7fe:	40 91 62 00 	lds	r20, 0x0062
 802:	50 91 63 00 	lds	r21, 0x0063
 806:	80 91 64 00 	lds	r24, 0x0064
 80a:	90 91 65 00 	lds	r25, 0x0065
 80e:	a0 91 66 00 	lds	r26, 0x0066
 812:	b0 91 67 00 	lds	r27, 0x0067
 816:	82 17       	cp	r24, r18
 818:	93 07       	cpc	r25, r19
 81a:	a4 07       	cpc	r26, r20
 81c:	b5 07       	cpc	r27, r21
 81e:	08 f0       	brcs	.+2      	; 0x822 <TMU_Dispatch+0x40>
 820:	82 c0       	rjmp	.+260    	; 0x926 <__stack+0xc7>
	{
		for(i=0 ; i<Num_Tmus ; i++)
 822:	19 82       	std	Y+1, r1	; 0x01
 824:	6a c0       	rjmp	.+212    	; 0x8fa <__stack+0x9b>
		{
			if((flag % (TMU_ARR[i].Time_m) == 0) && TMU_ARR[i].Func_ptr_m != NuLL )
 826:	e0 90 60 00 	lds	r14, 0x0060
 82a:	f0 90 61 00 	lds	r15, 0x0061
 82e:	00 91 62 00 	lds	r16, 0x0062
 832:	10 91 63 00 	lds	r17, 0x0063
 836:	89 81       	ldd	r24, Y+1	; 0x01
 838:	88 2f       	mov	r24, r24
 83a:	90 e0       	ldi	r25, 0x00	; 0
 83c:	88 0f       	add	r24, r24
 83e:	99 1f       	adc	r25, r25
 840:	88 0f       	add	r24, r24
 842:	99 1f       	adc	r25, r25
 844:	01 96       	adiw	r24, 0x01	; 1
 846:	88 0f       	add	r24, r24
 848:	99 1f       	adc	r25, r25
 84a:	fc 01       	movw	r30, r24
 84c:	e4 59       	subi	r30, 0x94	; 148
 84e:	ff 4f       	sbci	r31, 0xFF	; 255
 850:	20 81       	ld	r18, Z
 852:	31 81       	ldd	r19, Z+1	; 0x01
 854:	42 81       	ldd	r20, Z+2	; 0x02
 856:	53 81       	ldd	r21, Z+3	; 0x03
 858:	c8 01       	movw	r24, r16
 85a:	b7 01       	movw	r22, r14
 85c:	0e 94 90 06 	call	0xd20	; 0xd20 <__udivmodsi4>
 860:	dc 01       	movw	r26, r24
 862:	cb 01       	movw	r24, r22
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	a1 05       	cpc	r26, r1
 868:	b1 05       	cpc	r27, r1
 86a:	09 f0       	breq	.+2      	; 0x86e <__stack+0xf>
 86c:	43 c0       	rjmp	.+134    	; 0x8f4 <__stack+0x95>
 86e:	89 81       	ldd	r24, Y+1	; 0x01
 870:	88 2f       	mov	r24, r24
 872:	90 e0       	ldi	r25, 0x00	; 0
 874:	88 0f       	add	r24, r24
 876:	99 1f       	adc	r25, r25
 878:	88 0f       	add	r24, r24
 87a:	99 1f       	adc	r25, r25
 87c:	88 0f       	add	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	fc 01       	movw	r30, r24
 882:	e4 59       	subi	r30, 0x94	; 148
 884:	ff 4f       	sbci	r31, 0xFF	; 255
 886:	80 81       	ld	r24, Z
 888:	91 81       	ldd	r25, Z+1	; 0x01
 88a:	00 97       	sbiw	r24, 0x00	; 0
 88c:	99 f1       	breq	.+102    	; 0x8f4 <__stack+0x95>
			{
				if(TMU_ARR[i].Freq_m==0) //ONE SHOT
 88e:	89 81       	ldd	r24, Y+1	; 0x01
 890:	88 2f       	mov	r24, r24
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	88 0f       	add	r24, r24
 896:	99 1f       	adc	r25, r25
 898:	88 0f       	add	r24, r24
 89a:	99 1f       	adc	r25, r25
 89c:	88 0f       	add	r24, r24
 89e:	99 1f       	adc	r25, r25
 8a0:	fc 01       	movw	r30, r24
 8a2:	ee 58       	subi	r30, 0x8E	; 142
 8a4:	ff 4f       	sbci	r31, 0xFF	; 255
 8a6:	80 81       	ld	r24, Z
 8a8:	88 23       	and	r24, r24
 8aa:	a1 f4       	brne	.+40     	; 0x8d4 <__stack+0x75>
				{
					TMU_ARR[i].Func_ptr_m();
 8ac:	89 81       	ldd	r24, Y+1	; 0x01
 8ae:	88 2f       	mov	r24, r24
 8b0:	90 e0       	ldi	r25, 0x00	; 0
 8b2:	88 0f       	add	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	88 0f       	add	r24, r24
 8bc:	99 1f       	adc	r25, r25
 8be:	fc 01       	movw	r30, r24
 8c0:	e4 59       	subi	r30, 0x94	; 148
 8c2:	ff 4f       	sbci	r31, 0xFF	; 255
 8c4:	01 90       	ld	r0, Z+
 8c6:	f0 81       	ld	r31, Z
 8c8:	e0 2d       	mov	r30, r0
 8ca:	09 95       	icall
					TMU_Stop(i);
 8cc:	89 81       	ldd	r24, Y+1	; 0x01
 8ce:	0e 94 d9 03 	call	0x7b2	; 0x7b2 <TMU_Stop>
 8d2:	10 c0       	rjmp	.+32     	; 0x8f4 <__stack+0x95>
				}
				else
				{
					TMU_ARR[i].Func_ptr_m();
 8d4:	89 81       	ldd	r24, Y+1	; 0x01
 8d6:	88 2f       	mov	r24, r24
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	88 0f       	add	r24, r24
 8dc:	99 1f       	adc	r25, r25
 8de:	88 0f       	add	r24, r24
 8e0:	99 1f       	adc	r25, r25
 8e2:	88 0f       	add	r24, r24
 8e4:	99 1f       	adc	r25, r25
 8e6:	fc 01       	movw	r30, r24
 8e8:	e4 59       	subi	r30, 0x94	; 148
 8ea:	ff 4f       	sbci	r31, 0xFF	; 255
 8ec:	01 90       	ld	r0, Z+
 8ee:	f0 81       	ld	r31, Z
 8f0:	e0 2d       	mov	r30, r0
 8f2:	09 95       	icall
void TMU_Dispatch(void)
{
	uint8 i =0;
	if(flag>temp)
	{
		for(i=0 ; i<Num_Tmus ; i++)
 8f4:	89 81       	ldd	r24, Y+1	; 0x01
 8f6:	8f 5f       	subi	r24, 0xFF	; 255
 8f8:	89 83       	std	Y+1, r24	; 0x01
 8fa:	90 91 68 00 	lds	r25, 0x0068
 8fe:	89 81       	ldd	r24, Y+1	; 0x01
 900:	89 17       	cp	r24, r25
 902:	08 f4       	brcc	.+2      	; 0x906 <__stack+0xa7>
 904:	90 cf       	rjmp	.-224    	; 0x826 <TMU_Dispatch+0x44>
				{
					TMU_ARR[i].Func_ptr_m();
				}
			}
		}
		temp=flag;
 906:	80 91 60 00 	lds	r24, 0x0060
 90a:	90 91 61 00 	lds	r25, 0x0061
 90e:	a0 91 62 00 	lds	r26, 0x0062
 912:	b0 91 63 00 	lds	r27, 0x0063
 916:	80 93 64 00 	sts	0x0064, r24
 91a:	90 93 65 00 	sts	0x0065, r25
 91e:	a0 93 66 00 	sts	0x0066, r26
 922:	b0 93 67 00 	sts	0x0067, r27
	}
}
 926:	0f 90       	pop	r0
 928:	cf 91       	pop	r28
 92a:	df 91       	pop	r29
 92c:	1f 91       	pop	r17
 92e:	0f 91       	pop	r16
 930:	ff 90       	pop	r15
 932:	ef 90       	pop	r14
 934:	08 95       	ret

00000936 <TMU_DeInit>:


/*************************************************************/
		/*TMU Deinit Function*/
void TMU_DeInit(void)
{
 936:	df 93       	push	r29
 938:	cf 93       	push	r28
 93a:	cd b7       	in	r28, 0x3d	; 61
 93c:	de b7       	in	r29, 0x3e	; 62
	Global_Interrupt_Disable();
 93e:	0e 94 45 03 	call	0x68a	; 0x68a <Global_Interrupt_Disable>
	Timer0_Deinit();
 942:	0e 94 4d 05 	call	0xa9a	; 0xa9a <Timer0_Deinit>
}
 946:	cf 91       	pop	r28
 948:	df 91       	pop	r29
 94a:	08 95       	ret

0000094c <Notify>:

void Notify(void)
{
 94c:	df 93       	push	r29
 94e:	cf 93       	push	r28
 950:	cd b7       	in	r28, 0x3d	; 61
 952:	de b7       	in	r29, 0x3e	; 62
	flag++;
 954:	80 91 60 00 	lds	r24, 0x0060
 958:	90 91 61 00 	lds	r25, 0x0061
 95c:	a0 91 62 00 	lds	r26, 0x0062
 960:	b0 91 63 00 	lds	r27, 0x0063
 964:	01 96       	adiw	r24, 0x01	; 1
 966:	a1 1d       	adc	r26, r1
 968:	b1 1d       	adc	r27, r1
 96a:	80 93 60 00 	sts	0x0060, r24
 96e:	90 93 61 00 	sts	0x0061, r25
 972:	a0 93 62 00 	sts	0x0062, r26
 976:	b0 93 63 00 	sts	0x0063, r27
}
 97a:	cf 91       	pop	r28
 97c:	df 91       	pop	r29
 97e:	08 95       	ret

00000980 <Timer0_init>:

static void(*CallBack2)(void);
/*************************************************************/
		/*timer0 initial*/
void Timer0_init(void(*CallBack)(void))
{
 980:	df 93       	push	r29
 982:	cf 93       	push	r28
 984:	00 d0       	rcall	.+0      	; 0x986 <Timer0_init+0x6>
 986:	cd b7       	in	r28, 0x3d	; 61
 988:	de b7       	in	r29, 0x3e	; 62
 98a:	9a 83       	std	Y+2, r25	; 0x02
 98c:	89 83       	std	Y+1, r24	; 0x01
    TCCR0 |= (1 << CS00); /*prescaler=64*/
 98e:	a3 e5       	ldi	r26, 0x53	; 83
 990:	b0 e0       	ldi	r27, 0x00	; 0
 992:	e3 e5       	ldi	r30, 0x53	; 83
 994:	f0 e0       	ldi	r31, 0x00	; 0
 996:	80 81       	ld	r24, Z
 998:	81 60       	ori	r24, 0x01	; 1
 99a:	8c 93       	st	X, r24
    TCCR0 |= (1 << CS01);
 99c:	a3 e5       	ldi	r26, 0x53	; 83
 99e:	b0 e0       	ldi	r27, 0x00	; 0
 9a0:	e3 e5       	ldi	r30, 0x53	; 83
 9a2:	f0 e0       	ldi	r31, 0x00	; 0
 9a4:	80 81       	ld	r24, Z
 9a6:	82 60       	ori	r24, 0x02	; 2
 9a8:	8c 93       	st	X, r24
    CallBack2=CallBack;
 9aa:	89 81       	ldd	r24, Y+1	; 0x01
 9ac:	9a 81       	ldd	r25, Y+2	; 0x02
 9ae:	90 93 6b 00 	sts	0x006B, r25
 9b2:	80 93 6a 00 	sts	0x006A, r24
}
 9b6:	0f 90       	pop	r0
 9b8:	0f 90       	pop	r0
 9ba:	cf 91       	pop	r28
 9bc:	df 91       	pop	r29
 9be:	08 95       	ret

000009c0 <Timer0_Set_TCNT0>:

/*************************************************************/
		/*timer0 set TCNT0*/
void Timer0_Set_TCNT0(uint8 value)
{
 9c0:	df 93       	push	r29
 9c2:	cf 93       	push	r28
 9c4:	0f 92       	push	r0
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
 9ca:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = value;
 9cc:	e2 e5       	ldi	r30, 0x52	; 82
 9ce:	f0 e0       	ldi	r31, 0x00	; 0
 9d0:	89 81       	ldd	r24, Y+1	; 0x01
 9d2:	80 83       	st	Z, r24
}
 9d4:	0f 90       	pop	r0
 9d6:	cf 91       	pop	r28
 9d8:	df 91       	pop	r29
 9da:	08 95       	ret

000009dc <Timer0_Set_OCR0>:
/*************************************************************/
		/*timer0 set OCR0*/
void Timer0_Set_OCR0(uint8 value)
{
 9dc:	df 93       	push	r29
 9de:	cf 93       	push	r28
 9e0:	0f 92       	push	r0
 9e2:	cd b7       	in	r28, 0x3d	; 61
 9e4:	de b7       	in	r29, 0x3e	; 62
 9e6:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = value;
 9e8:	ec e5       	ldi	r30, 0x5C	; 92
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	89 81       	ldd	r24, Y+1	; 0x01
 9ee:	80 83       	st	Z, r24
}
 9f0:	0f 90       	pop	r0
 9f2:	cf 91       	pop	r28
 9f4:	df 91       	pop	r29
 9f6:	08 95       	ret

000009f8 <timer_delay>:

/*************************************************************/
		/*timer0 delay*/
void timer_delay(uint32 n)
{
 9f8:	df 93       	push	r29
 9fa:	cf 93       	push	r28
 9fc:	cd b7       	in	r28, 0x3d	; 61
 9fe:	de b7       	in	r29, 0x3e	; 62
 a00:	28 97       	sbiw	r28, 0x08	; 8
 a02:	0f b6       	in	r0, 0x3f	; 63
 a04:	f8 94       	cli
 a06:	de bf       	out	0x3e, r29	; 62
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	cd bf       	out	0x3d, r28	; 61
 a0c:	6d 83       	std	Y+5, r22	; 0x05
 a0e:	7e 83       	std	Y+6, r23	; 0x06
 a10:	8f 83       	std	Y+7, r24	; 0x07
 a12:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	OCR0=249;
 a14:	ec e5       	ldi	r30, 0x5C	; 92
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	89 ef       	ldi	r24, 0xF9	; 249
 a1a:	80 83       	st	Z, r24
	TCNT0=0;
 a1c:	e2 e5       	ldi	r30, 0x52	; 82
 a1e:	f0 e0       	ldi	r31, 0x00	; 0
 a20:	10 82       	st	Z, r1
	for(i=0;i<n/2;i++)
 a22:	19 82       	std	Y+1, r1	; 0x01
 a24:	1a 82       	std	Y+2, r1	; 0x02
 a26:	1b 82       	std	Y+3, r1	; 0x03
 a28:	1c 82       	std	Y+4, r1	; 0x04
 a2a:	1b c0       	rjmp	.+54     	; 0xa62 <timer_delay+0x6a>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
 a2c:	e8 e5       	ldi	r30, 0x58	; 88
 a2e:	f0 e0       	ldi	r31, 0x00	; 0
 a30:	80 81       	ld	r24, Z
 a32:	88 2f       	mov	r24, r24
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	81 70       	andi	r24, 0x01	; 1
 a38:	90 70       	andi	r25, 0x00	; 0
 a3a:	00 97       	sbiw	r24, 0x00	; 0
 a3c:	b9 f3       	breq	.-18     	; 0xa2c <timer_delay+0x34>
		Set_Bit(TIFR,OCF0);
 a3e:	a8 e5       	ldi	r26, 0x58	; 88
 a40:	b0 e0       	ldi	r27, 0x00	; 0
 a42:	e8 e5       	ldi	r30, 0x58	; 88
 a44:	f0 e0       	ldi	r31, 0x00	; 0
 a46:	80 81       	ld	r24, Z
 a48:	82 60       	ori	r24, 0x02	; 2
 a4a:	8c 93       	st	X, r24
void timer_delay(uint32 n)
{
	uint32 i;
	OCR0=249;
	TCNT0=0;
	for(i=0;i<n/2;i++)
 a4c:	89 81       	ldd	r24, Y+1	; 0x01
 a4e:	9a 81       	ldd	r25, Y+2	; 0x02
 a50:	ab 81       	ldd	r26, Y+3	; 0x03
 a52:	bc 81       	ldd	r27, Y+4	; 0x04
 a54:	01 96       	adiw	r24, 0x01	; 1
 a56:	a1 1d       	adc	r26, r1
 a58:	b1 1d       	adc	r27, r1
 a5a:	89 83       	std	Y+1, r24	; 0x01
 a5c:	9a 83       	std	Y+2, r25	; 0x02
 a5e:	ab 83       	std	Y+3, r26	; 0x03
 a60:	bc 83       	std	Y+4, r27	; 0x04
 a62:	8d 81       	ldd	r24, Y+5	; 0x05
 a64:	9e 81       	ldd	r25, Y+6	; 0x06
 a66:	af 81       	ldd	r26, Y+7	; 0x07
 a68:	b8 85       	ldd	r27, Y+8	; 0x08
 a6a:	9c 01       	movw	r18, r24
 a6c:	ad 01       	movw	r20, r26
 a6e:	56 95       	lsr	r21
 a70:	47 95       	ror	r20
 a72:	37 95       	ror	r19
 a74:	27 95       	ror	r18
 a76:	89 81       	ldd	r24, Y+1	; 0x01
 a78:	9a 81       	ldd	r25, Y+2	; 0x02
 a7a:	ab 81       	ldd	r26, Y+3	; 0x03
 a7c:	bc 81       	ldd	r27, Y+4	; 0x04
 a7e:	82 17       	cp	r24, r18
 a80:	93 07       	cpc	r25, r19
 a82:	a4 07       	cpc	r26, r20
 a84:	b5 07       	cpc	r27, r21
 a86:	90 f2       	brcs	.-92     	; 0xa2c <timer_delay+0x34>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
		Set_Bit(TIFR,OCF0);
	}

}
 a88:	28 96       	adiw	r28, 0x08	; 8
 a8a:	0f b6       	in	r0, 0x3f	; 63
 a8c:	f8 94       	cli
 a8e:	de bf       	out	0x3e, r29	; 62
 a90:	0f be       	out	0x3f, r0	; 63
 a92:	cd bf       	out	0x3d, r28	; 61
 a94:	cf 91       	pop	r28
 a96:	df 91       	pop	r29
 a98:	08 95       	ret

00000a9a <Timer0_Deinit>:

/*************************************************************/
		/*timer0 Deinit*/
void Timer0_Deinit(void)
{
 a9a:	df 93       	push	r29
 a9c:	cf 93       	push	r28
 a9e:	cd b7       	in	r28, 0x3d	; 61
 aa0:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TCCR0,CS00);
 aa2:	a3 e5       	ldi	r26, 0x53	; 83
 aa4:	b0 e0       	ldi	r27, 0x00	; 0
 aa6:	e3 e5       	ldi	r30, 0x53	; 83
 aa8:	f0 e0       	ldi	r31, 0x00	; 0
 aaa:	80 81       	ld	r24, Z
 aac:	8e 7f       	andi	r24, 0xFE	; 254
 aae:	8c 93       	st	X, r24
	Clr_Bit(TCCR0,CS01);
 ab0:	a3 e5       	ldi	r26, 0x53	; 83
 ab2:	b0 e0       	ldi	r27, 0x00	; 0
 ab4:	e3 e5       	ldi	r30, 0x53	; 83
 ab6:	f0 e0       	ldi	r31, 0x00	; 0
 ab8:	80 81       	ld	r24, Z
 aba:	8d 7f       	andi	r24, 0xFD	; 253
 abc:	8c 93       	st	X, r24
	Clr_Bit(TCCR0,CS02);
 abe:	a3 e5       	ldi	r26, 0x53	; 83
 ac0:	b0 e0       	ldi	r27, 0x00	; 0
 ac2:	e3 e5       	ldi	r30, 0x53	; 83
 ac4:	f0 e0       	ldi	r31, 0x00	; 0
 ac6:	80 81       	ld	r24, Z
 ac8:	8b 7f       	andi	r24, 0xFB	; 251
 aca:	8c 93       	st	X, r24
}
 acc:	cf 91       	pop	r28
 ace:	df 91       	pop	r29
 ad0:	08 95       	ret

00000ad2 <Timer0_Input_capture_Interrupt_Enable>:

/*************************************************************/
		/*timer0 Input_capture_Interrupt_Enable*/
void Timer0_Input_capture_Interrupt_Enable(void)
{
 ad2:	df 93       	push	r29
 ad4:	cf 93       	push	r28
 ad6:	cd b7       	in	r28, 0x3d	; 61
 ad8:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,OCIE0);
 ada:	a9 e5       	ldi	r26, 0x59	; 89
 adc:	b0 e0       	ldi	r27, 0x00	; 0
 ade:	e9 e5       	ldi	r30, 0x59	; 89
 ae0:	f0 e0       	ldi	r31, 0x00	; 0
 ae2:	80 81       	ld	r24, Z
 ae4:	82 60       	ori	r24, 0x02	; 2
 ae6:	8c 93       	st	X, r24
}
 ae8:	cf 91       	pop	r28
 aea:	df 91       	pop	r29
 aec:	08 95       	ret

00000aee <del_ms>:
 *      Author: Hossam-PC
 */
#include "del.h"

void del_ms(uint32 x)
{
 aee:	df 93       	push	r29
 af0:	cf 93       	push	r28
 af2:	cd b7       	in	r28, 0x3d	; 61
 af4:	de b7       	in	r29, 0x3e	; 62
 af6:	2c 97       	sbiw	r28, 0x0c	; 12
 af8:	0f b6       	in	r0, 0x3f	; 63
 afa:	f8 94       	cli
 afc:	de bf       	out	0x3e, r29	; 62
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	cd bf       	out	0x3d, r28	; 61
 b02:	69 87       	std	Y+9, r22	; 0x09
 b04:	7a 87       	std	Y+10, r23	; 0x0a
 b06:	8b 87       	std	Y+11, r24	; 0x0b
 b08:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32 i,j;
	for(i=0;i<x;i++)
 b0a:	19 82       	std	Y+1, r1	; 0x01
 b0c:	1a 82       	std	Y+2, r1	; 0x02
 b0e:	1b 82       	std	Y+3, r1	; 0x03
 b10:	1c 82       	std	Y+4, r1	; 0x04
 b12:	24 c0       	rjmp	.+72     	; 0xb5c <del_ms+0x6e>
	{
		for(j=0;j<240;j++);
 b14:	1d 82       	std	Y+5, r1	; 0x05
 b16:	1e 82       	std	Y+6, r1	; 0x06
 b18:	1f 82       	std	Y+7, r1	; 0x07
 b1a:	18 86       	std	Y+8, r1	; 0x08
 b1c:	0b c0       	rjmp	.+22     	; 0xb34 <del_ms+0x46>
 b1e:	8d 81       	ldd	r24, Y+5	; 0x05
 b20:	9e 81       	ldd	r25, Y+6	; 0x06
 b22:	af 81       	ldd	r26, Y+7	; 0x07
 b24:	b8 85       	ldd	r27, Y+8	; 0x08
 b26:	01 96       	adiw	r24, 0x01	; 1
 b28:	a1 1d       	adc	r26, r1
 b2a:	b1 1d       	adc	r27, r1
 b2c:	8d 83       	std	Y+5, r24	; 0x05
 b2e:	9e 83       	std	Y+6, r25	; 0x06
 b30:	af 83       	std	Y+7, r26	; 0x07
 b32:	b8 87       	std	Y+8, r27	; 0x08
 b34:	8d 81       	ldd	r24, Y+5	; 0x05
 b36:	9e 81       	ldd	r25, Y+6	; 0x06
 b38:	af 81       	ldd	r26, Y+7	; 0x07
 b3a:	b8 85       	ldd	r27, Y+8	; 0x08
 b3c:	80 3f       	cpi	r24, 0xF0	; 240
 b3e:	91 05       	cpc	r25, r1
 b40:	a1 05       	cpc	r26, r1
 b42:	b1 05       	cpc	r27, r1
 b44:	60 f3       	brcs	.-40     	; 0xb1e <del_ms+0x30>
#include "del.h"

void del_ms(uint32 x)
{
	volatile uint32 i,j;
	for(i=0;i<x;i++)
 b46:	89 81       	ldd	r24, Y+1	; 0x01
 b48:	9a 81       	ldd	r25, Y+2	; 0x02
 b4a:	ab 81       	ldd	r26, Y+3	; 0x03
 b4c:	bc 81       	ldd	r27, Y+4	; 0x04
 b4e:	01 96       	adiw	r24, 0x01	; 1
 b50:	a1 1d       	adc	r26, r1
 b52:	b1 1d       	adc	r27, r1
 b54:	89 83       	std	Y+1, r24	; 0x01
 b56:	9a 83       	std	Y+2, r25	; 0x02
 b58:	ab 83       	std	Y+3, r26	; 0x03
 b5a:	bc 83       	std	Y+4, r27	; 0x04
 b5c:	29 81       	ldd	r18, Y+1	; 0x01
 b5e:	3a 81       	ldd	r19, Y+2	; 0x02
 b60:	4b 81       	ldd	r20, Y+3	; 0x03
 b62:	5c 81       	ldd	r21, Y+4	; 0x04
 b64:	89 85       	ldd	r24, Y+9	; 0x09
 b66:	9a 85       	ldd	r25, Y+10	; 0x0a
 b68:	ab 85       	ldd	r26, Y+11	; 0x0b
 b6a:	bc 85       	ldd	r27, Y+12	; 0x0c
 b6c:	28 17       	cp	r18, r24
 b6e:	39 07       	cpc	r19, r25
 b70:	4a 07       	cpc	r20, r26
 b72:	5b 07       	cpc	r21, r27
 b74:	78 f2       	brcs	.-98     	; 0xb14 <del_ms+0x26>
	{
		for(j=0;j<240;j++);
	}
}
 b76:	2c 96       	adiw	r28, 0x0c	; 12
 b78:	0f b6       	in	r0, 0x3f	; 63
 b7a:	f8 94       	cli
 b7c:	de bf       	out	0x3e, r29	; 62
 b7e:	0f be       	out	0x3f, r0	; 63
 b80:	cd bf       	out	0x3d, r28	; 61
 b82:	cf 91       	pop	r28
 b84:	df 91       	pop	r29
 b86:	08 95       	ret

00000b88 <main>:
void toggle_led2(void);
void LED2_Init(void);
/*********************************************************/
			/*main Function*/
int main(void)
{
 b88:	0f 93       	push	r16
 b8a:	df 93       	push	r29
 b8c:	cf 93       	push	r28
 b8e:	cd b7       	in	r28, 0x3d	; 61
 b90:	de b7       	in	r29, 0x3e	; 62

	LED0_Init();
 b92:	0e 94 15 06 	call	0xc2a	; 0xc2a <LED0_Init>
	LED1_Init();
 b96:	0e 94 39 06 	call	0xc72	; 0xc72 <LED1_Init>
	LED2_Init();
 b9a:	0e 94 5d 06 	call	0xcba	; 0xcba <LED2_Init>
	LED3_Init();
 b9e:	0e 94 81 06 	call	0xd02	; 0xd02 <LED3_Init>



	TMU_Start(&toggle_led0,1000,1,0);
 ba2:	80 e0       	ldi	r24, 0x00	; 0
 ba4:	96 e0       	ldi	r25, 0x06	; 6
 ba6:	48 ee       	ldi	r20, 0xE8	; 232
 ba8:	53 e0       	ldi	r21, 0x03	; 3
 baa:	60 e0       	ldi	r22, 0x00	; 0
 bac:	70 e0       	ldi	r23, 0x00	; 0
 bae:	21 e0       	ldi	r18, 0x01	; 1
 bb0:	00 e0       	ldi	r16, 0x00	; 0
 bb2:	0e 94 84 03 	call	0x708	; 0x708 <TMU_Start>
	TMU_Start(&toggle_led1,2000,1,1);
 bb6:	84 e2       	ldi	r24, 0x24	; 36
 bb8:	96 e0       	ldi	r25, 0x06	; 6
 bba:	40 ed       	ldi	r20, 0xD0	; 208
 bbc:	57 e0       	ldi	r21, 0x07	; 7
 bbe:	60 e0       	ldi	r22, 0x00	; 0
 bc0:	70 e0       	ldi	r23, 0x00	; 0
 bc2:	21 e0       	ldi	r18, 0x01	; 1
 bc4:	01 e0       	ldi	r16, 0x01	; 1
 bc6:	0e 94 84 03 	call	0x708	; 0x708 <TMU_Start>
	TMU_Start(&toggle_led2,3000,1,2);
 bca:	88 e4       	ldi	r24, 0x48	; 72
 bcc:	96 e0       	ldi	r25, 0x06	; 6
 bce:	48 eb       	ldi	r20, 0xB8	; 184
 bd0:	5b e0       	ldi	r21, 0x0B	; 11
 bd2:	60 e0       	ldi	r22, 0x00	; 0
 bd4:	70 e0       	ldi	r23, 0x00	; 0
 bd6:	21 e0       	ldi	r18, 0x01	; 1
 bd8:	02 e0       	ldi	r16, 0x02	; 2
 bda:	0e 94 84 03 	call	0x708	; 0x708 <TMU_Start>
	TMU_Start(&toggle_led3,4000,1,3);
 bde:	8c e6       	ldi	r24, 0x6C	; 108
 be0:	96 e0       	ldi	r25, 0x06	; 6
 be2:	40 ea       	ldi	r20, 0xA0	; 160
 be4:	5f e0       	ldi	r21, 0x0F	; 15
 be6:	60 e0       	ldi	r22, 0x00	; 0
 be8:	70 e0       	ldi	r23, 0x00	; 0
 bea:	21 e0       	ldi	r18, 0x01	; 1
 bec:	03 e0       	ldi	r16, 0x03	; 3
 bee:	0e 94 84 03 	call	0x708	; 0x708 <TMU_Start>


	TMU_Init(1,1);
 bf2:	81 e0       	ldi	r24, 0x01	; 1
 bf4:	61 e0       	ldi	r22, 0x01	; 1
 bf6:	0e 94 61 03 	call	0x6c2	; 0x6c2 <TMU_Init>

	while(1)
	{
		TMU_Dispatch();
 bfa:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <TMU_Dispatch>
 bfe:	fd cf       	rjmp	.-6      	; 0xbfa <main+0x72>

00000c00 <toggle_led0>:

/*****************************************************************/
					/*Toggle 1 Function*/

void toggle_led0(void)
{
 c00:	df 93       	push	r29
 c02:	cf 93       	push	r28
 c04:	cd b7       	in	r28, 0x3d	; 61
 c06:	de b7       	in	r29, 0x3e	; 62
	if(DIO_ReadPin(LED0)==LOW)
 c08:	8c e0       	ldi	r24, 0x0C	; 12
 c0a:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_ReadPin>
 c0e:	88 23       	and	r24, r24
 c10:	29 f4       	brne	.+10     	; 0xc1c <toggle_led0+0x1c>
	{
	DIO_WritePin(LED0,HIGH);
 c12:	8c e0       	ldi	r24, 0x0C	; 12
 c14:	61 e0       	ldi	r22, 0x01	; 1
 c16:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
 c1a:	04 c0       	rjmp	.+8      	; 0xc24 <toggle_led0+0x24>
	}
	else
	{
		DIO_WritePin(LED0,LOW);
 c1c:	8c e0       	ldi	r24, 0x0C	; 12
 c1e:	60 e0       	ldi	r22, 0x00	; 0
 c20:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
	}
}
 c24:	cf 91       	pop	r28
 c26:	df 91       	pop	r29
 c28:	08 95       	ret

00000c2a <LED0_Init>:
/*****************************************************************/
					/*Init LED0 Function*/
void LED0_Init(void)
{
 c2a:	df 93       	push	r29
 c2c:	cf 93       	push	r28
 c2e:	cd b7       	in	r28, 0x3d	; 61
 c30:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED0,OUTPUT);
 c32:	8c e0       	ldi	r24, 0x0C	; 12
 c34:	61 e0       	ldi	r22, 0x01	; 1
 c36:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPinDirection>
	DIO_WritePin(LED0,LOW);
 c3a:	8c e0       	ldi	r24, 0x0C	; 12
 c3c:	60 e0       	ldi	r22, 0x00	; 0
 c3e:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
}
 c42:	cf 91       	pop	r28
 c44:	df 91       	pop	r29
 c46:	08 95       	ret

00000c48 <toggle_led1>:
/*****************************************************************/
					/*Toggle 1 Function*/
void toggle_led1(void)
{
 c48:	df 93       	push	r29
 c4a:	cf 93       	push	r28
 c4c:	cd b7       	in	r28, 0x3d	; 61
 c4e:	de b7       	in	r29, 0x3e	; 62
	if(DIO_ReadPin(LED1)==LOW)
 c50:	8d e0       	ldi	r24, 0x0D	; 13
 c52:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_ReadPin>
 c56:	88 23       	and	r24, r24
 c58:	29 f4       	brne	.+10     	; 0xc64 <toggle_led1+0x1c>
	{
	DIO_WritePin(LED1,HIGH);
 c5a:	8d e0       	ldi	r24, 0x0D	; 13
 c5c:	61 e0       	ldi	r22, 0x01	; 1
 c5e:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
 c62:	04 c0       	rjmp	.+8      	; 0xc6c <toggle_led1+0x24>
	}
	else
	{
		DIO_WritePin(LED1,LOW);
 c64:	8d e0       	ldi	r24, 0x0D	; 13
 c66:	60 e0       	ldi	r22, 0x00	; 0
 c68:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
	}
}
 c6c:	cf 91       	pop	r28
 c6e:	df 91       	pop	r29
 c70:	08 95       	ret

00000c72 <LED1_Init>:


/*****************************************************************/
					/*Init LED1 Function*/
void LED1_Init(void)
{
 c72:	df 93       	push	r29
 c74:	cf 93       	push	r28
 c76:	cd b7       	in	r28, 0x3d	; 61
 c78:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED1,OUTPUT);
 c7a:	8d e0       	ldi	r24, 0x0D	; 13
 c7c:	61 e0       	ldi	r22, 0x01	; 1
 c7e:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPinDirection>
	DIO_WritePin(LED1,LOW);
 c82:	8d e0       	ldi	r24, 0x0D	; 13
 c84:	60 e0       	ldi	r22, 0x00	; 0
 c86:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
}
 c8a:	cf 91       	pop	r28
 c8c:	df 91       	pop	r29
 c8e:	08 95       	ret

00000c90 <toggle_led2>:
/*****************************************************************/
					/*Toggle 2 Function*/

void toggle_led2(void)
{
 c90:	df 93       	push	r29
 c92:	cf 93       	push	r28
 c94:	cd b7       	in	r28, 0x3d	; 61
 c96:	de b7       	in	r29, 0x3e	; 62
	if(DIO_ReadPin(LED2)==LOW)
 c98:	8e e0       	ldi	r24, 0x0E	; 14
 c9a:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_ReadPin>
 c9e:	88 23       	and	r24, r24
 ca0:	29 f4       	brne	.+10     	; 0xcac <toggle_led2+0x1c>
	{
	DIO_WritePin(LED2,HIGH);
 ca2:	8e e0       	ldi	r24, 0x0E	; 14
 ca4:	61 e0       	ldi	r22, 0x01	; 1
 ca6:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
 caa:	04 c0       	rjmp	.+8      	; 0xcb4 <toggle_led2+0x24>
	}
	else
	{
		DIO_WritePin(LED2,LOW);
 cac:	8e e0       	ldi	r24, 0x0E	; 14
 cae:	60 e0       	ldi	r22, 0x00	; 0
 cb0:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
	}
}
 cb4:	cf 91       	pop	r28
 cb6:	df 91       	pop	r29
 cb8:	08 95       	ret

00000cba <LED2_Init>:
/*****************************************************************/
					/*Init LED3 Function*/
void LED2_Init(void)
{
 cba:	df 93       	push	r29
 cbc:	cf 93       	push	r28
 cbe:	cd b7       	in	r28, 0x3d	; 61
 cc0:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED2,OUTPUT);
 cc2:	8e e0       	ldi	r24, 0x0E	; 14
 cc4:	61 e0       	ldi	r22, 0x01	; 1
 cc6:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPinDirection>
	DIO_WritePin(LED2,LOW);
 cca:	8e e0       	ldi	r24, 0x0E	; 14
 ccc:	60 e0       	ldi	r22, 0x00	; 0
 cce:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
}
 cd2:	cf 91       	pop	r28
 cd4:	df 91       	pop	r29
 cd6:	08 95       	ret

00000cd8 <toggle_led3>:

/*****************************************************************/
					/*Toggle 3 Function*/

void toggle_led3(void)
{
 cd8:	df 93       	push	r29
 cda:	cf 93       	push	r28
 cdc:	cd b7       	in	r28, 0x3d	; 61
 cde:	de b7       	in	r29, 0x3e	; 62
	if(DIO_ReadPin(LED3)==LOW)
 ce0:	8f e0       	ldi	r24, 0x0F	; 15
 ce2:	0e 94 6d 01 	call	0x2da	; 0x2da <DIO_ReadPin>
 ce6:	88 23       	and	r24, r24
 ce8:	29 f4       	brne	.+10     	; 0xcf4 <toggle_led3+0x1c>
	{
	DIO_WritePin(LED3,HIGH);
 cea:	8f e0       	ldi	r24, 0x0F	; 15
 cec:	61 e0       	ldi	r22, 0x01	; 1
 cee:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
 cf2:	04 c0       	rjmp	.+8      	; 0xcfc <toggle_led3+0x24>
	}
	else
	{
		DIO_WritePin(LED3,LOW);
 cf4:	8f e0       	ldi	r24, 0x0F	; 15
 cf6:	60 e0       	ldi	r22, 0x00	; 0
 cf8:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
	}
}
 cfc:	cf 91       	pop	r28
 cfe:	df 91       	pop	r29
 d00:	08 95       	ret

00000d02 <LED3_Init>:
/*****************************************************************/
					/*Init LED3 Function*/
void LED3_Init(void)
{
 d02:	df 93       	push	r29
 d04:	cf 93       	push	r28
 d06:	cd b7       	in	r28, 0x3d	; 61
 d08:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED3,OUTPUT);
 d0a:	8f e0       	ldi	r24, 0x0F	; 15
 d0c:	61 e0       	ldi	r22, 0x01	; 1
 d0e:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_SetPinDirection>
	DIO_WritePin(LED3,LOW);
 d12:	8f e0       	ldi	r24, 0x0F	; 15
 d14:	60 e0       	ldi	r22, 0x00	; 0
 d16:	0e 94 78 00 	call	0xf0	; 0xf0 <DIO_WritePin>
}
 d1a:	cf 91       	pop	r28
 d1c:	df 91       	pop	r29
 d1e:	08 95       	ret

00000d20 <__udivmodsi4>:
 d20:	a1 e2       	ldi	r26, 0x21	; 33
 d22:	1a 2e       	mov	r1, r26
 d24:	aa 1b       	sub	r26, r26
 d26:	bb 1b       	sub	r27, r27
 d28:	fd 01       	movw	r30, r26
 d2a:	0d c0       	rjmp	.+26     	; 0xd46 <__udivmodsi4_ep>

00000d2c <__udivmodsi4_loop>:
 d2c:	aa 1f       	adc	r26, r26
 d2e:	bb 1f       	adc	r27, r27
 d30:	ee 1f       	adc	r30, r30
 d32:	ff 1f       	adc	r31, r31
 d34:	a2 17       	cp	r26, r18
 d36:	b3 07       	cpc	r27, r19
 d38:	e4 07       	cpc	r30, r20
 d3a:	f5 07       	cpc	r31, r21
 d3c:	20 f0       	brcs	.+8      	; 0xd46 <__udivmodsi4_ep>
 d3e:	a2 1b       	sub	r26, r18
 d40:	b3 0b       	sbc	r27, r19
 d42:	e4 0b       	sbc	r30, r20
 d44:	f5 0b       	sbc	r31, r21

00000d46 <__udivmodsi4_ep>:
 d46:	66 1f       	adc	r22, r22
 d48:	77 1f       	adc	r23, r23
 d4a:	88 1f       	adc	r24, r24
 d4c:	99 1f       	adc	r25, r25
 d4e:	1a 94       	dec	r1
 d50:	69 f7       	brne	.-38     	; 0xd2c <__udivmodsi4_loop>
 d52:	60 95       	com	r22
 d54:	70 95       	com	r23
 d56:	80 95       	com	r24
 d58:	90 95       	com	r25
 d5a:	9b 01       	movw	r18, r22
 d5c:	ac 01       	movw	r20, r24
 d5e:	bd 01       	movw	r22, r26
 d60:	cf 01       	movw	r24, r30
 d62:	08 95       	ret

00000d64 <_exit>:
 d64:	f8 94       	cli

00000d66 <__stop_program>:
 d66:	ff cf       	rjmp	.-2      	; 0xd66 <__stop_program>
