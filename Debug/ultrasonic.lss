
ultrasonic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e04  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  00001e04  00001e98  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800088  00800088  00001ec0  2**0
                  ALLOC
  3 .stab         00001470  00000000  00000000  00001ec0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000c2a  00000000  00000000  00003330  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00003f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000040ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00004249  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  0000628e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000738f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  00008314  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  00008494  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  00008756  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00008fe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	fe e1       	ldi	r31, 0x1E	; 30
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 38       	cpi	r26, 0x8C	; 140
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <main>
      8a:	0c 94 00 0f 	jmp	0x1e00	; 0x1e00 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 98 0e 	jmp	0x1d30	; 0x1d30 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b4 0e 	jmp	0x1d68	; 0x1d68 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a0 0e 	jmp	0x1d40	; 0x1d40 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e8       	ldi	r22, 0x80	; 128
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 bc 0e 	jmp	0x1d78	; 0x1d78 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a4 0e 	jmp	0x1d48	; 0x1d48 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c4 0e 	jmp	0x1d88	; 0x1d88 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_WritePin>:
#include "Gpio.h"



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	00 d0       	rcall	.+0      	; 0xca4 <DIO_WritePin+0x6>
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	89 83       	std	Y+1, r24	; 0x01
     caa:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==LOW)
     cac:	8a 81       	ldd	r24, Y+2	; 0x02
     cae:	88 23       	and	r24, r24
     cb0:	09 f0       	breq	.+2      	; 0xcb4 <DIO_WritePin+0x16>
     cb2:	74 c0       	rjmp	.+232    	; 0xd9c <DIO_WritePin+0xfe>
	{
		if((PinNum>=0)&&(PinNum<=7))   //PORT A
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	88 30       	cpi	r24, 0x08	; 8
     cb8:	a8 f4       	brcc	.+42     	; 0xce4 <DIO_WritePin+0x46>
		{
			Clr_Bit(PORTA,PinNum);
     cba:	ab e3       	ldi	r26, 0x3B	; 59
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	eb e3       	ldi	r30, 0x3B	; 59
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <DIO_WritePin+0x3a>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <DIO_WritePin+0x36>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	cd c0       	rjmp	.+410    	; 0xe7e <DIO_WritePin+0x1e0>
		}

		else if((PinNum>=8)&&(PinNum<=15)) // PORT B
     ce4:	89 81       	ldd	r24, Y+1	; 0x01
     ce6:	88 30       	cpi	r24, 0x08	; 8
     ce8:	d8 f0       	brcs	.+54     	; 0xd20 <DIO_WritePin+0x82>
     cea:	89 81       	ldd	r24, Y+1	; 0x01
     cec:	80 31       	cpi	r24, 0x10	; 16
     cee:	c0 f4       	brcc	.+48     	; 0xd20 <DIO_WritePin+0x82>
		{
			Clr_Bit(PORTB,(PinNum-8));
     cf0:	a8 e3       	ldi	r26, 0x38	; 56
     cf2:	b0 e0       	ldi	r27, 0x00	; 0
     cf4:	e8 e3       	ldi	r30, 0x38	; 56
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	48 2f       	mov	r20, r24
     cfc:	89 81       	ldd	r24, Y+1	; 0x01
     cfe:	88 2f       	mov	r24, r24
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9c 01       	movw	r18, r24
     d04:	28 50       	subi	r18, 0x08	; 8
     d06:	30 40       	sbci	r19, 0x00	; 0
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	02 2e       	mov	r0, r18
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <DIO_WritePin+0x76>
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	0a 94       	dec	r0
     d16:	e2 f7       	brpl	.-8      	; 0xd10 <DIO_WritePin+0x72>
     d18:	80 95       	com	r24
     d1a:	84 23       	and	r24, r20
     d1c:	8c 93       	st	X, r24
     d1e:	af c0       	rjmp	.+350    	; 0xe7e <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=16)&&(PinNum<=23)) //PORT C
     d20:	89 81       	ldd	r24, Y+1	; 0x01
     d22:	80 31       	cpi	r24, 0x10	; 16
     d24:	d8 f0       	brcs	.+54     	; 0xd5c <DIO_WritePin+0xbe>
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	88 31       	cpi	r24, 0x18	; 24
     d2a:	c0 f4       	brcc	.+48     	; 0xd5c <DIO_WritePin+0xbe>
		{
			Clr_Bit(PORTC,(PinNum-16));
     d2c:	a5 e3       	ldi	r26, 0x35	; 53
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	e5 e3       	ldi	r30, 0x35	; 53
     d32:	f0 e0       	ldi	r31, 0x00	; 0
     d34:	80 81       	ld	r24, Z
     d36:	48 2f       	mov	r20, r24
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	88 2f       	mov	r24, r24
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	9c 01       	movw	r18, r24
     d40:	20 51       	subi	r18, 0x10	; 16
     d42:	30 40       	sbci	r19, 0x00	; 0
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	02 2e       	mov	r0, r18
     d4a:	02 c0       	rjmp	.+4      	; 0xd50 <DIO_WritePin+0xb2>
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
     d50:	0a 94       	dec	r0
     d52:	e2 f7       	brpl	.-8      	; 0xd4c <DIO_WritePin+0xae>
     d54:	80 95       	com	r24
     d56:	84 23       	and	r24, r20
     d58:	8c 93       	st	X, r24
     d5a:	91 c0       	rjmp	.+290    	; 0xe7e <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=24)&&(PinNum<=31)) //PORT D
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 31       	cpi	r24, 0x18	; 24
     d60:	08 f4       	brcc	.+2      	; 0xd64 <DIO_WritePin+0xc6>
     d62:	8d c0       	rjmp	.+282    	; 0xe7e <DIO_WritePin+0x1e0>
     d64:	89 81       	ldd	r24, Y+1	; 0x01
     d66:	80 32       	cpi	r24, 0x20	; 32
     d68:	08 f0       	brcs	.+2      	; 0xd6c <DIO_WritePin+0xce>
     d6a:	89 c0       	rjmp	.+274    	; 0xe7e <DIO_WritePin+0x1e0>
		{
			Clr_Bit(PORTD,(PinNum-24));
     d6c:	a2 e3       	ldi	r26, 0x32	; 50
     d6e:	b0 e0       	ldi	r27, 0x00	; 0
     d70:	e2 e3       	ldi	r30, 0x32	; 50
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	80 81       	ld	r24, Z
     d76:	48 2f       	mov	r20, r24
     d78:	89 81       	ldd	r24, Y+1	; 0x01
     d7a:	88 2f       	mov	r24, r24
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	9c 01       	movw	r18, r24
     d80:	28 51       	subi	r18, 0x18	; 24
     d82:	30 40       	sbci	r19, 0x00	; 0
     d84:	81 e0       	ldi	r24, 0x01	; 1
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	02 2e       	mov	r0, r18
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <DIO_WritePin+0xf2>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	0a 94       	dec	r0
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <DIO_WritePin+0xee>
     d94:	80 95       	com	r24
     d96:	84 23       	and	r24, r20
     d98:	8c 93       	st	X, r24
     d9a:	71 c0       	rjmp	.+226    	; 0xe7e <DIO_WritePin+0x1e0>
		}
	}
	else if(PinValue==HIGH)
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	81 30       	cpi	r24, 0x01	; 1
     da0:	09 f0       	breq	.+2      	; 0xda4 <DIO_WritePin+0x106>
     da2:	6d c0       	rjmp	.+218    	; 0xe7e <DIO_WritePin+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	88 30       	cpi	r24, 0x08	; 8
     da8:	a0 f4       	brcc	.+40     	; 0xdd2 <DIO_WritePin+0x134>
		{
			Set_Bit(PORTA,PinNum);
     daa:	ab e3       	ldi	r26, 0x3B	; 59
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	eb e3       	ldi	r30, 0x3B	; 59
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	80 81       	ld	r24, Z
     db4:	48 2f       	mov	r20, r24
     db6:	89 81       	ldd	r24, Y+1	; 0x01
     db8:	28 2f       	mov	r18, r24
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	81 e0       	ldi	r24, 0x01	; 1
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	02 2e       	mov	r0, r18
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <DIO_WritePin+0x12a>
     dc4:	88 0f       	add	r24, r24
     dc6:	99 1f       	adc	r25, r25
     dc8:	0a 94       	dec	r0
     dca:	e2 f7       	brpl	.-8      	; 0xdc4 <DIO_WritePin+0x126>
     dcc:	84 2b       	or	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	56 c0       	rjmp	.+172    	; 0xe7e <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=8&&PinNum<=15))	//PORT B
     dd2:	89 81       	ldd	r24, Y+1	; 0x01
     dd4:	88 30       	cpi	r24, 0x08	; 8
     dd6:	d0 f0       	brcs	.+52     	; 0xe0c <DIO_WritePin+0x16e>
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	80 31       	cpi	r24, 0x10	; 16
     ddc:	b8 f4       	brcc	.+46     	; 0xe0c <DIO_WritePin+0x16e>
		{
			Set_Bit(PORTB,(PinNum-8));
     dde:	a8 e3       	ldi	r26, 0x38	; 56
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e8 e3       	ldi	r30, 0x38	; 56
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	48 2f       	mov	r20, r24
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	9c 01       	movw	r18, r24
     df2:	28 50       	subi	r18, 0x08	; 8
     df4:	30 40       	sbci	r19, 0x00	; 0
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	02 2e       	mov	r0, r18
     dfc:	02 c0       	rjmp	.+4      	; 0xe02 <DIO_WritePin+0x164>
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	0a 94       	dec	r0
     e04:	e2 f7       	brpl	.-8      	; 0xdfe <DIO_WritePin+0x160>
     e06:	84 2b       	or	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	39 c0       	rjmp	.+114    	; 0xe7e <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=16&&PinNum<=23))	//PORT C
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	80 31       	cpi	r24, 0x10	; 16
     e10:	d0 f0       	brcs	.+52     	; 0xe46 <DIO_WritePin+0x1a8>
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	88 31       	cpi	r24, 0x18	; 24
     e16:	b8 f4       	brcc	.+46     	; 0xe46 <DIO_WritePin+0x1a8>
		{
			Set_Bit(PORTC,(PinNum-16));
     e18:	a5 e3       	ldi	r26, 0x35	; 53
     e1a:	b0 e0       	ldi	r27, 0x00	; 0
     e1c:	e5 e3       	ldi	r30, 0x35	; 53
     e1e:	f0 e0       	ldi	r31, 0x00	; 0
     e20:	80 81       	ld	r24, Z
     e22:	48 2f       	mov	r20, r24
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9c 01       	movw	r18, r24
     e2c:	20 51       	subi	r18, 0x10	; 16
     e2e:	30 40       	sbci	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_WritePin+0x19e>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_WritePin+0x19a>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	1c c0       	rjmp	.+56     	; 0xe7e <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=24&&PinNum<=31))	//PORT D
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 31       	cpi	r24, 0x18	; 24
     e4a:	c8 f0       	brcs	.+50     	; 0xe7e <DIO_WritePin+0x1e0>
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	80 32       	cpi	r24, 0x20	; 32
     e50:	b0 f4       	brcc	.+44     	; 0xe7e <DIO_WritePin+0x1e0>
		{
			Set_Bit(PORTD,(PinNum-24));
     e52:	a2 e3       	ldi	r26, 0x32	; 50
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e2 e3       	ldi	r30, 0x32	; 50
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9c 01       	movw	r18, r24
     e66:	28 51       	subi	r18, 0x18	; 24
     e68:	30 40       	sbci	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_WritePin+0x1d8>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_WritePin+0x1d4>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
		}
	}
}
     e7e:	0f 90       	pop	r0
     e80:	0f 90       	pop	r0
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	08 95       	ret

00000e88 <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	00 d0       	rcall	.+0      	; 0xe8e <DIO_ReadPin+0x6>
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	8a 83       	std	Y+2, r24	; 0x02
	uint8 res=0;
     e94:	19 82       	std	Y+1, r1	; 0x01
	if((PinNum>=0)&&(PinNum<=7))	//PORT A
     e96:	8a 81       	ldd	r24, Y+2	; 0x02
     e98:	88 30       	cpi	r24, 0x08	; 8
     e9a:	90 f4       	brcc	.+36     	; 0xec0 <DIO_ReadPin+0x38>
	{
		res= Get_Bit(PINA,PinNum);
     e9c:	e9 e3       	ldi	r30, 0x39	; 57
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	48 2f       	mov	r20, r24
     ea4:	8a 81       	ldd	r24, Y+2	; 0x02
     ea6:	28 2f       	mov	r18, r24
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	02 2e       	mov	r0, r18
     eb0:	02 c0       	rjmp	.+4      	; 0xeb6 <DIO_ReadPin+0x2e>
     eb2:	88 0f       	add	r24, r24
     eb4:	99 1f       	adc	r25, r25
     eb6:	0a 94       	dec	r0
     eb8:	e2 f7       	brpl	.-8      	; 0xeb2 <DIO_ReadPin+0x2a>
     eba:	84 23       	and	r24, r20
     ebc:	89 83       	std	Y+1, r24	; 0x01
     ebe:	50 c0       	rjmp	.+160    	; 0xf60 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=8)&&(PinNum<=15))	//PORT B
     ec0:	8a 81       	ldd	r24, Y+2	; 0x02
     ec2:	88 30       	cpi	r24, 0x08	; 8
     ec4:	c0 f0       	brcs	.+48     	; 0xef6 <DIO_ReadPin+0x6e>
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	80 31       	cpi	r24, 0x10	; 16
     eca:	a8 f4       	brcc	.+42     	; 0xef6 <DIO_ReadPin+0x6e>
	{
		res= Get_Bit(PINB,(PinNum-8));
     ecc:	e6 e3       	ldi	r30, 0x36	; 54
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	80 81       	ld	r24, Z
     ed2:	48 2f       	mov	r20, r24
     ed4:	8a 81       	ldd	r24, Y+2	; 0x02
     ed6:	88 2f       	mov	r24, r24
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	9c 01       	movw	r18, r24
     edc:	28 50       	subi	r18, 0x08	; 8
     ede:	30 40       	sbci	r19, 0x00	; 0
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	02 2e       	mov	r0, r18
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <DIO_ReadPin+0x64>
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	0a 94       	dec	r0
     eee:	e2 f7       	brpl	.-8      	; 0xee8 <DIO_ReadPin+0x60>
     ef0:	84 23       	and	r24, r20
     ef2:	89 83       	std	Y+1, r24	; 0x01
     ef4:	35 c0       	rjmp	.+106    	; 0xf60 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=16)&&(PinNum<=23))	//PORT C
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	80 31       	cpi	r24, 0x10	; 16
     efa:	c0 f0       	brcs	.+48     	; 0xf2c <DIO_ReadPin+0xa4>
     efc:	8a 81       	ldd	r24, Y+2	; 0x02
     efe:	88 31       	cpi	r24, 0x18	; 24
     f00:	a8 f4       	brcc	.+42     	; 0xf2c <DIO_ReadPin+0xa4>
	{
		res= Get_Bit(PINC,(PinNum-16));
     f02:	e3 e3       	ldi	r30, 0x33	; 51
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	9c 01       	movw	r18, r24
     f12:	20 51       	subi	r18, 0x10	; 16
     f14:	30 40       	sbci	r19, 0x00	; 0
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	02 2e       	mov	r0, r18
     f1c:	02 c0       	rjmp	.+4      	; 0xf22 <DIO_ReadPin+0x9a>
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	0a 94       	dec	r0
     f24:	e2 f7       	brpl	.-8      	; 0xf1e <DIO_ReadPin+0x96>
     f26:	84 23       	and	r24, r20
     f28:	89 83       	std	Y+1, r24	; 0x01
     f2a:	1a c0       	rjmp	.+52     	; 0xf60 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=24)&&(PinNum<=31))	//PORT D
     f2c:	8a 81       	ldd	r24, Y+2	; 0x02
     f2e:	88 31       	cpi	r24, 0x18	; 24
     f30:	b8 f0       	brcs	.+46     	; 0xf60 <DIO_ReadPin+0xd8>
     f32:	8a 81       	ldd	r24, Y+2	; 0x02
     f34:	80 32       	cpi	r24, 0x20	; 32
     f36:	a0 f4       	brcc	.+40     	; 0xf60 <DIO_ReadPin+0xd8>
	{
		res= Get_Bit(PIND,(PinNum-24));
     f38:	e0 e3       	ldi	r30, 0x30	; 48
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	88 2f       	mov	r24, r24
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	9c 01       	movw	r18, r24
     f48:	28 51       	subi	r18, 0x18	; 24
     f4a:	30 40       	sbci	r19, 0x00	; 0
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <DIO_ReadPin+0xd0>
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <DIO_ReadPin+0xcc>
     f5c:	84 23       	and	r24, r20
     f5e:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
     f60:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <DIO_SetPinDirection+0x6>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
     f78:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==OUTPUT)						//set pin direction high
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	81 30       	cpi	r24, 0x01	; 1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <DIO_SetPinDirection+0x16>
     f80:	70 c0       	rjmp	.+224    	; 0x1062 <DIO_SetPinDirection+0xf6>
	{
		if((PinNum>=0)&&(PinNum<=7))	//PORT A
     f82:	89 81       	ldd	r24, Y+1	; 0x01
     f84:	88 30       	cpi	r24, 0x08	; 8
     f86:	a0 f4       	brcc	.+40     	; 0xfb0 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     f88:	aa e3       	ldi	r26, 0x3A	; 58
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	ea e3       	ldi	r30, 0x3A	; 58
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	48 2f       	mov	r20, r24
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	28 2f       	mov	r18, r24
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	81 e0       	ldi	r24, 0x01	; 1
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	02 2e       	mov	r0, r18
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <DIO_SetPinDirection+0x3a>
     fa2:	88 0f       	add	r24, r24
     fa4:	99 1f       	adc	r25, r25
     fa6:	0a 94       	dec	r0
     fa8:	e2 f7       	brpl	.-8      	; 0xfa2 <DIO_SetPinDirection+0x36>
     faa:	84 2b       	or	r24, r20
     fac:	8c 93       	st	X, r24
     fae:	ce c0       	rjmp	.+412    	; 0x114c <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	88 30       	cpi	r24, 0x08	; 8
     fb4:	d0 f0       	brcs	.+52     	; 0xfea <DIO_SetPinDirection+0x7e>
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	80 31       	cpi	r24, 0x10	; 16
     fba:	b8 f4       	brcc	.+46     	; 0xfea <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
     fbc:	a7 e3       	ldi	r26, 0x37	; 55
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e7 e3       	ldi	r30, 0x37	; 55
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	89 81       	ldd	r24, Y+1	; 0x01
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	9c 01       	movw	r18, r24
     fd0:	28 50       	subi	r18, 0x08	; 8
     fd2:	30 40       	sbci	r19, 0x00	; 0
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	02 2e       	mov	r0, r18
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <DIO_SetPinDirection+0x74>
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	0a 94       	dec	r0
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <DIO_SetPinDirection+0x70>
     fe4:	84 2b       	or	r24, r20
     fe6:	8c 93       	st	X, r24
     fe8:	b1 c0       	rjmp	.+354    	; 0x114c <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	80 31       	cpi	r24, 0x10	; 16
     fee:	d0 f0       	brcs	.+52     	; 0x1024 <DIO_SetPinDirection+0xb8>
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	88 31       	cpi	r24, 0x18	; 24
     ff4:	b8 f4       	brcc	.+46     	; 0x1024 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
     ff6:	a4 e3       	ldi	r26, 0x34	; 52
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	e4 e3       	ldi	r30, 0x34	; 52
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	88 2f       	mov	r24, r24
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	9c 01       	movw	r18, r24
    100a:	20 51       	subi	r18, 0x10	; 16
    100c:	30 40       	sbci	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_SetPinDirection+0xae>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_SetPinDirection+0xaa>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	94 c0       	rjmp	.+296    	; 0x114c <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=24)&&(PinNum<=31))		//PORT D
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	88 31       	cpi	r24, 0x18	; 24
    1028:	08 f4       	brcc	.+2      	; 0x102c <DIO_SetPinDirection+0xc0>
    102a:	90 c0       	rjmp	.+288    	; 0x114c <DIO_SetPinDirection+0x1e0>
    102c:	89 81       	ldd	r24, Y+1	; 0x01
    102e:	80 32       	cpi	r24, 0x20	; 32
    1030:	08 f0       	brcs	.+2      	; 0x1034 <DIO_SetPinDirection+0xc8>
    1032:	8c c0       	rjmp	.+280    	; 0x114c <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRD,(PinNum-24));
    1034:	a1 e3       	ldi	r26, 0x31	; 49
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e1 e3       	ldi	r30, 0x31	; 49
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	48 2f       	mov	r20, r24
    1040:	89 81       	ldd	r24, Y+1	; 0x01
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9c 01       	movw	r18, r24
    1048:	28 51       	subi	r18, 0x18	; 24
    104a:	30 40       	sbci	r19, 0x00	; 0
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	02 2e       	mov	r0, r18
    1052:	02 c0       	rjmp	.+4      	; 0x1058 <DIO_SetPinDirection+0xec>
    1054:	88 0f       	add	r24, r24
    1056:	99 1f       	adc	r25, r25
    1058:	0a 94       	dec	r0
    105a:	e2 f7       	brpl	.-8      	; 0x1054 <DIO_SetPinDirection+0xe8>
    105c:	84 2b       	or	r24, r20
    105e:	8c 93       	st	X, r24
    1060:	75 c0       	rjmp	.+234    	; 0x114c <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==INPUT)
    1062:	8a 81       	ldd	r24, Y+2	; 0x02
    1064:	88 23       	and	r24, r24
    1066:	09 f0       	breq	.+2      	; 0x106a <DIO_SetPinDirection+0xfe>
    1068:	71 c0       	rjmp	.+226    	; 0x114c <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 30       	cpi	r24, 0x08	; 8
    106e:	a8 f4       	brcc	.+42     	; 0x109a <DIO_SetPinDirection+0x12e>
		{
			Clr_Bit(DDRA,PinNum);
    1070:	aa e3       	ldi	r26, 0x3A	; 58
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ea e3       	ldi	r30, 0x3A	; 58
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	80 81       	ld	r24, Z
    107a:	48 2f       	mov	r20, r24
    107c:	89 81       	ldd	r24, Y+1	; 0x01
    107e:	28 2f       	mov	r18, r24
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_SetPinDirection+0x122>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_SetPinDirection+0x11e>
    1092:	80 95       	com	r24
    1094:	84 23       	and	r24, r20
    1096:	8c 93       	st	X, r24
    1098:	59 c0       	rjmp	.+178    	; 0x114c <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 30       	cpi	r24, 0x08	; 8
    109e:	d8 f0       	brcs	.+54     	; 0x10d6 <DIO_SetPinDirection+0x16a>
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	80 31       	cpi	r24, 0x10	; 16
    10a4:	c0 f4       	brcc	.+48     	; 0x10d6 <DIO_SetPinDirection+0x16a>
		{
			Clr_Bit(DDRB,(PinNum-8));
    10a6:	a7 e3       	ldi	r26, 0x37	; 55
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	e7 e3       	ldi	r30, 0x37	; 55
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	80 81       	ld	r24, Z
    10b0:	48 2f       	mov	r20, r24
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	88 2f       	mov	r24, r24
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	9c 01       	movw	r18, r24
    10ba:	28 50       	subi	r18, 0x08	; 8
    10bc:	30 40       	sbci	r19, 0x00	; 0
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	02 2e       	mov	r0, r18
    10c4:	02 c0       	rjmp	.+4      	; 0x10ca <DIO_SetPinDirection+0x15e>
    10c6:	88 0f       	add	r24, r24
    10c8:	99 1f       	adc	r25, r25
    10ca:	0a 94       	dec	r0
    10cc:	e2 f7       	brpl	.-8      	; 0x10c6 <DIO_SetPinDirection+0x15a>
    10ce:	80 95       	com	r24
    10d0:	84 23       	and	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	3b c0       	rjmp	.+118    	; 0x114c <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
    10d6:	89 81       	ldd	r24, Y+1	; 0x01
    10d8:	80 31       	cpi	r24, 0x10	; 16
    10da:	d8 f0       	brcs	.+54     	; 0x1112 <DIO_SetPinDirection+0x1a6>
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	88 31       	cpi	r24, 0x18	; 24
    10e0:	c0 f4       	brcc	.+48     	; 0x1112 <DIO_SetPinDirection+0x1a6>
		{
			Clr_Bit(DDRC,(PinNum-16));
    10e2:	a4 e3       	ldi	r26, 0x34	; 52
    10e4:	b0 e0       	ldi	r27, 0x00	; 0
    10e6:	e4 e3       	ldi	r30, 0x34	; 52
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	80 81       	ld	r24, Z
    10ec:	48 2f       	mov	r20, r24
    10ee:	89 81       	ldd	r24, Y+1	; 0x01
    10f0:	88 2f       	mov	r24, r24
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	9c 01       	movw	r18, r24
    10f6:	20 51       	subi	r18, 0x10	; 16
    10f8:	30 40       	sbci	r19, 0x00	; 0
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	02 2e       	mov	r0, r18
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <DIO_SetPinDirection+0x19a>
    1102:	88 0f       	add	r24, r24
    1104:	99 1f       	adc	r25, r25
    1106:	0a 94       	dec	r0
    1108:	e2 f7       	brpl	.-8      	; 0x1102 <DIO_SetPinDirection+0x196>
    110a:	80 95       	com	r24
    110c:	84 23       	and	r24, r20
    110e:	8c 93       	st	X, r24
    1110:	1d c0       	rjmp	.+58     	; 0x114c <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=24)&&(PinNum<=31)) 	//PORT D
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	88 31       	cpi	r24, 0x18	; 24
    1116:	d0 f0       	brcs	.+52     	; 0x114c <DIO_SetPinDirection+0x1e0>
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	80 32       	cpi	r24, 0x20	; 32
    111c:	b8 f4       	brcc	.+46     	; 0x114c <DIO_SetPinDirection+0x1e0>

		{
			Clr_Bit(DDRD,(PinNum-24));
    111e:	a1 e3       	ldi	r26, 0x31	; 49
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e1 e3       	ldi	r30, 0x31	; 49
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	48 2f       	mov	r20, r24
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	88 2f       	mov	r24, r24
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	9c 01       	movw	r18, r24
    1132:	28 51       	subi	r18, 0x18	; 24
    1134:	30 40       	sbci	r19, 0x00	; 0
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	02 2e       	mov	r0, r18
    113c:	02 c0       	rjmp	.+4      	; 0x1142 <DIO_SetPinDirection+0x1d6>
    113e:	88 0f       	add	r24, r24
    1140:	99 1f       	adc	r25, r25
    1142:	0a 94       	dec	r0
    1144:	e2 f7       	brpl	.-8      	; 0x113e <DIO_SetPinDirection+0x1d2>
    1146:	80 95       	com	r24
    1148:	84 23       	and	r24, r20
    114a:	8c 93       	st	X, r24
		}
	}
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <timer0_init>:
#include "Standard_Types.h"



void timer0_init(void)  // timer initial
{
    1156:	df 93       	push	r29
    1158:	cf 93       	push	r28
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |= (1 << CS01)|(1 << CS00); //prescaler=64
    115e:	a3 e5       	ldi	r26, 0x53	; 83
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e3 e5       	ldi	r30, 0x53	; 83
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	83 60       	ori	r24, 0x03	; 3
    116a:	8c 93       	st	X, r24
    TCNT0 = 0;
    116c:	e2 e5       	ldi	r30, 0x52	; 82
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	10 82       	st	Z, r1
}
    1172:	cf 91       	pop	r28
    1174:	df 91       	pop	r29
    1176:	08 95       	ret

00001178 <timer_delay>:


void timer_delay(uint32 n)
{
    1178:	df 93       	push	r29
    117a:	cf 93       	push	r28
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	28 97       	sbiw	r28, 0x08	; 8
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	6d 83       	std	Y+5, r22	; 0x05
    118e:	7e 83       	std	Y+6, r23	; 0x06
    1190:	8f 83       	std	Y+7, r24	; 0x07
    1192:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	OCR0=249;
    1194:	ec e5       	ldi	r30, 0x5C	; 92
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	89 ef       	ldi	r24, 0xF9	; 249
    119a:	80 83       	st	Z, r24
	TCNT0=0;
    119c:	e2 e5       	ldi	r30, 0x52	; 82
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	10 82       	st	Z, r1
	for(i=0;i<n/2;i++)
    11a2:	19 82       	std	Y+1, r1	; 0x01
    11a4:	1a 82       	std	Y+2, r1	; 0x02
    11a6:	1b 82       	std	Y+3, r1	; 0x03
    11a8:	1c 82       	std	Y+4, r1	; 0x04
    11aa:	1b c0       	rjmp	.+54     	; 0x11e2 <timer_delay+0x6a>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
    11ac:	e8 e5       	ldi	r30, 0x58	; 88
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	81 70       	andi	r24, 0x01	; 1
    11b8:	90 70       	andi	r25, 0x00	; 0
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	b9 f3       	breq	.-18     	; 0x11ac <timer_delay+0x34>
		Set_Bit(TIFR,OCF0);
    11be:	a8 e5       	ldi	r26, 0x58	; 88
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e8 e5       	ldi	r30, 0x58	; 88
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	8c 93       	st	X, r24
void timer_delay(uint32 n)
{
	uint32 i;
	OCR0=249;
	TCNT0=0;
	for(i=0;i<n/2;i++)
    11cc:	89 81       	ldd	r24, Y+1	; 0x01
    11ce:	9a 81       	ldd	r25, Y+2	; 0x02
    11d0:	ab 81       	ldd	r26, Y+3	; 0x03
    11d2:	bc 81       	ldd	r27, Y+4	; 0x04
    11d4:	01 96       	adiw	r24, 0x01	; 1
    11d6:	a1 1d       	adc	r26, r1
    11d8:	b1 1d       	adc	r27, r1
    11da:	89 83       	std	Y+1, r24	; 0x01
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	ab 83       	std	Y+3, r26	; 0x03
    11e0:	bc 83       	std	Y+4, r27	; 0x04
    11e2:	8d 81       	ldd	r24, Y+5	; 0x05
    11e4:	9e 81       	ldd	r25, Y+6	; 0x06
    11e6:	af 81       	ldd	r26, Y+7	; 0x07
    11e8:	b8 85       	ldd	r27, Y+8	; 0x08
    11ea:	9c 01       	movw	r18, r24
    11ec:	ad 01       	movw	r20, r26
    11ee:	56 95       	lsr	r21
    11f0:	47 95       	ror	r20
    11f2:	37 95       	ror	r19
    11f4:	27 95       	ror	r18
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	9a 81       	ldd	r25, Y+2	; 0x02
    11fa:	ab 81       	ldd	r26, Y+3	; 0x03
    11fc:	bc 81       	ldd	r27, Y+4	; 0x04
    11fe:	82 17       	cp	r24, r18
    1200:	93 07       	cpc	r25, r19
    1202:	a4 07       	cpc	r26, r20
    1204:	b5 07       	cpc	r27, r21
    1206:	90 f2       	brcs	.-92     	; 0x11ac <timer_delay+0x34>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
		Set_Bit(TIFR,OCF0);
	}

}
    1208:	28 96       	adiw	r28, 0x08	; 8
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <del_ms>:
 *      Author: Hossam-PC
 */
#include "del.h"

void del_ms(uint32 x)
{
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	2c 97       	sbiw	r28, 0x0c	; 12
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
    122e:	69 87       	std	Y+9, r22	; 0x09
    1230:	7a 87       	std	Y+10, r23	; 0x0a
    1232:	8b 87       	std	Y+11, r24	; 0x0b
    1234:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32 i,j;
	for(i=0;i<x;i++)
    1236:	19 82       	std	Y+1, r1	; 0x01
    1238:	1a 82       	std	Y+2, r1	; 0x02
    123a:	1b 82       	std	Y+3, r1	; 0x03
    123c:	1c 82       	std	Y+4, r1	; 0x04
    123e:	24 c0       	rjmp	.+72     	; 0x1288 <del_ms+0x6e>
	{
		for(j=0;j<240;j++);
    1240:	1d 82       	std	Y+5, r1	; 0x05
    1242:	1e 82       	std	Y+6, r1	; 0x06
    1244:	1f 82       	std	Y+7, r1	; 0x07
    1246:	18 86       	std	Y+8, r1	; 0x08
    1248:	0b c0       	rjmp	.+22     	; 0x1260 <del_ms+0x46>
    124a:	8d 81       	ldd	r24, Y+5	; 0x05
    124c:	9e 81       	ldd	r25, Y+6	; 0x06
    124e:	af 81       	ldd	r26, Y+7	; 0x07
    1250:	b8 85       	ldd	r27, Y+8	; 0x08
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	a1 1d       	adc	r26, r1
    1256:	b1 1d       	adc	r27, r1
    1258:	8d 83       	std	Y+5, r24	; 0x05
    125a:	9e 83       	std	Y+6, r25	; 0x06
    125c:	af 83       	std	Y+7, r26	; 0x07
    125e:	b8 87       	std	Y+8, r27	; 0x08
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	9e 81       	ldd	r25, Y+6	; 0x06
    1264:	af 81       	ldd	r26, Y+7	; 0x07
    1266:	b8 85       	ldd	r27, Y+8	; 0x08
    1268:	80 3f       	cpi	r24, 0xF0	; 240
    126a:	91 05       	cpc	r25, r1
    126c:	a1 05       	cpc	r26, r1
    126e:	b1 05       	cpc	r27, r1
    1270:	60 f3       	brcs	.-40     	; 0x124a <del_ms+0x30>
#include "del.h"

void del_ms(uint32 x)
{
	volatile uint32 i,j;
	for(i=0;i<x;i++)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	9a 81       	ldd	r25, Y+2	; 0x02
    1276:	ab 81       	ldd	r26, Y+3	; 0x03
    1278:	bc 81       	ldd	r27, Y+4	; 0x04
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	a1 1d       	adc	r26, r1
    127e:	b1 1d       	adc	r27, r1
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	ab 83       	std	Y+3, r26	; 0x03
    1286:	bc 83       	std	Y+4, r27	; 0x04
    1288:	29 81       	ldd	r18, Y+1	; 0x01
    128a:	3a 81       	ldd	r19, Y+2	; 0x02
    128c:	4b 81       	ldd	r20, Y+3	; 0x03
    128e:	5c 81       	ldd	r21, Y+4	; 0x04
    1290:	89 85       	ldd	r24, Y+9	; 0x09
    1292:	9a 85       	ldd	r25, Y+10	; 0x0a
    1294:	ab 85       	ldd	r26, Y+11	; 0x0b
    1296:	bc 85       	ldd	r27, Y+12	; 0x0c
    1298:	28 17       	cp	r18, r24
    129a:	39 07       	cpc	r19, r25
    129c:	4a 07       	cpc	r20, r26
    129e:	5b 07       	cpc	r21, r27
    12a0:	78 f2       	brcs	.-98     	; 0x1240 <del_ms+0x26>
	{
		for(j=0;j<240;j++);
	}
}
    12a2:	2c 96       	adiw	r28, 0x0c	; 12
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	cf 91       	pop	r28
    12b0:	df 91       	pop	r29
    12b2:	08 95       	ret

000012b4 <main>:

static volatile int pulse = 0;
static volatile int i = 0;

int main(void)
{
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	cd b7       	in	r28, 0x3d	; 61
    12be:	de b7       	in	r29, 0x3e	; 62
    12c0:	c2 56       	subi	r28, 0x62	; 98
    12c2:	d0 40       	sbci	r29, 0x00	; 0
    12c4:	0f b6       	in	r0, 0x3f	; 63
    12c6:	f8 94       	cli
    12c8:	de bf       	out	0x3e, r29	; 62
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	cd bf       	out	0x3d, r28	; 61
    DDRA = 0xFF;
    12ce:	ea e3       	ldi	r30, 0x3A	; 58
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	8f ef       	ldi	r24, 0xFF	; 255
    12d4:	80 83       	st	Z, r24
    DDRB = 0xFF;
    12d6:	e7 e3       	ldi	r30, 0x37	; 55
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	80 83       	st	Z, r24
    DDRD = 0b11111011;
    12de:	e1 e3       	ldi	r30, 0x31	; 49
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	8b ef       	ldi	r24, 0xFB	; 251
    12e4:	80 83       	st	Z, r24
    12e6:	fe 01       	movw	r30, r28
    12e8:	e3 5b       	subi	r30, 0xB3	; 179
    12ea:	ff 4f       	sbci	r31, 0xFF	; 255
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	a8 e4       	ldi	r26, 0x48	; 72
    12f2:	b2 e4       	ldi	r27, 0x42	; 66
    12f4:	80 83       	st	Z, r24
    12f6:	91 83       	std	Z+1, r25	; 0x01
    12f8:	a2 83       	std	Z+2, r26	; 0x02
    12fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12fc:	8e 01       	movw	r16, r28
    12fe:	07 5b       	subi	r16, 0xB7	; 183
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	fe 01       	movw	r30, r28
    1304:	e3 5b       	subi	r30, 0xB3	; 179
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a e7       	ldi	r20, 0x7A	; 122
    1316:	53 e4       	ldi	r21, 0x43	; 67
    1318:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	f8 01       	movw	r30, r16
    1322:	80 83       	st	Z, r24
    1324:	91 83       	std	Z+1, r25	; 0x01
    1326:	a2 83       	std	Z+2, r26	; 0x02
    1328:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    132a:	fe 01       	movw	r30, r28
    132c:	e7 5b       	subi	r30, 0xB7	; 183
    132e:	ff 4f       	sbci	r31, 0xFF	; 255
    1330:	60 81       	ld	r22, Z
    1332:	71 81       	ldd	r23, Z+1	; 0x01
    1334:	82 81       	ldd	r24, Z+2	; 0x02
    1336:	93 81       	ldd	r25, Z+3	; 0x03
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e8       	ldi	r20, 0x80	; 128
    133e:	5f e3       	ldi	r21, 0x3F	; 63
    1340:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1344:	88 23       	and	r24, r24
    1346:	44 f4       	brge	.+16     	; 0x1358 <main+0xa4>
		__ticks = 1;
    1348:	fe 01       	movw	r30, r28
    134a:	e9 5b       	subi	r30, 0xB9	; 185
    134c:	ff 4f       	sbci	r31, 0xFF	; 255
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	91 83       	std	Z+1, r25	; 0x01
    1354:	80 83       	st	Z, r24
    1356:	64 c0       	rjmp	.+200    	; 0x1420 <main+0x16c>
	else if (__tmp > 65535)
    1358:	fe 01       	movw	r30, r28
    135a:	e7 5b       	subi	r30, 0xB7	; 183
    135c:	ff 4f       	sbci	r31, 0xFF	; 255
    135e:	60 81       	ld	r22, Z
    1360:	71 81       	ldd	r23, Z+1	; 0x01
    1362:	82 81       	ldd	r24, Z+2	; 0x02
    1364:	93 81       	ldd	r25, Z+3	; 0x03
    1366:	20 e0       	ldi	r18, 0x00	; 0
    1368:	3f ef       	ldi	r19, 0xFF	; 255
    136a:	4f e7       	ldi	r20, 0x7F	; 127
    136c:	57 e4       	ldi	r21, 0x47	; 71
    136e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1372:	18 16       	cp	r1, r24
    1374:	0c f0       	brlt	.+2      	; 0x1378 <main+0xc4>
    1376:	43 c0       	rjmp	.+134    	; 0x13fe <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1378:	fe 01       	movw	r30, r28
    137a:	e3 5b       	subi	r30, 0xB3	; 179
    137c:	ff 4f       	sbci	r31, 0xFF	; 255
    137e:	60 81       	ld	r22, Z
    1380:	71 81       	ldd	r23, Z+1	; 0x01
    1382:	82 81       	ldd	r24, Z+2	; 0x02
    1384:	93 81       	ldd	r25, Z+3	; 0x03
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	40 e2       	ldi	r20, 0x20	; 32
    138c:	51 e4       	ldi	r21, 0x41	; 65
    138e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	8e 01       	movw	r16, r28
    1398:	09 5b       	subi	r16, 0xB9	; 185
    139a:	1f 4f       	sbci	r17, 0xFF	; 255
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	f8 01       	movw	r30, r16
    13aa:	91 83       	std	Z+1, r25	; 0x01
    13ac:	80 83       	st	Z, r24
    13ae:	1f c0       	rjmp	.+62     	; 0x13ee <main+0x13a>
    13b0:	fe 01       	movw	r30, r28
    13b2:	eb 5b       	subi	r30, 0xBB	; 187
    13b4:	ff 4f       	sbci	r31, 0xFF	; 255
    13b6:	89 e1       	ldi	r24, 0x19	; 25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	91 83       	std	Z+1, r25	; 0x01
    13bc:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13be:	fe 01       	movw	r30, r28
    13c0:	eb 5b       	subi	r30, 0xBB	; 187
    13c2:	ff 4f       	sbci	r31, 0xFF	; 255
    13c4:	80 81       	ld	r24, Z
    13c6:	91 81       	ldd	r25, Z+1	; 0x01
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	f1 f7       	brne	.-4      	; 0x13c8 <main+0x114>
    13cc:	fe 01       	movw	r30, r28
    13ce:	eb 5b       	subi	r30, 0xBB	; 187
    13d0:	ff 4f       	sbci	r31, 0xFF	; 255
    13d2:	91 83       	std	Z+1, r25	; 0x01
    13d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d6:	de 01       	movw	r26, r28
    13d8:	a9 5b       	subi	r26, 0xB9	; 185
    13da:	bf 4f       	sbci	r27, 0xFF	; 255
    13dc:	fe 01       	movw	r30, r28
    13de:	e9 5b       	subi	r30, 0xB9	; 185
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	80 81       	ld	r24, Z
    13e4:	91 81       	ldd	r25, Z+1	; 0x01
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	11 96       	adiw	r26, 0x01	; 1
    13ea:	9c 93       	st	X, r25
    13ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ee:	fe 01       	movw	r30, r28
    13f0:	e9 5b       	subi	r30, 0xB9	; 185
    13f2:	ff 4f       	sbci	r31, 0xFF	; 255
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	d1 f6       	brne	.-76     	; 0x13b0 <main+0xfc>
    13fc:	27 c0       	rjmp	.+78     	; 0x144c <main+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	8e 01       	movw	r16, r28
    1400:	09 5b       	subi	r16, 0xB9	; 185
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	fe 01       	movw	r30, r28
    1406:	e7 5b       	subi	r30, 0xB7	; 183
    1408:	ff 4f       	sbci	r31, 0xFF	; 255
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	f8 01       	movw	r30, r16
    141c:	91 83       	std	Z+1, r25	; 0x01
    141e:	80 83       	st	Z, r24
    1420:	de 01       	movw	r26, r28
    1422:	ad 5b       	subi	r26, 0xBD	; 189
    1424:	bf 4f       	sbci	r27, 0xFF	; 255
    1426:	fe 01       	movw	r30, r28
    1428:	e9 5b       	subi	r30, 0xB9	; 185
    142a:	ff 4f       	sbci	r31, 0xFF	; 255
    142c:	80 81       	ld	r24, Z
    142e:	91 81       	ldd	r25, Z+1	; 0x01
    1430:	8d 93       	st	X+, r24
    1432:	9c 93       	st	X, r25
    1434:	fe 01       	movw	r30, r28
    1436:	ed 5b       	subi	r30, 0xBD	; 189
    1438:	ff 4f       	sbci	r31, 0xFF	; 255
    143a:	80 81       	ld	r24, Z
    143c:	91 81       	ldd	r25, Z+1	; 0x01
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	f1 f7       	brne	.-4      	; 0x143e <main+0x18a>
    1442:	fe 01       	movw	r30, r28
    1444:	ed 5b       	subi	r30, 0xBD	; 189
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	91 83       	std	Z+1, r25	; 0x01
    144a:	80 83       	st	Z, r24
    _delay_ms(50);

    GICR|=(1<<INT0);
    144c:	ab e5       	ldi	r26, 0x5B	; 91
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	eb e5       	ldi	r30, 0x5B	; 91
    1452:	f0 e0       	ldi	r31, 0x00	; 0
    1454:	80 81       	ld	r24, Z
    1456:	80 64       	ori	r24, 0x40	; 64
    1458:	8c 93       	st	X, r24
//    MCUCR|=(1<<ISC00);

    Set_Bit(MCUCR,ISC00);
    145a:	a5 e5       	ldi	r26, 0x55	; 85
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e5 e5       	ldi	r30, 0x55	; 85
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	81 60       	ori	r24, 0x01	; 1
    1466:	8c 93       	st	X, r24
    Set_Bit(MCUCR,ISC01);
    1468:	a5 e5       	ldi	r26, 0x55	; 85
    146a:	b0 e0       	ldi	r27, 0x00	; 0
    146c:	e5 e5       	ldi	r30, 0x55	; 85
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	80 81       	ld	r24, Z
    1472:	82 60       	ori	r24, 0x02	; 2
    1474:	8c 93       	st	X, r24
    TCCR1A = 0;
    1476:	ef e4       	ldi	r30, 0x4F	; 79
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	10 82       	st	Z, r1

    int16_t COUNTA = 0;
    147c:	fe 01       	movw	r30, r28
    147e:	ef 5a       	subi	r30, 0xAF	; 175
    1480:	ff 4f       	sbci	r31, 0xFF	; 255
    1482:	11 82       	std	Z+1, r1	; 0x01
    1484:	10 82       	st	Z, r1
    char SHOWA [16];


    send_a_command(0x01); //Clear Screen 0x01 = 00000001
    1486:	81 e0       	ldi	r24, 0x01	; 1
    1488:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <send_a_command>
    148c:	fe 01       	movw	r30, r28
    148e:	ff 96       	adiw	r30, 0x3f	; 63
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	a8 e4       	ldi	r26, 0x48	; 72
    1496:	b2 e4       	ldi	r27, 0x42	; 66
    1498:	80 83       	st	Z, r24
    149a:	91 83       	std	Z+1, r25	; 0x01
    149c:	a2 83       	std	Z+2, r26	; 0x02
    149e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a0:	fe 01       	movw	r30, r28
    14a2:	ff 96       	adiw	r30, 0x3f	; 63
    14a4:	60 81       	ld	r22, Z
    14a6:	71 81       	ldd	r23, Z+1	; 0x01
    14a8:	82 81       	ldd	r24, Z+2	; 0x02
    14aa:	93 81       	ldd	r25, Z+3	; 0x03
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a e7       	ldi	r20, 0x7A	; 122
    14b2:	53 e4       	ldi	r21, 0x43	; 67
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	8b af       	std	Y+59, r24	; 0x3b
    14be:	9c af       	std	Y+60, r25	; 0x3c
    14c0:	ad af       	std	Y+61, r26	; 0x3d
    14c2:	be af       	std	Y+62, r27	; 0x3e
	if (__tmp < 1.0)
    14c4:	6b ad       	ldd	r22, Y+59	; 0x3b
    14c6:	7c ad       	ldd	r23, Y+60	; 0x3c
    14c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    14ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	2c f4       	brge	.+10     	; 0x14e6 <main+0x232>
		__ticks = 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9a af       	std	Y+58, r25	; 0x3a
    14e2:	89 af       	std	Y+57, r24	; 0x39
    14e4:	41 c0       	rjmp	.+130    	; 0x1568 <main+0x2b4>
	else if (__tmp > 65535)
    14e6:	6b ad       	ldd	r22, Y+59	; 0x3b
    14e8:	7c ad       	ldd	r23, Y+60	; 0x3c
    14ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    14ec:	9e ad       	ldd	r25, Y+62	; 0x3e
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	4f e7       	ldi	r20, 0x7F	; 127
    14f4:	57 e4       	ldi	r21, 0x47	; 71
    14f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fa:	18 16       	cp	r1, r24
    14fc:	5c f5       	brge	.+86     	; 0x1554 <main+0x2a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fe:	fe 01       	movw	r30, r28
    1500:	ff 96       	adiw	r30, 0x3f	; 63
    1502:	60 81       	ld	r22, Z
    1504:	71 81       	ldd	r23, Z+1	; 0x01
    1506:	82 81       	ldd	r24, Z+2	; 0x02
    1508:	93 81       	ldd	r25, Z+3	; 0x03
    150a:	20 e0       	ldi	r18, 0x00	; 0
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	40 e2       	ldi	r20, 0x20	; 32
    1510:	51 e4       	ldi	r21, 0x41	; 65
    1512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1516:	dc 01       	movw	r26, r24
    1518:	cb 01       	movw	r24, r22
    151a:	bc 01       	movw	r22, r24
    151c:	cd 01       	movw	r24, r26
    151e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1522:	dc 01       	movw	r26, r24
    1524:	cb 01       	movw	r24, r22
    1526:	9a af       	std	Y+58, r25	; 0x3a
    1528:	89 af       	std	Y+57, r24	; 0x39
    152a:	0f c0       	rjmp	.+30     	; 0x154a <main+0x296>
    152c:	89 e1       	ldi	r24, 0x19	; 25
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	98 af       	std	Y+56, r25	; 0x38
    1532:	8f ab       	std	Y+55, r24	; 0x37
    1534:	8f a9       	ldd	r24, Y+55	; 0x37
    1536:	98 ad       	ldd	r25, Y+56	; 0x38
    1538:	01 97       	sbiw	r24, 0x01	; 1
    153a:	f1 f7       	brne	.-4      	; 0x1538 <main+0x284>
    153c:	98 af       	std	Y+56, r25	; 0x38
    153e:	8f ab       	std	Y+55, r24	; 0x37
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1540:	89 ad       	ldd	r24, Y+57	; 0x39
    1542:	9a ad       	ldd	r25, Y+58	; 0x3a
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	9a af       	std	Y+58, r25	; 0x3a
    1548:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    154a:	89 ad       	ldd	r24, Y+57	; 0x39
    154c:	9a ad       	ldd	r25, Y+58	; 0x3a
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	69 f7       	brne	.-38     	; 0x152c <main+0x278>
    1552:	14 c0       	rjmp	.+40     	; 0x157c <main+0x2c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1554:	6b ad       	ldd	r22, Y+59	; 0x3b
    1556:	7c ad       	ldd	r23, Y+60	; 0x3c
    1558:	8d ad       	ldd	r24, Y+61	; 0x3d
    155a:	9e ad       	ldd	r25, Y+62	; 0x3e
    155c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1560:	dc 01       	movw	r26, r24
    1562:	cb 01       	movw	r24, r22
    1564:	9a af       	std	Y+58, r25	; 0x3a
    1566:	89 af       	std	Y+57, r24	; 0x39
    1568:	89 ad       	ldd	r24, Y+57	; 0x39
    156a:	9a ad       	ldd	r25, Y+58	; 0x3a
    156c:	9e ab       	std	Y+54, r25	; 0x36
    156e:	8d ab       	std	Y+53, r24	; 0x35
    1570:	8d a9       	ldd	r24, Y+53	; 0x35
    1572:	9e a9       	ldd	r25, Y+54	; 0x36
    1574:	01 97       	sbiw	r24, 0x01	; 1
    1576:	f1 f7       	brne	.-4      	; 0x1574 <main+0x2c0>
    1578:	9e ab       	std	Y+54, r25	; 0x36
    157a:	8d ab       	std	Y+53, r24	; 0x35
    _delay_ms(50);
    send_a_command(0x38);
    157c:	88 e3       	ldi	r24, 0x38	; 56
    157e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <send_a_command>
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	a8 e4       	ldi	r26, 0x48	; 72
    1588:	b2 e4       	ldi	r27, 0x42	; 66
    158a:	89 ab       	std	Y+49, r24	; 0x31
    158c:	9a ab       	std	Y+50, r25	; 0x32
    158e:	ab ab       	std	Y+51, r26	; 0x33
    1590:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1592:	69 a9       	ldd	r22, Y+49	; 0x31
    1594:	7a a9       	ldd	r23, Y+50	; 0x32
    1596:	8b a9       	ldd	r24, Y+51	; 0x33
    1598:	9c a9       	ldd	r25, Y+52	; 0x34
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	4a e7       	ldi	r20, 0x7A	; 122
    15a0:	53 e4       	ldi	r21, 0x43	; 67
    15a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	8d a7       	std	Y+45, r24	; 0x2d
    15ac:	9e a7       	std	Y+46, r25	; 0x2e
    15ae:	af a7       	std	Y+47, r26	; 0x2f
    15b0:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    15b2:	6d a5       	ldd	r22, Y+45	; 0x2d
    15b4:	7e a5       	ldd	r23, Y+46	; 0x2e
    15b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    15b8:	98 a9       	ldd	r25, Y+48	; 0x30
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	5f e3       	ldi	r21, 0x3F	; 63
    15c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    15c6:	88 23       	and	r24, r24
    15c8:	2c f4       	brge	.+10     	; 0x15d4 <main+0x320>
		__ticks = 1;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c a7       	std	Y+44, r25	; 0x2c
    15d0:	8b a7       	std	Y+43, r24	; 0x2b
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <main+0x39e>
	else if (__tmp > 65535)
    15d4:	6d a5       	ldd	r22, Y+45	; 0x2d
    15d6:	7e a5       	ldd	r23, Y+46	; 0x2e
    15d8:	8f a5       	ldd	r24, Y+47	; 0x2f
    15da:	98 a9       	ldd	r25, Y+48	; 0x30
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	3f ef       	ldi	r19, 0xFF	; 255
    15e0:	4f e7       	ldi	r20, 0x7F	; 127
    15e2:	57 e4       	ldi	r21, 0x47	; 71
    15e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15e8:	18 16       	cp	r1, r24
    15ea:	4c f5       	brge	.+82     	; 0x163e <main+0x38a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	69 a9       	ldd	r22, Y+49	; 0x31
    15ee:	7a a9       	ldd	r23, Y+50	; 0x32
    15f0:	8b a9       	ldd	r24, Y+51	; 0x33
    15f2:	9c a9       	ldd	r25, Y+52	; 0x34
    15f4:	20 e0       	ldi	r18, 0x00	; 0
    15f6:	30 e0       	ldi	r19, 0x00	; 0
    15f8:	40 e2       	ldi	r20, 0x20	; 32
    15fa:	51 e4       	ldi	r21, 0x41	; 65
    15fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1600:	dc 01       	movw	r26, r24
    1602:	cb 01       	movw	r24, r22
    1604:	bc 01       	movw	r22, r24
    1606:	cd 01       	movw	r24, r26
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9c a7       	std	Y+44, r25	; 0x2c
    1612:	8b a7       	std	Y+43, r24	; 0x2b
    1614:	0f c0       	rjmp	.+30     	; 0x1634 <main+0x380>
    1616:	89 e1       	ldi	r24, 0x19	; 25
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	9a a7       	std	Y+42, r25	; 0x2a
    161c:	89 a7       	std	Y+41, r24	; 0x29
    161e:	89 a5       	ldd	r24, Y+41	; 0x29
    1620:	9a a5       	ldd	r25, Y+42	; 0x2a
    1622:	01 97       	sbiw	r24, 0x01	; 1
    1624:	f1 f7       	brne	.-4      	; 0x1622 <main+0x36e>
    1626:	9a a7       	std	Y+42, r25	; 0x2a
    1628:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162a:	8b a5       	ldd	r24, Y+43	; 0x2b
    162c:	9c a5       	ldd	r25, Y+44	; 0x2c
    162e:	01 97       	sbiw	r24, 0x01	; 1
    1630:	9c a7       	std	Y+44, r25	; 0x2c
    1632:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1634:	8b a5       	ldd	r24, Y+43	; 0x2b
    1636:	9c a5       	ldd	r25, Y+44	; 0x2c
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	69 f7       	brne	.-38     	; 0x1616 <main+0x362>
    163c:	14 c0       	rjmp	.+40     	; 0x1666 <main+0x3b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    163e:	6d a5       	ldd	r22, Y+45	; 0x2d
    1640:	7e a5       	ldd	r23, Y+46	; 0x2e
    1642:	8f a5       	ldd	r24, Y+47	; 0x2f
    1644:	98 a9       	ldd	r25, Y+48	; 0x30
    1646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	9c a7       	std	Y+44, r25	; 0x2c
    1650:	8b a7       	std	Y+43, r24	; 0x2b
    1652:	8b a5       	ldd	r24, Y+43	; 0x2b
    1654:	9c a5       	ldd	r25, Y+44	; 0x2c
    1656:	98 a7       	std	Y+40, r25	; 0x28
    1658:	8f a3       	std	Y+39, r24	; 0x27
    165a:	8f a1       	ldd	r24, Y+39	; 0x27
    165c:	98 a5       	ldd	r25, Y+40	; 0x28
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	f1 f7       	brne	.-4      	; 0x165e <main+0x3aa>
    1662:	98 a7       	std	Y+40, r25	; 0x28
    1664:	8f a3       	std	Y+39, r24	; 0x27
    _delay_ms(50);
    send_a_command(0b00001111);
    1666:	8f e0       	ldi	r24, 0x0F	; 15
    1668:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <send_a_command>
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a8 e4       	ldi	r26, 0x48	; 72
    1672:	b2 e4       	ldi	r27, 0x42	; 66
    1674:	8b a3       	std	Y+35, r24	; 0x23
    1676:	9c a3       	std	Y+36, r25	; 0x24
    1678:	ad a3       	std	Y+37, r26	; 0x25
    167a:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    167c:	6b a1       	ldd	r22, Y+35	; 0x23
    167e:	7c a1       	ldd	r23, Y+36	; 0x24
    1680:	8d a1       	ldd	r24, Y+37	; 0x25
    1682:	9e a1       	ldd	r25, Y+38	; 0x26
    1684:	20 e0       	ldi	r18, 0x00	; 0
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	4a e7       	ldi	r20, 0x7A	; 122
    168a:	53 e4       	ldi	r21, 0x43	; 67
    168c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1690:	dc 01       	movw	r26, r24
    1692:	cb 01       	movw	r24, r22
    1694:	8f 8f       	std	Y+31, r24	; 0x1f
    1696:	98 a3       	std	Y+32, r25	; 0x20
    1698:	a9 a3       	std	Y+33, r26	; 0x21
    169a:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    169c:	6f 8d       	ldd	r22, Y+31	; 0x1f
    169e:	78 a1       	ldd	r23, Y+32	; 0x20
    16a0:	89 a1       	ldd	r24, Y+33	; 0x21
    16a2:	9a a1       	ldd	r25, Y+34	; 0x22
    16a4:	20 e0       	ldi	r18, 0x00	; 0
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	40 e8       	ldi	r20, 0x80	; 128
    16aa:	5f e3       	ldi	r21, 0x3F	; 63
    16ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    16b0:	88 23       	and	r24, r24
    16b2:	2c f4       	brge	.+10     	; 0x16be <main+0x40a>
		__ticks = 1;
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	9e 8f       	std	Y+30, r25	; 0x1e
    16ba:	8d 8f       	std	Y+29, r24	; 0x1d
    16bc:	3f c0       	rjmp	.+126    	; 0x173c <main+0x488>
	else if (__tmp > 65535)
    16be:	6f 8d       	ldd	r22, Y+31	; 0x1f
    16c0:	78 a1       	ldd	r23, Y+32	; 0x20
    16c2:	89 a1       	ldd	r24, Y+33	; 0x21
    16c4:	9a a1       	ldd	r25, Y+34	; 0x22
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	3f ef       	ldi	r19, 0xFF	; 255
    16ca:	4f e7       	ldi	r20, 0x7F	; 127
    16cc:	57 e4       	ldi	r21, 0x47	; 71
    16ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16d2:	18 16       	cp	r1, r24
    16d4:	4c f5       	brge	.+82     	; 0x1728 <main+0x474>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16d6:	6b a1       	ldd	r22, Y+35	; 0x23
    16d8:	7c a1       	ldd	r23, Y+36	; 0x24
    16da:	8d a1       	ldd	r24, Y+37	; 0x25
    16dc:	9e a1       	ldd	r25, Y+38	; 0x26
    16de:	20 e0       	ldi	r18, 0x00	; 0
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	40 e2       	ldi	r20, 0x20	; 32
    16e4:	51 e4       	ldi	r21, 0x41	; 65
    16e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16ea:	dc 01       	movw	r26, r24
    16ec:	cb 01       	movw	r24, r22
    16ee:	bc 01       	movw	r22, r24
    16f0:	cd 01       	movw	r24, r26
    16f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16f6:	dc 01       	movw	r26, r24
    16f8:	cb 01       	movw	r24, r22
    16fa:	9e 8f       	std	Y+30, r25	; 0x1e
    16fc:	8d 8f       	std	Y+29, r24	; 0x1d
    16fe:	0f c0       	rjmp	.+30     	; 0x171e <main+0x46a>
    1700:	89 e1       	ldi	r24, 0x19	; 25
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	9c 8f       	std	Y+28, r25	; 0x1c
    1706:	8b 8f       	std	Y+27, r24	; 0x1b
    1708:	8b 8d       	ldd	r24, Y+27	; 0x1b
    170a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	f1 f7       	brne	.-4      	; 0x170c <main+0x458>
    1710:	9c 8f       	std	Y+28, r25	; 0x1c
    1712:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1714:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1716:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1718:	01 97       	sbiw	r24, 0x01	; 1
    171a:	9e 8f       	std	Y+30, r25	; 0x1e
    171c:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    171e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1720:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1722:	00 97       	sbiw	r24, 0x00	; 0
    1724:	69 f7       	brne	.-38     	; 0x1700 <main+0x44c>
    1726:	14 c0       	rjmp	.+40     	; 0x1750 <main+0x49c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1728:	6f 8d       	ldd	r22, Y+31	; 0x1f
    172a:	78 a1       	ldd	r23, Y+32	; 0x20
    172c:	89 a1       	ldd	r24, Y+33	; 0x21
    172e:	9a a1       	ldd	r25, Y+34	; 0x22
    1730:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1734:	dc 01       	movw	r26, r24
    1736:	cb 01       	movw	r24, r22
    1738:	9e 8f       	std	Y+30, r25	; 0x1e
    173a:	8d 8f       	std	Y+29, r24	; 0x1d
    173c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    173e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1740:	9a 8f       	std	Y+26, r25	; 0x1a
    1742:	89 8f       	std	Y+25, r24	; 0x19
    1744:	89 8d       	ldd	r24, Y+25	; 0x19
    1746:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <main+0x494>
    174c:	9a 8f       	std	Y+26, r25	; 0x1a
    174e:	89 8f       	std	Y+25, r24	; 0x19
    _delay_ms(50);

    sei();
    1750:	78 94       	sei

    while(1)
    {
        PORTD|=(1<<PIND0);
    1752:	a2 e3       	ldi	r26, 0x32	; 50
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	e2 e3       	ldi	r30, 0x32	; 50
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	81 60       	ori	r24, 0x01	; 1
    175e:	8c 93       	st	X, r24
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	a0 e7       	ldi	r26, 0x70	; 112
    1766:	b1 e4       	ldi	r27, 0x41	; 65
    1768:	8d 8b       	std	Y+21, r24	; 0x15
    176a:	9e 8b       	std	Y+22, r25	; 0x16
    176c:	af 8b       	std	Y+23, r26	; 0x17
    176e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1770:	6d 89       	ldd	r22, Y+21	; 0x15
    1772:	7e 89       	ldd	r23, Y+22	; 0x16
    1774:	8f 89       	ldd	r24, Y+23	; 0x17
    1776:	98 8d       	ldd	r25, Y+24	; 0x18
    1778:	2b ea       	ldi	r18, 0xAB	; 171
    177a:	3a ea       	ldi	r19, 0xAA	; 170
    177c:	4a ea       	ldi	r20, 0xAA	; 170
    177e:	5e e3       	ldi	r21, 0x3E	; 62
    1780:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1784:	dc 01       	movw	r26, r24
    1786:	cb 01       	movw	r24, r22
    1788:	89 8b       	std	Y+17, r24	; 0x11
    178a:	9a 8b       	std	Y+18, r25	; 0x12
    178c:	ab 8b       	std	Y+19, r26	; 0x13
    178e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1790:	69 89       	ldd	r22, Y+17	; 0x11
    1792:	7a 89       	ldd	r23, Y+18	; 0x12
    1794:	8b 89       	ldd	r24, Y+19	; 0x13
    1796:	9c 89       	ldd	r25, Y+20	; 0x14
    1798:	20 e0       	ldi	r18, 0x00	; 0
    179a:	30 e0       	ldi	r19, 0x00	; 0
    179c:	40 e8       	ldi	r20, 0x80	; 128
    179e:	5f e3       	ldi	r21, 0x3F	; 63
    17a0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17a4:	88 23       	and	r24, r24
    17a6:	1c f4       	brge	.+6      	; 0x17ae <main+0x4fa>
		__ticks = 1;
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	88 8b       	std	Y+16, r24	; 0x10
    17ac:	91 c0       	rjmp	.+290    	; 0x18d0 <main+0x61c>
	else if (__tmp > 255)
    17ae:	69 89       	ldd	r22, Y+17	; 0x11
    17b0:	7a 89       	ldd	r23, Y+18	; 0x12
    17b2:	8b 89       	ldd	r24, Y+19	; 0x13
    17b4:	9c 89       	ldd	r25, Y+20	; 0x14
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	53 e4       	ldi	r21, 0x43	; 67
    17be:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c2:	18 16       	cp	r1, r24
    17c4:	0c f0       	brlt	.+2      	; 0x17c8 <main+0x514>
    17c6:	7b c0       	rjmp	.+246    	; 0x18be <main+0x60a>
	{
		_delay_ms(__us / 1000.0);
    17c8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ca:	7e 89       	ldd	r23, Y+22	; 0x16
    17cc:	8f 89       	ldd	r24, Y+23	; 0x17
    17ce:	98 8d       	ldd	r25, Y+24	; 0x18
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	4a e7       	ldi	r20, 0x7A	; 122
    17d6:	54 e4       	ldi	r21, 0x44	; 68
    17d8:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    17dc:	dc 01       	movw	r26, r24
    17de:	cb 01       	movw	r24, r22
    17e0:	8c 87       	std	Y+12, r24	; 0x0c
    17e2:	9d 87       	std	Y+13, r25	; 0x0d
    17e4:	ae 87       	std	Y+14, r26	; 0x0e
    17e6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	6c 85       	ldd	r22, Y+12	; 0x0c
    17ea:	7d 85       	ldd	r23, Y+13	; 0x0d
    17ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    17ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a e7       	ldi	r20, 0x7A	; 122
    17f6:	53 e4       	ldi	r21, 0x43	; 67
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	88 87       	std	Y+8, r24	; 0x08
    1802:	99 87       	std	Y+9, r25	; 0x09
    1804:	aa 87       	std	Y+10, r26	; 0x0a
    1806:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1808:	68 85       	ldd	r22, Y+8	; 0x08
    180a:	79 85       	ldd	r23, Y+9	; 0x09
    180c:	8a 85       	ldd	r24, Y+10	; 0x0a
    180e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <main+0x576>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9f 83       	std	Y+7, r25	; 0x07
    1826:	8e 83       	std	Y+6, r24	; 0x06
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <main+0x5f4>
	else if (__tmp > 65535)
    182a:	68 85       	ldd	r22, Y+8	; 0x08
    182c:	79 85       	ldd	r23, Y+9	; 0x09
    182e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1830:	9b 85       	ldd	r25, Y+11	; 0x0b
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <main+0x5e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	6c 85       	ldd	r22, Y+12	; 0x0c
    1844:	7d 85       	ldd	r23, Y+13	; 0x0d
    1846:	8e 85       	ldd	r24, Y+14	; 0x0e
    1848:	9f 85       	ldd	r25, Y+15	; 0x0f
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9f 83       	std	Y+7, r25	; 0x07
    1868:	8e 83       	std	Y+6, r24	; 0x06
    186a:	0f c0       	rjmp	.+30     	; 0x188a <main+0x5d6>
    186c:	89 e1       	ldi	r24, 0x19	; 25
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9d 83       	std	Y+5, r25	; 0x05
    1872:	8c 83       	std	Y+4, r24	; 0x04
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <main+0x5c4>
    187c:	9d 83       	std	Y+5, r25	; 0x05
    187e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8e 81       	ldd	r24, Y+6	; 0x06
    1882:	9f 81       	ldd	r25, Y+7	; 0x07
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9f 83       	std	Y+7, r25	; 0x07
    1888:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8e 81       	ldd	r24, Y+6	; 0x06
    188c:	9f 81       	ldd	r25, Y+7	; 0x07
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <main+0x5b8>
    1892:	24 c0       	rjmp	.+72     	; 0x18dc <main+0x628>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	68 85       	ldd	r22, Y+8	; 0x08
    1896:	79 85       	ldd	r23, Y+9	; 0x09
    1898:	8a 85       	ldd	r24, Y+10	; 0x0a
    189a:	9b 85       	ldd	r25, Y+11	; 0x0b
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9f 83       	std	Y+7, r25	; 0x07
    18a6:	8e 83       	std	Y+6, r24	; 0x06
    18a8:	8e 81       	ldd	r24, Y+6	; 0x06
    18aa:	9f 81       	ldd	r25, Y+7	; 0x07
    18ac:	9b 83       	std	Y+3, r25	; 0x03
    18ae:	8a 83       	std	Y+2, r24	; 0x02
    18b0:	8a 81       	ldd	r24, Y+2	; 0x02
    18b2:	9b 81       	ldd	r25, Y+3	; 0x03
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <main+0x600>
    18b8:	9b 83       	std	Y+3, r25	; 0x03
    18ba:	8a 83       	std	Y+2, r24	; 0x02
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <main+0x628>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    18be:	69 89       	ldd	r22, Y+17	; 0x11
    18c0:	7a 89       	ldd	r23, Y+18	; 0x12
    18c2:	8b 89       	ldd	r24, Y+19	; 0x13
    18c4:	9c 89       	ldd	r25, Y+20	; 0x14
    18c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ca:	dc 01       	movw	r26, r24
    18cc:	cb 01       	movw	r24, r22
    18ce:	88 8b       	std	Y+16, r24	; 0x10
    18d0:	88 89       	ldd	r24, Y+16	; 0x10
    18d2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    18d4:	89 81       	ldd	r24, Y+1	; 0x01
    18d6:	8a 95       	dec	r24
    18d8:	f1 f7       	brne	.-4      	; 0x18d6 <main+0x622>
    18da:	89 83       	std	Y+1, r24	; 0x01
        _delay_us(15);
        PORTD &=~(1<<PIND0);
    18dc:	a2 e3       	ldi	r26, 0x32	; 50
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e2 e3       	ldi	r30, 0x32	; 50
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	8e 7f       	andi	r24, 0xFE	; 254
    18e8:	8c 93       	st	X, r24

        COUNTA = (pulse/580)+7;
    18ea:	80 91 88 00 	lds	r24, 0x0088
    18ee:	90 91 89 00 	lds	r25, 0x0089
    18f2:	24 e4       	ldi	r18, 0x44	; 68
    18f4:	32 e0       	ldi	r19, 0x02	; 2
    18f6:	b9 01       	movw	r22, r18
    18f8:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <__divmodhi4>
    18fc:	cb 01       	movw	r24, r22
    18fe:	fe 01       	movw	r30, r28
    1900:	ef 5a       	subi	r30, 0xAF	; 175
    1902:	ff 4f       	sbci	r31, 0xFF	; 255
    1904:	07 96       	adiw	r24, 0x07	; 7
    1906:	91 83       	std	Z+1, r25	; 0x01
    1908:	80 83       	st	Z, r24
        send_a_string ("CIRCUIT DIGEST");
    190a:	80 e6       	ldi	r24, 0x60	; 96
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <send_a_string>
        send_a_command(0x80 + 0x40 + 0);
    1912:	80 ec       	ldi	r24, 0xC0	; 192
    1914:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <send_a_command>
        send_a_string ("DISTANCE=");
    1918:	8f e6       	ldi	r24, 0x6F	; 111
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <send_a_string>
        itoa(COUNTA,SHOWA,10);
    1920:	fe 01       	movw	r30, r28
    1922:	ef 5a       	subi	r30, 0xAF	; 175
    1924:	ff 4f       	sbci	r31, 0xFF	; 255
    1926:	80 81       	ld	r24, Z
    1928:	91 81       	ldd	r25, Z+1	; 0x01
    192a:	9e 01       	movw	r18, r28
    192c:	2d 5a       	subi	r18, 0xAD	; 173
    192e:	3f 4f       	sbci	r19, 0xFF	; 255
    1930:	b9 01       	movw	r22, r18
    1932:	4a e0       	ldi	r20, 0x0A	; 10
    1934:	50 e0       	ldi	r21, 0x00	; 0
    1936:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <itoa>
        send_a_string(SHOWA);
    193a:	ce 01       	movw	r24, r28
    193c:	8d 5a       	subi	r24, 0xAD	; 173
    193e:	9f 4f       	sbci	r25, 0xFF	; 255
    1940:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <send_a_string>
        send_a_string ("cm    ");
    1944:	89 e7       	ldi	r24, 0x79	; 121
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 54 0e 	call	0x1ca8	; 0x1ca8 <send_a_string>
        send_a_command(0x80 + 0);
    194c:	80 e8       	ldi	r24, 0x80	; 128
    194e:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <send_a_command>
    1952:	ff ce       	rjmp	.-514    	; 0x1752 <main+0x49e>

00001954 <__vector_1>:

    }
}

ISR(INT0_vect)
{
    1954:	1f 92       	push	r1
    1956:	0f 92       	push	r0
    1958:	0f b6       	in	r0, 0x3f	; 63
    195a:	0f 92       	push	r0
    195c:	11 24       	eor	r1, r1
    195e:	8f 93       	push	r24
    1960:	9f 93       	push	r25
    1962:	af 93       	push	r26
    1964:	bf 93       	push	r27
    1966:	ef 93       	push	r30
    1968:	ff 93       	push	r31
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
	 if (i==0)
    1972:	80 91 8a 00 	lds	r24, 0x008A
    1976:	90 91 8b 00 	lds	r25, 0x008B
    197a:	00 97       	sbiw	r24, 0x00	; 0
    197c:	e1 f4       	brne	.+56     	; 0x19b6 <__vector_1+0x62>
	    {
	        TCCR1B|=(1<<CS10);
    197e:	ae e4       	ldi	r26, 0x4E	; 78
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ee e4       	ldi	r30, 0x4E	; 78
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	81 60       	ori	r24, 0x01	; 1
    198a:	8c 93       	st	X, r24
	        i=1;
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	90 93 8b 00 	sts	0x008B, r25
    1994:	80 93 8a 00 	sts	0x008A, r24
	        Clr_Bit(MCUCR,ISC00);  //falling
    1998:	a5 e5       	ldi	r26, 0x55	; 85
    199a:	b0 e0       	ldi	r27, 0x00	; 0
    199c:	e5 e5       	ldi	r30, 0x55	; 85
    199e:	f0 e0       	ldi	r31, 0x00	; 0
    19a0:	80 81       	ld	r24, Z
    19a2:	8e 7f       	andi	r24, 0xFE	; 254
    19a4:	8c 93       	st	X, r24
	        Set_Bit(MCUCR,ISC01);
    19a6:	a5 e5       	ldi	r26, 0x55	; 85
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e5 e5       	ldi	r30, 0x55	; 85
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	82 60       	ori	r24, 0x02	; 2
    19b2:	8c 93       	st	X, r24
    19b4:	28 c0       	rjmp	.+80     	; 0x1a06 <__vector_1+0xb2>

	    }
	 else if (i==1)
    19b6:	80 91 8a 00 	lds	r24, 0x008A
    19ba:	90 91 8b 00 	lds	r25, 0x008B
    19be:	81 30       	cpi	r24, 0x01	; 1
    19c0:	91 05       	cpc	r25, r1
    19c2:	09 f5       	brne	.+66     	; 0x1a06 <__vector_1+0xb2>
    {
        TCCR1B=0;
    19c4:	ee e4       	ldi	r30, 0x4E	; 78
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	10 82       	st	Z, r1
        pulse=TCNT1;
    19ca:	ec e4       	ldi	r30, 0x4C	; 76
    19cc:	f0 e0       	ldi	r31, 0x00	; 0
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	90 93 89 00 	sts	0x0089, r25
    19d6:	80 93 88 00 	sts	0x0088, r24
        TCNT1=0;
    19da:	ec e4       	ldi	r30, 0x4C	; 76
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	11 82       	std	Z+1, r1	; 0x01
    19e0:	10 82       	st	Z, r1
        i=0;
    19e2:	10 92 8b 00 	sts	0x008B, r1
    19e6:	10 92 8a 00 	sts	0x008A, r1
        Set_Bit(MCUCR,ISC00);   //rising
    19ea:	a5 e5       	ldi	r26, 0x55	; 85
    19ec:	b0 e0       	ldi	r27, 0x00	; 0
    19ee:	e5 e5       	ldi	r30, 0x55	; 85
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	81 60       	ori	r24, 0x01	; 1
    19f6:	8c 93       	st	X, r24
        Set_Bit(MCUCR,ISC01);
    19f8:	a5 e5       	ldi	r26, 0x55	; 85
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e5 e5       	ldi	r30, 0x55	; 85
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	82 60       	ori	r24, 0x02	; 2
    1a04:	8c 93       	st	X, r24

    }

}
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	ff 91       	pop	r31
    1a0c:	ef 91       	pop	r30
    1a0e:	bf 91       	pop	r27
    1a10:	af 91       	pop	r26
    1a12:	9f 91       	pop	r25
    1a14:	8f 91       	pop	r24
    1a16:	0f 90       	pop	r0
    1a18:	0f be       	out	0x3f, r0	; 63
    1a1a:	0f 90       	pop	r0
    1a1c:	1f 90       	pop	r1
    1a1e:	18 95       	reti

00001a20 <send_a_command>:

void send_a_command(unsigned char command)
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	2f 97       	sbiw	r28, 0x0f	; 15
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	f8 94       	cli
    1a2e:	de bf       	out	0x3e, r29	; 62
    1a30:	0f be       	out	0x3f, r0	; 63
    1a32:	cd bf       	out	0x3d, r28	; 61
    1a34:	8f 87       	std	Y+15, r24	; 0x0f
    PORTB = command;
    1a36:	e8 e3       	ldi	r30, 0x38	; 56
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3c:	80 83       	st	Z, r24
    PORTD &= ~ (1<<registerselection);
    1a3e:	a2 e3       	ldi	r26, 0x32	; 50
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e2 e3       	ldi	r30, 0x32	; 50
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	8f 7b       	andi	r24, 0xBF	; 191
    1a4a:	8c 93       	st	X, r24
    PORTD |= 1<<enable;
    1a4c:	a2 e3       	ldi	r26, 0x32	; 50
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	e2 e3       	ldi	r30, 0x32	; 50
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	80 62       	ori	r24, 0x20	; 32
    1a58:	8c 93       	st	X, r24
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a0 e0       	ldi	r26, 0x00	; 0
    1a60:	b1 e4       	ldi	r27, 0x41	; 65
    1a62:	8b 87       	std	Y+11, r24	; 0x0b
    1a64:	9c 87       	std	Y+12, r25	; 0x0c
    1a66:	ad 87       	std	Y+13, r26	; 0x0d
    1a68:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a6c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a6e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a70:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a72:	20 e0       	ldi	r18, 0x00	; 0
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	4a e7       	ldi	r20, 0x7A	; 122
    1a78:	53 e4       	ldi	r21, 0x43	; 67
    1a7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	8f 83       	std	Y+7, r24	; 0x07
    1a84:	98 87       	std	Y+8, r25	; 0x08
    1a86:	a9 87       	std	Y+9, r26	; 0x09
    1a88:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a8c:	78 85       	ldd	r23, Y+8	; 0x08
    1a8e:	89 85       	ldd	r24, Y+9	; 0x09
    1a90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a92:	20 e0       	ldi	r18, 0x00	; 0
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	40 e8       	ldi	r20, 0x80	; 128
    1a98:	5f e3       	ldi	r21, 0x3F	; 63
    1a9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a9e:	88 23       	and	r24, r24
    1aa0:	2c f4       	brge	.+10     	; 0x1aac <send_a_command+0x8c>
		__ticks = 1;
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	9e 83       	std	Y+6, r25	; 0x06
    1aa8:	8d 83       	std	Y+5, r24	; 0x05
    1aaa:	3f c0       	rjmp	.+126    	; 0x1b2a <send_a_command+0x10a>
	else if (__tmp > 65535)
    1aac:	6f 81       	ldd	r22, Y+7	; 0x07
    1aae:	78 85       	ldd	r23, Y+8	; 0x08
    1ab0:	89 85       	ldd	r24, Y+9	; 0x09
    1ab2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	3f ef       	ldi	r19, 0xFF	; 255
    1ab8:	4f e7       	ldi	r20, 0x7F	; 127
    1aba:	57 e4       	ldi	r21, 0x47	; 71
    1abc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ac0:	18 16       	cp	r1, r24
    1ac2:	4c f5       	brge	.+82     	; 0x1b16 <send_a_command+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ac6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ac8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1aca:	9e 85       	ldd	r25, Y+14	; 0x0e
    1acc:	20 e0       	ldi	r18, 0x00	; 0
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	40 e2       	ldi	r20, 0x20	; 32
    1ad2:	51 e4       	ldi	r21, 0x41	; 65
    1ad4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad8:	dc 01       	movw	r26, r24
    1ada:	cb 01       	movw	r24, r22
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	9e 83       	std	Y+6, r25	; 0x06
    1aea:	8d 83       	std	Y+5, r24	; 0x05
    1aec:	0f c0       	rjmp	.+30     	; 0x1b0c <send_a_command+0xec>
    1aee:	89 e1       	ldi	r24, 0x19	; 25
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	9c 83       	std	Y+4, r25	; 0x04
    1af4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1af6:	8b 81       	ldd	r24, Y+3	; 0x03
    1af8:	9c 81       	ldd	r25, Y+4	; 0x04
    1afa:	01 97       	sbiw	r24, 0x01	; 1
    1afc:	f1 f7       	brne	.-4      	; 0x1afa <send_a_command+0xda>
    1afe:	9c 83       	std	Y+4, r25	; 0x04
    1b00:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b02:	8d 81       	ldd	r24, Y+5	; 0x05
    1b04:	9e 81       	ldd	r25, Y+6	; 0x06
    1b06:	01 97       	sbiw	r24, 0x01	; 1
    1b08:	9e 83       	std	Y+6, r25	; 0x06
    1b0a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	69 f7       	brne	.-38     	; 0x1aee <send_a_command+0xce>
    1b14:	14 c0       	rjmp	.+40     	; 0x1b3e <send_a_command+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b16:	6f 81       	ldd	r22, Y+7	; 0x07
    1b18:	78 85       	ldd	r23, Y+8	; 0x08
    1b1a:	89 85       	ldd	r24, Y+9	; 0x09
    1b1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	9e 83       	std	Y+6, r25	; 0x06
    1b28:	8d 83       	std	Y+5, r24	; 0x05
    1b2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2e:	9a 83       	std	Y+2, r25	; 0x02
    1b30:	89 83       	std	Y+1, r24	; 0x01
    1b32:	89 81       	ldd	r24, Y+1	; 0x01
    1b34:	9a 81       	ldd	r25, Y+2	; 0x02
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	f1 f7       	brne	.-4      	; 0x1b36 <send_a_command+0x116>
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(8);
    PORTD &= ~1<<enable;
    1b3e:	a2 e3       	ldi	r26, 0x32	; 50
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e2 e3       	ldi	r30, 0x32	; 50
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	80 7c       	andi	r24, 0xC0	; 192
    1b4a:	8c 93       	st	X, r24
    PORTB = 0;
    1b4c:	e8 e3       	ldi	r30, 0x38	; 56
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	10 82       	st	Z, r1
}
    1b52:	2f 96       	adiw	r28, 0x0f	; 15
    1b54:	0f b6       	in	r0, 0x3f	; 63
    1b56:	f8 94       	cli
    1b58:	de bf       	out	0x3e, r29	; 62
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	cd bf       	out	0x3d, r28	; 61
    1b5e:	cf 91       	pop	r28
    1b60:	df 91       	pop	r29
    1b62:	08 95       	ret

00001b64 <send_a_character>:

void send_a_character(unsigned char character)
{
    1b64:	df 93       	push	r29
    1b66:	cf 93       	push	r28
    1b68:	cd b7       	in	r28, 0x3d	; 61
    1b6a:	de b7       	in	r29, 0x3e	; 62
    1b6c:	2f 97       	sbiw	r28, 0x0f	; 15
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	8f 87       	std	Y+15, r24	; 0x0f
    PORTB = character;
    1b7a:	e8 e3       	ldi	r30, 0x38	; 56
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b80:	80 83       	st	Z, r24
    PORTD |= 1<<registerselection;
    1b82:	a2 e3       	ldi	r26, 0x32	; 50
    1b84:	b0 e0       	ldi	r27, 0x00	; 0
    1b86:	e2 e3       	ldi	r30, 0x32	; 50
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	80 64       	ori	r24, 0x40	; 64
    1b8e:	8c 93       	st	X, r24
    PORTD |= 1<<enable;
    1b90:	a2 e3       	ldi	r26, 0x32	; 50
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	e2 e3       	ldi	r30, 0x32	; 50
    1b96:	f0 e0       	ldi	r31, 0x00	; 0
    1b98:	80 81       	ld	r24, Z
    1b9a:	80 62       	ori	r24, 0x20	; 32
    1b9c:	8c 93       	st	X, r24
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	a0 e0       	ldi	r26, 0x00	; 0
    1ba4:	b1 e4       	ldi	r27, 0x41	; 65
    1ba6:	8b 87       	std	Y+11, r24	; 0x0b
    1ba8:	9c 87       	std	Y+12, r25	; 0x0c
    1baa:	ad 87       	std	Y+13, r26	; 0x0d
    1bac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb6:	20 e0       	ldi	r18, 0x00	; 0
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	4a e7       	ldi	r20, 0x7A	; 122
    1bbc:	53 e4       	ldi	r21, 0x43	; 67
    1bbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc2:	dc 01       	movw	r26, r24
    1bc4:	cb 01       	movw	r24, r22
    1bc6:	8f 83       	std	Y+7, r24	; 0x07
    1bc8:	98 87       	std	Y+8, r25	; 0x08
    1bca:	a9 87       	std	Y+9, r26	; 0x09
    1bcc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bce:	6f 81       	ldd	r22, Y+7	; 0x07
    1bd0:	78 85       	ldd	r23, Y+8	; 0x08
    1bd2:	89 85       	ldd	r24, Y+9	; 0x09
    1bd4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e8       	ldi	r20, 0x80	; 128
    1bdc:	5f e3       	ldi	r21, 0x3F	; 63
    1bde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1be2:	88 23       	and	r24, r24
    1be4:	2c f4       	brge	.+10     	; 0x1bf0 <send_a_character+0x8c>
		__ticks = 1;
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	90 e0       	ldi	r25, 0x00	; 0
    1bea:	9e 83       	std	Y+6, r25	; 0x06
    1bec:	8d 83       	std	Y+5, r24	; 0x05
    1bee:	3f c0       	rjmp	.+126    	; 0x1c6e <send_a_character+0x10a>
	else if (__tmp > 65535)
    1bf0:	6f 81       	ldd	r22, Y+7	; 0x07
    1bf2:	78 85       	ldd	r23, Y+8	; 0x08
    1bf4:	89 85       	ldd	r24, Y+9	; 0x09
    1bf6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	3f ef       	ldi	r19, 0xFF	; 255
    1bfc:	4f e7       	ldi	r20, 0x7F	; 127
    1bfe:	57 e4       	ldi	r21, 0x47	; 71
    1c00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c04:	18 16       	cp	r1, r24
    1c06:	4c f5       	brge	.+82     	; 0x1c5a <send_a_character+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c08:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c0a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c0c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c0e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c10:	20 e0       	ldi	r18, 0x00	; 0
    1c12:	30 e0       	ldi	r19, 0x00	; 0
    1c14:	40 e2       	ldi	r20, 0x20	; 32
    1c16:	51 e4       	ldi	r21, 0x41	; 65
    1c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9e 83       	std	Y+6, r25	; 0x06
    1c2e:	8d 83       	std	Y+5, r24	; 0x05
    1c30:	0f c0       	rjmp	.+30     	; 0x1c50 <send_a_character+0xec>
    1c32:	89 e1       	ldi	r24, 0x19	; 25
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	9c 83       	std	Y+4, r25	; 0x04
    1c38:	8b 83       	std	Y+3, r24	; 0x03
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3e:	01 97       	sbiw	r24, 0x01	; 1
    1c40:	f1 f7       	brne	.-4      	; 0x1c3e <send_a_character+0xda>
    1c42:	9c 83       	std	Y+4, r25	; 0x04
    1c44:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	01 97       	sbiw	r24, 0x01	; 1
    1c4c:	9e 83       	std	Y+6, r25	; 0x06
    1c4e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c50:	8d 81       	ldd	r24, Y+5	; 0x05
    1c52:	9e 81       	ldd	r25, Y+6	; 0x06
    1c54:	00 97       	sbiw	r24, 0x00	; 0
    1c56:	69 f7       	brne	.-38     	; 0x1c32 <send_a_character+0xce>
    1c58:	14 c0       	rjmp	.+40     	; 0x1c82 <send_a_character+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c5a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c5c:	78 85       	ldd	r23, Y+8	; 0x08
    1c5e:	89 85       	ldd	r24, Y+9	; 0x09
    1c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c66:	dc 01       	movw	r26, r24
    1c68:	cb 01       	movw	r24, r22
    1c6a:	9e 83       	std	Y+6, r25	; 0x06
    1c6c:	8d 83       	std	Y+5, r24	; 0x05
    1c6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c70:	9e 81       	ldd	r25, Y+6	; 0x06
    1c72:	9a 83       	std	Y+2, r25	; 0x02
    1c74:	89 83       	std	Y+1, r24	; 0x01
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <send_a_character+0x116>
    1c7e:	9a 83       	std	Y+2, r25	; 0x02
    1c80:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(8);
    PORTD &= ~1<<enable;
    1c82:	a2 e3       	ldi	r26, 0x32	; 50
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	e2 e3       	ldi	r30, 0x32	; 50
    1c88:	f0 e0       	ldi	r31, 0x00	; 0
    1c8a:	80 81       	ld	r24, Z
    1c8c:	80 7c       	andi	r24, 0xC0	; 192
    1c8e:	8c 93       	st	X, r24
    PORTB = 0;
    1c90:	e8 e3       	ldi	r30, 0x38	; 56
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	10 82       	st	Z, r1
}
    1c96:	2f 96       	adiw	r28, 0x0f	; 15
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	de bf       	out	0x3e, r29	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	cd bf       	out	0x3d, r28	; 61
    1ca2:	cf 91       	pop	r28
    1ca4:	df 91       	pop	r29
    1ca6:	08 95       	ret

00001ca8 <send_a_string>:
void send_a_string(char *string_of_characters)
{
    1ca8:	df 93       	push	r29
    1caa:	cf 93       	push	r28
    1cac:	00 d0       	rcall	.+0      	; 0x1cae <send_a_string+0x6>
    1cae:	cd b7       	in	r28, 0x3d	; 61
    1cb0:	de b7       	in	r29, 0x3e	; 62
    1cb2:	9a 83       	std	Y+2, r25	; 0x02
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	0b c0       	rjmp	.+22     	; 0x1cce <send_a_string+0x26>
    while(*string_of_characters > 0)
    {
        send_a_character(*string_of_characters++);
    1cb8:	e9 81       	ldd	r30, Y+1	; 0x01
    1cba:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbc:	20 81       	ld	r18, Z
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	9a 83       	std	Y+2, r25	; 0x02
    1cc6:	89 83       	std	Y+1, r24	; 0x01
    1cc8:	82 2f       	mov	r24, r18
    1cca:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <send_a_character>
    PORTD &= ~1<<enable;
    PORTB = 0;
}
void send_a_string(char *string_of_characters)
{
    while(*string_of_characters > 0)
    1cce:	e9 81       	ldd	r30, Y+1	; 0x01
    1cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd2:	80 81       	ld	r24, Z
    1cd4:	88 23       	and	r24, r24
    1cd6:	81 f7       	brne	.-32     	; 0x1cb8 <send_a_string+0x10>
    {
        send_a_character(*string_of_characters++);
    }
}
    1cd8:	0f 90       	pop	r0
    1cda:	0f 90       	pop	r0
    1cdc:	cf 91       	pop	r28
    1cde:	df 91       	pop	r29
    1ce0:	08 95       	ret

00001ce2 <__divmodhi4>:
    1ce2:	97 fb       	bst	r25, 7
    1ce4:	09 2e       	mov	r0, r25
    1ce6:	07 26       	eor	r0, r23
    1ce8:	0a d0       	rcall	.+20     	; 0x1cfe <__divmodhi4_neg1>
    1cea:	77 fd       	sbrc	r23, 7
    1cec:	04 d0       	rcall	.+8      	; 0x1cf6 <__divmodhi4_neg2>
    1cee:	0c d0       	rcall	.+24     	; 0x1d08 <__udivmodhi4>
    1cf0:	06 d0       	rcall	.+12     	; 0x1cfe <__divmodhi4_neg1>
    1cf2:	00 20       	and	r0, r0
    1cf4:	1a f4       	brpl	.+6      	; 0x1cfc <__divmodhi4_exit>

00001cf6 <__divmodhi4_neg2>:
    1cf6:	70 95       	com	r23
    1cf8:	61 95       	neg	r22
    1cfa:	7f 4f       	sbci	r23, 0xFF	; 255

00001cfc <__divmodhi4_exit>:
    1cfc:	08 95       	ret

00001cfe <__divmodhi4_neg1>:
    1cfe:	f6 f7       	brtc	.-4      	; 0x1cfc <__divmodhi4_exit>
    1d00:	90 95       	com	r25
    1d02:	81 95       	neg	r24
    1d04:	9f 4f       	sbci	r25, 0xFF	; 255
    1d06:	08 95       	ret

00001d08 <__udivmodhi4>:
    1d08:	aa 1b       	sub	r26, r26
    1d0a:	bb 1b       	sub	r27, r27
    1d0c:	51 e1       	ldi	r21, 0x11	; 17
    1d0e:	07 c0       	rjmp	.+14     	; 0x1d1e <__udivmodhi4_ep>

00001d10 <__udivmodhi4_loop>:
    1d10:	aa 1f       	adc	r26, r26
    1d12:	bb 1f       	adc	r27, r27
    1d14:	a6 17       	cp	r26, r22
    1d16:	b7 07       	cpc	r27, r23
    1d18:	10 f0       	brcs	.+4      	; 0x1d1e <__udivmodhi4_ep>
    1d1a:	a6 1b       	sub	r26, r22
    1d1c:	b7 0b       	sbc	r27, r23

00001d1e <__udivmodhi4_ep>:
    1d1e:	88 1f       	adc	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	5a 95       	dec	r21
    1d24:	a9 f7       	brne	.-22     	; 0x1d10 <__udivmodhi4_loop>
    1d26:	80 95       	com	r24
    1d28:	90 95       	com	r25
    1d2a:	bc 01       	movw	r22, r24
    1d2c:	cd 01       	movw	r24, r26
    1d2e:	08 95       	ret

00001d30 <__prologue_saves__>:
    1d30:	2f 92       	push	r2
    1d32:	3f 92       	push	r3
    1d34:	4f 92       	push	r4
    1d36:	5f 92       	push	r5
    1d38:	6f 92       	push	r6
    1d3a:	7f 92       	push	r7
    1d3c:	8f 92       	push	r8
    1d3e:	9f 92       	push	r9
    1d40:	af 92       	push	r10
    1d42:	bf 92       	push	r11
    1d44:	cf 92       	push	r12
    1d46:	df 92       	push	r13
    1d48:	ef 92       	push	r14
    1d4a:	ff 92       	push	r15
    1d4c:	0f 93       	push	r16
    1d4e:	1f 93       	push	r17
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	cd b7       	in	r28, 0x3d	; 61
    1d56:	de b7       	in	r29, 0x3e	; 62
    1d58:	ca 1b       	sub	r28, r26
    1d5a:	db 0b       	sbc	r29, r27
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	09 94       	ijmp

00001d68 <__epilogue_restores__>:
    1d68:	2a 88       	ldd	r2, Y+18	; 0x12
    1d6a:	39 88       	ldd	r3, Y+17	; 0x11
    1d6c:	48 88       	ldd	r4, Y+16	; 0x10
    1d6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d70:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d72:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d74:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d76:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d78:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d7a:	b9 84       	ldd	r11, Y+9	; 0x09
    1d7c:	c8 84       	ldd	r12, Y+8	; 0x08
    1d7e:	df 80       	ldd	r13, Y+7	; 0x07
    1d80:	ee 80       	ldd	r14, Y+6	; 0x06
    1d82:	fd 80       	ldd	r15, Y+5	; 0x05
    1d84:	0c 81       	ldd	r16, Y+4	; 0x04
    1d86:	1b 81       	ldd	r17, Y+3	; 0x03
    1d88:	aa 81       	ldd	r26, Y+2	; 0x02
    1d8a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d8c:	ce 0f       	add	r28, r30
    1d8e:	d1 1d       	adc	r29, r1
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	ed 01       	movw	r28, r26
    1d9c:	08 95       	ret

00001d9e <itoa>:
    1d9e:	fb 01       	movw	r30, r22
    1da0:	9f 01       	movw	r18, r30
    1da2:	e8 94       	clt
    1da4:	42 30       	cpi	r20, 0x02	; 2
    1da6:	c4 f0       	brlt	.+48     	; 0x1dd8 <itoa+0x3a>
    1da8:	45 32       	cpi	r20, 0x25	; 37
    1daa:	b4 f4       	brge	.+44     	; 0x1dd8 <itoa+0x3a>
    1dac:	4a 30       	cpi	r20, 0x0A	; 10
    1dae:	29 f4       	brne	.+10     	; 0x1dba <itoa+0x1c>
    1db0:	97 fb       	bst	r25, 7
    1db2:	1e f4       	brtc	.+6      	; 0x1dba <itoa+0x1c>
    1db4:	90 95       	com	r25
    1db6:	81 95       	neg	r24
    1db8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dba:	64 2f       	mov	r22, r20
    1dbc:	77 27       	eor	r23, r23
    1dbe:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__udivmodhi4>
    1dc2:	80 5d       	subi	r24, 0xD0	; 208
    1dc4:	8a 33       	cpi	r24, 0x3A	; 58
    1dc6:	0c f0       	brlt	.+2      	; 0x1dca <itoa+0x2c>
    1dc8:	89 5d       	subi	r24, 0xD9	; 217
    1dca:	81 93       	st	Z+, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	a1 f7       	brne	.-24     	; 0x1dba <itoa+0x1c>
    1dd2:	16 f4       	brtc	.+4      	; 0x1dd8 <itoa+0x3a>
    1dd4:	5d e2       	ldi	r21, 0x2D	; 45
    1dd6:	51 93       	st	Z+, r21
    1dd8:	10 82       	st	Z, r1
    1dda:	c9 01       	movw	r24, r18
    1ddc:	0c 94 f0 0e 	jmp	0x1de0	; 0x1de0 <strrev>

00001de0 <strrev>:
    1de0:	dc 01       	movw	r26, r24
    1de2:	fc 01       	movw	r30, r24
    1de4:	67 2f       	mov	r22, r23
    1de6:	71 91       	ld	r23, Z+
    1de8:	77 23       	and	r23, r23
    1dea:	e1 f7       	brne	.-8      	; 0x1de4 <strrev+0x4>
    1dec:	32 97       	sbiw	r30, 0x02	; 2
    1dee:	04 c0       	rjmp	.+8      	; 0x1df8 <strrev+0x18>
    1df0:	7c 91       	ld	r23, X
    1df2:	6d 93       	st	X+, r22
    1df4:	70 83       	st	Z, r23
    1df6:	62 91       	ld	r22, -Z
    1df8:	ae 17       	cp	r26, r30
    1dfa:	bf 07       	cpc	r27, r31
    1dfc:	c8 f3       	brcs	.-14     	; 0x1df0 <strrev+0x10>
    1dfe:	08 95       	ret

00001e00 <_exit>:
    1e00:	f8 94       	cli

00001e02 <__stop_program>:
    1e02:	ff cf       	rjmp	.-2      	; 0x1e02 <__stop_program>
