
infotaiment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c5c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002c5c  00002cf0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000057  00800068  00800068  00002cf8  2**0
                  ALLOC
  3 .stab         000029f4  00000000  00000000  00002cf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ae  00000000  00000000  000056ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  0000689a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000069fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006b89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008bce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009ccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ac54  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000add4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b096  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b924  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	af 3b       	cpi	r26, 0xBF	; 191
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e5       	ldi	r30, 0x5C	; 92
      78:	fc e2       	ldi	r31, 0x2C	; 44
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 89 15 	call	0x2b12	; 0x2b12 <main>
      8a:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f5 15 	jmp	0x2bea	; 0x2bea <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 11 16 	jmp	0x2c22	; 0x2c22 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 fd 15 	jmp	0x2bfa	; 0x2bfa <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 19 16 	jmp	0x2c32	; 0x2c32 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 01 16 	jmp	0x2c02	; 0x2c02 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 1d 16 	jmp	0x2c3a	; 0x2c3a <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 05 16 	jmp	0x2c0a	; 0x2c0a <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 21 16 	jmp	0x2c42	; 0x2c42 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <scan_btn1>:
#include "Buttons.h"

#include "Gpio.h"
#include "del.h"
uint8 scan_btn1(void)  //keypad button 1 pull up resistor
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	0f 92       	push	r0
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
     ca8:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn1)==0)
     caa:	8a e0       	ldi	r24, 0x0A	; 10
     cac:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cb0:	88 23       	and	r24, r24
     cb2:	69 f4       	brne	.+26     	; 0xcce <scan_btn1+0x30>
		{
			del_ms(30);
     cb4:	6e e1       	ldi	r22, 0x1E	; 30
     cb6:	70 e0       	ldi	r23, 0x00	; 0
     cb8:	80 e0       	ldi	r24, 0x00	; 0
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <del_ms>
			if(DIO_ReadPin(btn1)==0)
     cc0:	8a e0       	ldi	r24, 0x0A	; 10
     cc2:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cc6:	88 23       	and	r24, r24
     cc8:	11 f4       	brne	.+4      	; 0xcce <scan_btn1+0x30>
			{
				ret=1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
     cce:	89 81       	ldd	r24, Y+1	; 0x01
}
     cd0:	0f 90       	pop	r0
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <scan_btn0>:

uint8 scan_btn0(void)  //button pull down resistor
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	0f 92       	push	r0
     cde:	cd b7       	in	r28, 0x3d	; 61
     ce0:	de b7       	in	r29, 0x3e	; 62
	uint8 ret=0;
     ce2:	19 82       	std	Y+1, r1	; 0x01
	if(DIO_ReadPin(btn0))
     ce4:	84 e1       	ldi	r24, 0x14	; 20
     ce6:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     cea:	88 23       	and	r24, r24
     cec:	69 f0       	breq	.+26     	; 0xd08 <scan_btn0+0x30>
		{
			del_ms(30);
     cee:	6e e1       	ldi	r22, 0x1E	; 30
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	80 e0       	ldi	r24, 0x00	; 0
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	0e 94 3c 15 	call	0x2a78	; 0x2a78 <del_ms>
			if(DIO_ReadPin(btn0))
     cfa:	84 e1       	ldi	r24, 0x14	; 20
     cfc:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
     d00:	88 23       	and	r24, r24
     d02:	11 f0       	breq	.+4      	; 0xd08 <scan_btn0+0x30>
			{
				ret=1;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	89 83       	std	Y+1, r24	; 0x01
			}
		}
	return ret;
     d08:	89 81       	ldd	r24, Y+1	; 0x01
}
     d0a:	0f 90       	pop	r0
     d0c:	cf 91       	pop	r28
     d0e:	df 91       	pop	r29
     d10:	08 95       	ret

00000d12 <DIO_WritePin>:
#include "Gpio.h"



void DIO_WritePin(uint8 PinNum,uint8 PinValue)
{
     d12:	df 93       	push	r29
     d14:	cf 93       	push	r28
     d16:	00 d0       	rcall	.+0      	; 0xd18 <DIO_WritePin+0x6>
     d18:	cd b7       	in	r28, 0x3d	; 61
     d1a:	de b7       	in	r29, 0x3e	; 62
     d1c:	89 83       	std	Y+1, r24	; 0x01
     d1e:	6a 83       	std	Y+2, r22	; 0x02
	if(PinValue==LOW)
     d20:	8a 81       	ldd	r24, Y+2	; 0x02
     d22:	88 23       	and	r24, r24
     d24:	09 f0       	breq	.+2      	; 0xd28 <DIO_WritePin+0x16>
     d26:	74 c0       	rjmp	.+232    	; 0xe10 <DIO_WritePin+0xfe>
	{
		if((PinNum>=0)&&(PinNum<=7))   //PORT A
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	88 30       	cpi	r24, 0x08	; 8
     d2c:	a8 f4       	brcc	.+42     	; 0xd58 <DIO_WritePin+0x46>
		{
			Clr_Bit(PORTA,PinNum);
     d2e:	ab e3       	ldi	r26, 0x3B	; 59
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	eb e3       	ldi	r30, 0x3B	; 59
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_WritePin+0x3a>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_WritePin+0x36>
     d50:	80 95       	com	r24
     d52:	84 23       	and	r24, r20
     d54:	8c 93       	st	X, r24
     d56:	cd c0       	rjmp	.+410    	; 0xef2 <DIO_WritePin+0x1e0>
		}

		else if((PinNum>=8)&&(PinNum<=15)) // PORT B
     d58:	89 81       	ldd	r24, Y+1	; 0x01
     d5a:	88 30       	cpi	r24, 0x08	; 8
     d5c:	d8 f0       	brcs	.+54     	; 0xd94 <DIO_WritePin+0x82>
     d5e:	89 81       	ldd	r24, Y+1	; 0x01
     d60:	80 31       	cpi	r24, 0x10	; 16
     d62:	c0 f4       	brcc	.+48     	; 0xd94 <DIO_WritePin+0x82>
		{
			Clr_Bit(PORTB,(PinNum-8));
     d64:	a8 e3       	ldi	r26, 0x38	; 56
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	e8 e3       	ldi	r30, 0x38	; 56
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	48 2f       	mov	r20, r24
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	88 2f       	mov	r24, r24
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	9c 01       	movw	r18, r24
     d78:	28 50       	subi	r18, 0x08	; 8
     d7a:	30 40       	sbci	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <DIO_WritePin+0x76>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <DIO_WritePin+0x72>
     d8c:	80 95       	com	r24
     d8e:	84 23       	and	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	af c0       	rjmp	.+350    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=16)&&(PinNum<=23)) //PORT C
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	80 31       	cpi	r24, 0x10	; 16
     d98:	d8 f0       	brcs	.+54     	; 0xdd0 <DIO_WritePin+0xbe>
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	88 31       	cpi	r24, 0x18	; 24
     d9e:	c0 f4       	brcc	.+48     	; 0xdd0 <DIO_WritePin+0xbe>
		{
			Clr_Bit(PORTC,(PinNum-16));
     da0:	a5 e3       	ldi	r26, 0x35	; 53
     da2:	b0 e0       	ldi	r27, 0x00	; 0
     da4:	e5 e3       	ldi	r30, 0x35	; 53
     da6:	f0 e0       	ldi	r31, 0x00	; 0
     da8:	80 81       	ld	r24, Z
     daa:	48 2f       	mov	r20, r24
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	9c 01       	movw	r18, r24
     db4:	20 51       	subi	r18, 0x10	; 16
     db6:	30 40       	sbci	r19, 0x00	; 0
     db8:	81 e0       	ldi	r24, 0x01	; 1
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	02 2e       	mov	r0, r18
     dbe:	02 c0       	rjmp	.+4      	; 0xdc4 <DIO_WritePin+0xb2>
     dc0:	88 0f       	add	r24, r24
     dc2:	99 1f       	adc	r25, r25
     dc4:	0a 94       	dec	r0
     dc6:	e2 f7       	brpl	.-8      	; 0xdc0 <DIO_WritePin+0xae>
     dc8:	80 95       	com	r24
     dca:	84 23       	and	r24, r20
     dcc:	8c 93       	st	X, r24
     dce:	91 c0       	rjmp	.+290    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=24)&&(PinNum<=31)) //PORT D
     dd0:	89 81       	ldd	r24, Y+1	; 0x01
     dd2:	88 31       	cpi	r24, 0x18	; 24
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <DIO_WritePin+0xc6>
     dd6:	8d c0       	rjmp	.+282    	; 0xef2 <DIO_WritePin+0x1e0>
     dd8:	89 81       	ldd	r24, Y+1	; 0x01
     dda:	80 32       	cpi	r24, 0x20	; 32
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <DIO_WritePin+0xce>
     dde:	89 c0       	rjmp	.+274    	; 0xef2 <DIO_WritePin+0x1e0>
		{
			Clr_Bit(PORTD,(PinNum-24));
     de0:	a2 e3       	ldi	r26, 0x32	; 50
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e2 e3       	ldi	r30, 0x32	; 50
     de6:	f0 e0       	ldi	r31, 0x00	; 0
     de8:	80 81       	ld	r24, Z
     dea:	48 2f       	mov	r20, r24
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9c 01       	movw	r18, r24
     df4:	28 51       	subi	r18, 0x18	; 24
     df6:	30 40       	sbci	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <DIO_WritePin+0xf2>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <DIO_WritePin+0xee>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	71 c0       	rjmp	.+226    	; 0xef2 <DIO_WritePin+0x1e0>
		}
	}
	else if(PinValue==HIGH)
     e10:	8a 81       	ldd	r24, Y+2	; 0x02
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	09 f0       	breq	.+2      	; 0xe18 <DIO_WritePin+0x106>
     e16:	6d c0       	rjmp	.+218    	; 0xef2 <DIO_WritePin+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
     e18:	89 81       	ldd	r24, Y+1	; 0x01
     e1a:	88 30       	cpi	r24, 0x08	; 8
     e1c:	a0 f4       	brcc	.+40     	; 0xe46 <DIO_WritePin+0x134>
		{
			Set_Bit(PORTA,PinNum);
     e1e:	ab e3       	ldi	r26, 0x3B	; 59
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	eb e3       	ldi	r30, 0x3B	; 59
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	89 81       	ldd	r24, Y+1	; 0x01
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_WritePin+0x12a>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_WritePin+0x126>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	56 c0       	rjmp	.+172    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=8&&PinNum<=15))	//PORT B
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	88 30       	cpi	r24, 0x08	; 8
     e4a:	d0 f0       	brcs	.+52     	; 0xe80 <DIO_WritePin+0x16e>
     e4c:	89 81       	ldd	r24, Y+1	; 0x01
     e4e:	80 31       	cpi	r24, 0x10	; 16
     e50:	b8 f4       	brcc	.+46     	; 0xe80 <DIO_WritePin+0x16e>
		{
			Set_Bit(PORTB,(PinNum-8));
     e52:	a8 e3       	ldi	r26, 0x38	; 56
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e8 e3       	ldi	r30, 0x38	; 56
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	48 2f       	mov	r20, r24
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	88 2f       	mov	r24, r24
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	9c 01       	movw	r18, r24
     e66:	28 50       	subi	r18, 0x08	; 8
     e68:	30 40       	sbci	r19, 0x00	; 0
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	02 2e       	mov	r0, r18
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <DIO_WritePin+0x164>
     e72:	88 0f       	add	r24, r24
     e74:	99 1f       	adc	r25, r25
     e76:	0a 94       	dec	r0
     e78:	e2 f7       	brpl	.-8      	; 0xe72 <DIO_WritePin+0x160>
     e7a:	84 2b       	or	r24, r20
     e7c:	8c 93       	st	X, r24
     e7e:	39 c0       	rjmp	.+114    	; 0xef2 <DIO_WritePin+0x1e0>
		}
		else if((PinNum>=16&&PinNum<=23))	//PORT C
     e80:	89 81       	ldd	r24, Y+1	; 0x01
     e82:	80 31       	cpi	r24, 0x10	; 16
     e84:	d0 f0       	brcs	.+52     	; 0xeba <DIO_WritePin+0x1a8>
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	88 31       	cpi	r24, 0x18	; 24
     e8a:	b8 f4       	brcc	.+46     	; 0xeba <DIO_WritePin+0x1a8>
		{
			Set_Bit(PORTC,(PinNum-16));
     e8c:	a5 e3       	ldi	r26, 0x35	; 53
     e8e:	b0 e0       	ldi	r27, 0x00	; 0
     e90:	e5 e3       	ldi	r30, 0x35	; 53
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	48 2f       	mov	r20, r24
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	9c 01       	movw	r18, r24
     ea0:	20 51       	subi	r18, 0x10	; 16
     ea2:	30 40       	sbci	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <DIO_WritePin+0x19e>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <DIO_WritePin+0x19a>
     eb4:	84 2b       	or	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	1c c0       	rjmp	.+56     	; 0xef2 <DIO_WritePin+0x1e0>
		}
		
		else if((PinNum>=24&&PinNum<=31))	//PORT D
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	88 31       	cpi	r24, 0x18	; 24
     ebe:	c8 f0       	brcs	.+50     	; 0xef2 <DIO_WritePin+0x1e0>
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	80 32       	cpi	r24, 0x20	; 32
     ec4:	b0 f4       	brcc	.+44     	; 0xef2 <DIO_WritePin+0x1e0>
		{
			Set_Bit(PORTD,(PinNum-24));
     ec6:	a2 e3       	ldi	r26, 0x32	; 50
     ec8:	b0 e0       	ldi	r27, 0x00	; 0
     eca:	e2 e3       	ldi	r30, 0x32	; 50
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
     ece:	80 81       	ld	r24, Z
     ed0:	48 2f       	mov	r20, r24
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	9c 01       	movw	r18, r24
     eda:	28 51       	subi	r18, 0x18	; 24
     edc:	30 40       	sbci	r19, 0x00	; 0
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	02 2e       	mov	r0, r18
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <DIO_WritePin+0x1d8>
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	0a 94       	dec	r0
     eec:	e2 f7       	brpl	.-8      	; 0xee6 <DIO_WritePin+0x1d4>
     eee:	84 2b       	or	r24, r20
     ef0:	8c 93       	st	X, r24
		}
	}
}
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	cf 91       	pop	r28
     ef8:	df 91       	pop	r29
     efa:	08 95       	ret

00000efc <DIO_ReadPin>:


uint8 DIO_ReadPin(uint8 PinNum)
{
     efc:	df 93       	push	r29
     efe:	cf 93       	push	r28
     f00:	00 d0       	rcall	.+0      	; 0xf02 <DIO_ReadPin+0x6>
     f02:	cd b7       	in	r28, 0x3d	; 61
     f04:	de b7       	in	r29, 0x3e	; 62
     f06:	8a 83       	std	Y+2, r24	; 0x02
	uint8 res=0;
     f08:	19 82       	std	Y+1, r1	; 0x01
	if((PinNum>=0)&&(PinNum<=7))	//PORT A
     f0a:	8a 81       	ldd	r24, Y+2	; 0x02
     f0c:	88 30       	cpi	r24, 0x08	; 8
     f0e:	90 f4       	brcc	.+36     	; 0xf34 <DIO_ReadPin+0x38>
	{
		res= Get_Bit(PINA,PinNum);
     f10:	e9 e3       	ldi	r30, 0x39	; 57
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	48 2f       	mov	r20, r24
     f18:	8a 81       	ldd	r24, Y+2	; 0x02
     f1a:	28 2f       	mov	r18, r24
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	02 2e       	mov	r0, r18
     f24:	02 c0       	rjmp	.+4      	; 0xf2a <DIO_ReadPin+0x2e>
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	0a 94       	dec	r0
     f2c:	e2 f7       	brpl	.-8      	; 0xf26 <DIO_ReadPin+0x2a>
     f2e:	84 23       	and	r24, r20
     f30:	89 83       	std	Y+1, r24	; 0x01
     f32:	50 c0       	rjmp	.+160    	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=8)&&(PinNum<=15))	//PORT B
     f34:	8a 81       	ldd	r24, Y+2	; 0x02
     f36:	88 30       	cpi	r24, 0x08	; 8
     f38:	c0 f0       	brcs	.+48     	; 0xf6a <DIO_ReadPin+0x6e>
     f3a:	8a 81       	ldd	r24, Y+2	; 0x02
     f3c:	80 31       	cpi	r24, 0x10	; 16
     f3e:	a8 f4       	brcc	.+42     	; 0xf6a <DIO_ReadPin+0x6e>
	{
		res= Get_Bit(PINB,(PinNum-8));
     f40:	e6 e3       	ldi	r30, 0x36	; 54
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	88 2f       	mov	r24, r24
     f4c:	90 e0       	ldi	r25, 0x00	; 0
     f4e:	9c 01       	movw	r18, r24
     f50:	28 50       	subi	r18, 0x08	; 8
     f52:	30 40       	sbci	r19, 0x00	; 0
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	02 2e       	mov	r0, r18
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <DIO_ReadPin+0x64>
     f5c:	88 0f       	add	r24, r24
     f5e:	99 1f       	adc	r25, r25
     f60:	0a 94       	dec	r0
     f62:	e2 f7       	brpl	.-8      	; 0xf5c <DIO_ReadPin+0x60>
     f64:	84 23       	and	r24, r20
     f66:	89 83       	std	Y+1, r24	; 0x01
     f68:	35 c0       	rjmp	.+106    	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=16)&&(PinNum<=23))	//PORT C
     f6a:	8a 81       	ldd	r24, Y+2	; 0x02
     f6c:	80 31       	cpi	r24, 0x10	; 16
     f6e:	c0 f0       	brcs	.+48     	; 0xfa0 <DIO_ReadPin+0xa4>
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	88 31       	cpi	r24, 0x18	; 24
     f74:	a8 f4       	brcc	.+42     	; 0xfa0 <DIO_ReadPin+0xa4>
	{
		res= Get_Bit(PINC,(PinNum-16));
     f76:	e3 e3       	ldi	r30, 0x33	; 51
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	48 2f       	mov	r20, r24
     f7e:	8a 81       	ldd	r24, Y+2	; 0x02
     f80:	88 2f       	mov	r24, r24
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	9c 01       	movw	r18, r24
     f86:	20 51       	subi	r18, 0x10	; 16
     f88:	30 40       	sbci	r19, 0x00	; 0
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	02 2e       	mov	r0, r18
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <DIO_ReadPin+0x9a>
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <DIO_ReadPin+0x96>
     f9a:	84 23       	and	r24, r20
     f9c:	89 83       	std	Y+1, r24	; 0x01
     f9e:	1a c0       	rjmp	.+52     	; 0xfd4 <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=24)&&(PinNum<=31))	//PORT D
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	88 31       	cpi	r24, 0x18	; 24
     fa4:	b8 f0       	brcs	.+46     	; 0xfd4 <DIO_ReadPin+0xd8>
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	80 32       	cpi	r24, 0x20	; 32
     faa:	a0 f4       	brcc	.+40     	; 0xfd4 <DIO_ReadPin+0xd8>
	{
		res= Get_Bit(PIND,(PinNum-24));
     fac:	e0 e3       	ldi	r30, 0x30	; 48
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	48 2f       	mov	r20, r24
     fb4:	8a 81       	ldd	r24, Y+2	; 0x02
     fb6:	88 2f       	mov	r24, r24
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	9c 01       	movw	r18, r24
     fbc:	28 51       	subi	r18, 0x18	; 24
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	02 2e       	mov	r0, r18
     fc6:	02 c0       	rjmp	.+4      	; 0xfcc <DIO_ReadPin+0xd0>
     fc8:	88 0f       	add	r24, r24
     fca:	99 1f       	adc	r25, r25
     fcc:	0a 94       	dec	r0
     fce:	e2 f7       	brpl	.-8      	; 0xfc8 <DIO_ReadPin+0xcc>
     fd0:	84 23       	and	r24, r20
     fd2:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <DIO_SetPinDirection+0x6>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==OUTPUT)						//set pin direction high
     fee:	8a 81       	ldd	r24, Y+2	; 0x02
     ff0:	81 30       	cpi	r24, 0x01	; 1
     ff2:	09 f0       	breq	.+2      	; 0xff6 <DIO_SetPinDirection+0x16>
     ff4:	70 c0       	rjmp	.+224    	; 0x10d6 <DIO_SetPinDirection+0xf6>
	{
		if((PinNum>=0)&&(PinNum<=7))	//PORT A
     ff6:	89 81       	ldd	r24, Y+1	; 0x01
     ff8:	88 30       	cpi	r24, 0x08	; 8
     ffa:	a0 f4       	brcc	.+40     	; 0x1024 <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
     ffc:	aa e3       	ldi	r26, 0x3A	; 58
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ea e3       	ldi	r30, 0x3A	; 58
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <DIO_SetPinDirection+0x3a>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <DIO_SetPinDirection+0x36>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	ce c0       	rjmp	.+412    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
    1024:	89 81       	ldd	r24, Y+1	; 0x01
    1026:	88 30       	cpi	r24, 0x08	; 8
    1028:	d0 f0       	brcs	.+52     	; 0x105e <DIO_SetPinDirection+0x7e>
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	80 31       	cpi	r24, 0x10	; 16
    102e:	b8 f4       	brcc	.+46     	; 0x105e <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
    1030:	a7 e3       	ldi	r26, 0x37	; 55
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e7 e3       	ldi	r30, 0x37	; 55
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	48 2f       	mov	r20, r24
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	88 2f       	mov	r24, r24
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	9c 01       	movw	r18, r24
    1044:	28 50       	subi	r18, 0x08	; 8
    1046:	30 40       	sbci	r19, 0x00	; 0
    1048:	81 e0       	ldi	r24, 0x01	; 1
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	02 2e       	mov	r0, r18
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <DIO_SetPinDirection+0x74>
    1050:	88 0f       	add	r24, r24
    1052:	99 1f       	adc	r25, r25
    1054:	0a 94       	dec	r0
    1056:	e2 f7       	brpl	.-8      	; 0x1050 <DIO_SetPinDirection+0x70>
    1058:	84 2b       	or	r24, r20
    105a:	8c 93       	st	X, r24
    105c:	b1 c0       	rjmp	.+354    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
    105e:	89 81       	ldd	r24, Y+1	; 0x01
    1060:	80 31       	cpi	r24, 0x10	; 16
    1062:	d0 f0       	brcs	.+52     	; 0x1098 <DIO_SetPinDirection+0xb8>
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 31       	cpi	r24, 0x18	; 24
    1068:	b8 f4       	brcc	.+46     	; 0x1098 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
    106a:	a4 e3       	ldi	r26, 0x34	; 52
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e4 e3       	ldi	r30, 0x34	; 52
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	48 2f       	mov	r20, r24
    1076:	89 81       	ldd	r24, Y+1	; 0x01
    1078:	88 2f       	mov	r24, r24
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	9c 01       	movw	r18, r24
    107e:	20 51       	subi	r18, 0x10	; 16
    1080:	30 40       	sbci	r19, 0x00	; 0
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	02 2e       	mov	r0, r18
    1088:	02 c0       	rjmp	.+4      	; 0x108e <DIO_SetPinDirection+0xae>
    108a:	88 0f       	add	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	0a 94       	dec	r0
    1090:	e2 f7       	brpl	.-8      	; 0x108a <DIO_SetPinDirection+0xaa>
    1092:	84 2b       	or	r24, r20
    1094:	8c 93       	st	X, r24
    1096:	94 c0       	rjmp	.+296    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=24)&&(PinNum<=31))		//PORT D
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	88 31       	cpi	r24, 0x18	; 24
    109c:	08 f4       	brcc	.+2      	; 0x10a0 <DIO_SetPinDirection+0xc0>
    109e:	90 c0       	rjmp	.+288    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	80 32       	cpi	r24, 0x20	; 32
    10a4:	08 f0       	brcs	.+2      	; 0x10a8 <DIO_SetPinDirection+0xc8>
    10a6:	8c c0       	rjmp	.+280    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRD,(PinNum-24));
    10a8:	a1 e3       	ldi	r26, 0x31	; 49
    10aa:	b0 e0       	ldi	r27, 0x00	; 0
    10ac:	e1 e3       	ldi	r30, 0x31	; 49
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	80 81       	ld	r24, Z
    10b2:	48 2f       	mov	r20, r24
    10b4:	89 81       	ldd	r24, Y+1	; 0x01
    10b6:	88 2f       	mov	r24, r24
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	9c 01       	movw	r18, r24
    10bc:	28 51       	subi	r18, 0x18	; 24
    10be:	30 40       	sbci	r19, 0x00	; 0
    10c0:	81 e0       	ldi	r24, 0x01	; 1
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	02 2e       	mov	r0, r18
    10c6:	02 c0       	rjmp	.+4      	; 0x10cc <DIO_SetPinDirection+0xec>
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	0a 94       	dec	r0
    10ce:	e2 f7       	brpl	.-8      	; 0x10c8 <DIO_SetPinDirection+0xe8>
    10d0:	84 2b       	or	r24, r20
    10d2:	8c 93       	st	X, r24
    10d4:	75 c0       	rjmp	.+234    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==INPUT)
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	88 23       	and	r24, r24
    10da:	09 f0       	breq	.+2      	; 0x10de <DIO_SetPinDirection+0xfe>
    10dc:	71 c0       	rjmp	.+226    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
    10de:	89 81       	ldd	r24, Y+1	; 0x01
    10e0:	88 30       	cpi	r24, 0x08	; 8
    10e2:	a8 f4       	brcc	.+42     	; 0x110e <DIO_SetPinDirection+0x12e>
		{
			Clr_Bit(DDRA,PinNum);
    10e4:	aa e3       	ldi	r26, 0x3A	; 58
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	ea e3       	ldi	r30, 0x3A	; 58
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	89 81       	ldd	r24, Y+1	; 0x01
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_SetPinDirection+0x122>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_SetPinDirection+0x11e>
    1106:	80 95       	com	r24
    1108:	84 23       	and	r24, r20
    110a:	8c 93       	st	X, r24
    110c:	59 c0       	rjmp	.+178    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	88 30       	cpi	r24, 0x08	; 8
    1112:	d8 f0       	brcs	.+54     	; 0x114a <DIO_SetPinDirection+0x16a>
    1114:	89 81       	ldd	r24, Y+1	; 0x01
    1116:	80 31       	cpi	r24, 0x10	; 16
    1118:	c0 f4       	brcc	.+48     	; 0x114a <DIO_SetPinDirection+0x16a>
		{
			Clr_Bit(DDRB,(PinNum-8));
    111a:	a7 e3       	ldi	r26, 0x37	; 55
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e7 e3       	ldi	r30, 0x37	; 55
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	88 2f       	mov	r24, r24
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	9c 01       	movw	r18, r24
    112e:	28 50       	subi	r18, 0x08	; 8
    1130:	30 40       	sbci	r19, 0x00	; 0
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	02 2e       	mov	r0, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_SetPinDirection+0x15e>
    113a:	88 0f       	add	r24, r24
    113c:	99 1f       	adc	r25, r25
    113e:	0a 94       	dec	r0
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_SetPinDirection+0x15a>
    1142:	80 95       	com	r24
    1144:	84 23       	and	r24, r20
    1146:	8c 93       	st	X, r24
    1148:	3b c0       	rjmp	.+118    	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
    114a:	89 81       	ldd	r24, Y+1	; 0x01
    114c:	80 31       	cpi	r24, 0x10	; 16
    114e:	d8 f0       	brcs	.+54     	; 0x1186 <DIO_SetPinDirection+0x1a6>
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	88 31       	cpi	r24, 0x18	; 24
    1154:	c0 f4       	brcc	.+48     	; 0x1186 <DIO_SetPinDirection+0x1a6>
		{
			Clr_Bit(DDRC,(PinNum-16));
    1156:	a4 e3       	ldi	r26, 0x34	; 52
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	e4 e3       	ldi	r30, 0x34	; 52
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	48 2f       	mov	r20, r24
    1162:	89 81       	ldd	r24, Y+1	; 0x01
    1164:	88 2f       	mov	r24, r24
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	9c 01       	movw	r18, r24
    116a:	20 51       	subi	r18, 0x10	; 16
    116c:	30 40       	sbci	r19, 0x00	; 0
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	02 2e       	mov	r0, r18
    1174:	02 c0       	rjmp	.+4      	; 0x117a <DIO_SetPinDirection+0x19a>
    1176:	88 0f       	add	r24, r24
    1178:	99 1f       	adc	r25, r25
    117a:	0a 94       	dec	r0
    117c:	e2 f7       	brpl	.-8      	; 0x1176 <DIO_SetPinDirection+0x196>
    117e:	80 95       	com	r24
    1180:	84 23       	and	r24, r20
    1182:	8c 93       	st	X, r24
    1184:	1d c0       	rjmp	.+58     	; 0x11c0 <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=24)&&(PinNum<=31)) 	//PORT D
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	88 31       	cpi	r24, 0x18	; 24
    118a:	d0 f0       	brcs	.+52     	; 0x11c0 <DIO_SetPinDirection+0x1e0>
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	80 32       	cpi	r24, 0x20	; 32
    1190:	b8 f4       	brcc	.+46     	; 0x11c0 <DIO_SetPinDirection+0x1e0>

		{
			Clr_Bit(DDRD,(PinNum-24));
    1192:	a1 e3       	ldi	r26, 0x31	; 49
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	e1 e3       	ldi	r30, 0x31	; 49
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	48 2f       	mov	r20, r24
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	88 2f       	mov	r24, r24
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	9c 01       	movw	r18, r24
    11a6:	28 51       	subi	r18, 0x18	; 24
    11a8:	30 40       	sbci	r19, 0x00	; 0
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	02 2e       	mov	r0, r18
    11b0:	02 c0       	rjmp	.+4      	; 0x11b6 <DIO_SetPinDirection+0x1d6>
    11b2:	88 0f       	add	r24, r24
    11b4:	99 1f       	adc	r25, r25
    11b6:	0a 94       	dec	r0
    11b8:	e2 f7       	brpl	.-8      	; 0x11b2 <DIO_SetPinDirection+0x1d2>
    11ba:	80 95       	com	r24
    11bc:	84 23       	and	r24, r20
    11be:	8c 93       	st	X, r24
		}
	}
}
    11c0:	0f 90       	pop	r0
    11c2:	0f 90       	pop	r0
    11c4:	cf 91       	pop	r28
    11c6:	df 91       	pop	r29
    11c8:	08 95       	ret

000011ca <Global_Interrupt_Enable>:


#include "Interrupt.h"

void Global_Interrupt_Enable(void)
{
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	cd b7       	in	r28, 0x3d	; 61
    11d0:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(SREG,I);
    11d2:	af e5       	ldi	r26, 0x5F	; 95
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	ef e5       	ldi	r30, 0x5F	; 95
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	80 68       	ori	r24, 0x80	; 128
    11de:	8c 93       	st	X, r24
}
    11e0:	cf 91       	pop	r28
    11e2:	df 91       	pop	r29
    11e4:	08 95       	ret

000011e6 <Timer1_overflow_Interrupt_Enable>:

void Timer1_overflow_Interrupt_Enable(void)
{
    11e6:	df 93       	push	r29
    11e8:	cf 93       	push	r28
    11ea:	cd b7       	in	r28, 0x3d	; 61
    11ec:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TOIE1);
    11ee:	a9 e5       	ldi	r26, 0x59	; 89
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e9 e5       	ldi	r30, 0x59	; 89
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	84 60       	ori	r24, 0x04	; 4
    11fa:	8c 93       	st	X, r24
}
    11fc:	cf 91       	pop	r28
    11fe:	df 91       	pop	r29
    1200:	08 95       	ret

00001202 <Timer0_overflow_Interrupt_Enable>:
void Timer0_overflow_Interrupt_Enable(void)
{
    1202:	df 93       	push	r29
    1204:	cf 93       	push	r28
    1206:	cd b7       	in	r28, 0x3d	; 61
    1208:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TOIE0);
    120a:	a9 e5       	ldi	r26, 0x59	; 89
    120c:	b0 e0       	ldi	r27, 0x00	; 0
    120e:	e9 e5       	ldi	r30, 0x59	; 89
    1210:	f0 e0       	ldi	r31, 0x00	; 0
    1212:	80 81       	ld	r24, Z
    1214:	81 60       	ori	r24, 0x01	; 1
    1216:	8c 93       	st	X, r24
}
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <Timer1_Input_capture_Interrupt_Enable>:
void Timer1_Input_capture_Interrupt_Enable(void)
{
    121e:	df 93       	push	r29
    1220:	cf 93       	push	r28
    1222:	cd b7       	in	r28, 0x3d	; 61
    1224:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,TICIE1);
    1226:	a9 e5       	ldi	r26, 0x59	; 89
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e5       	ldi	r30, 0x59	; 89
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	80 62       	ori	r24, 0x20	; 32
    1232:	8c 93       	st	X, r24
}
    1234:	cf 91       	pop	r28
    1236:	df 91       	pop	r29
    1238:	08 95       	ret

0000123a <Ext2_Interrupt2_Enable>:

void Ext2_Interrupt2_Enable(void)
{
    123a:	df 93       	push	r29
    123c:	cf 93       	push	r28
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    Set_Bit(GICR,INT2);
    1242:	ab e5       	ldi	r26, 0x5B	; 91
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	eb e5       	ldi	r30, 0x5B	; 91
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 62       	ori	r24, 0x20	; 32
    124e:	8c 93       	st	X, r24
}
    1250:	cf 91       	pop	r28
    1252:	df 91       	pop	r29
    1254:	08 95       	ret

00001256 <Ext2_Interrupt2_Mode>:

void Ext2_Interrupt2_Mode(uint8 mode)
{
    1256:	df 93       	push	r29
    1258:	cf 93       	push	r28
    125a:	00 d0       	rcall	.+0      	; 0x125c <Ext2_Interrupt2_Mode+0x6>
    125c:	0f 92       	push	r0
    125e:	cd b7       	in	r28, 0x3d	; 61
    1260:	de b7       	in	r29, 0x3e	; 62
    1262:	89 83       	std	Y+1, r24	; 0x01
	switch(mode)
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	28 2f       	mov	r18, r24
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	3b 83       	std	Y+3, r19	; 0x03
    126c:	2a 83       	std	Y+2, r18	; 0x02
    126e:	8a 81       	ldd	r24, Y+2	; 0x02
    1270:	9b 81       	ldd	r25, Y+3	; 0x03
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	31 f0       	breq	.+12     	; 0x1282 <Ext2_Interrupt2_Mode+0x2c>
    1276:	2a 81       	ldd	r18, Y+2	; 0x02
    1278:	3b 81       	ldd	r19, Y+3	; 0x03
    127a:	21 30       	cpi	r18, 0x01	; 1
    127c:	31 05       	cpc	r19, r1
    127e:	49 f0       	breq	.+18     	; 0x1292 <Ext2_Interrupt2_Mode+0x3c>
    1280:	0f c0       	rjmp	.+30     	; 0x12a0 <Ext2_Interrupt2_Mode+0x4a>
		{
		case 0:
			 Clr_Bit(MCUCSR,ISC2);
    1282:	a4 e5       	ldi	r26, 0x54	; 84
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	e4 e5       	ldi	r30, 0x54	; 84
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	80 81       	ld	r24, Z
    128c:	8f 7b       	andi	r24, 0xBF	; 191
    128e:	8c 93       	st	X, r24
    1290:	07 c0       	rjmp	.+14     	; 0x12a0 <Ext2_Interrupt2_Mode+0x4a>
			break;
		case 1:
			Set_Bit(MCUCSR,ISC2);
    1292:	a4 e5       	ldi	r26, 0x54	; 84
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e4 e5       	ldi	r30, 0x54	; 84
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	80 64       	ori	r24, 0x40	; 64
    129e:	8c 93       	st	X, r24
			break;
		}
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <Global_Interrupt_Disable>:
void Global_Interrupt_Disable(void)
{
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(SREG,I);
    12b4:	af e5       	ldi	r26, 0x5F	; 95
    12b6:	b0 e0       	ldi	r27, 0x00	; 0
    12b8:	ef e5       	ldi	r30, 0x5F	; 95
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	8f 77       	andi	r24, 0x7F	; 127
    12c0:	8c 93       	st	X, r24
}
    12c2:	cf 91       	pop	r28
    12c4:	df 91       	pop	r29
    12c6:	08 95       	ret

000012c8 <Timer0_overflow_Interrupt_Disable>:

void Timer0_overflow_Interrupt_Disable()
{
    12c8:	df 93       	push	r29
    12ca:	cf 93       	push	r28
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TIMSK,TOIE0);
    12d0:	a9 e5       	ldi	r26, 0x59	; 89
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e9 e5       	ldi	r30, 0x59	; 89
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	8e 7f       	andi	r24, 0xFE	; 254
    12dc:	8c 93       	st	X, r24
}
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <KYP_vidInit>:
#include "LIB/Standard_Types.h"
#include "Gpio.h"
#include "KYP_int.h"
Button_status button_state=NOT_PRESSED;
void KYP_vidInit(void)
{
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	//c1->c3 are input // r1->r3 are output
	DIO_SetPinDirection(col1,INPUT);
    12ec:	85 e1       	ldi	r24, 0x15	; 21
    12ee:	60 e0       	ldi	r22, 0x00	; 0
    12f0:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(col2,INPUT);
    12f4:	86 e1       	ldi	r24, 0x16	; 22
    12f6:	60 e0       	ldi	r22, 0x00	; 0
    12f8:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(col3,INPUT);
    12fc:	87 e1       	ldi	r24, 0x17	; 23
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(row1,OUTPUT);
    1304:	82 e1       	ldi	r24, 0x12	; 18
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(row2,OUTPUT);
    130c:	83 e1       	ldi	r24, 0x13	; 19
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection(row3,OUTPUT);
    1314:	84 e1       	ldi	r24, 0x14	; 20
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_WritePin(col1,HIGH);
    131c:	85 e1       	ldi	r24, 0x15	; 21
    131e:	61 e0       	ldi	r22, 0x01	; 1
    1320:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(col2,HIGH);
    1324:	86 e1       	ldi	r24, 0x16	; 22
    1326:	61 e0       	ldi	r22, 0x01	; 1
    1328:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(col3,HIGH);
    132c:	87 e1       	ldi	r24, 0x17	; 23
    132e:	61 e0       	ldi	r22, 0x01	; 1
    1330:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <Kyp_getPressedButton>:

Button_status Kyp_getPressedButton(uint8* Button_Num)
{
    133a:	df 93       	push	r29
    133c:	cf 93       	push	r28
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	27 97       	sbiw	r28, 0x07	; 7
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	9d 83       	std	Y+5, r25	; 0x05
    1350:	8c 83       	std	Y+4, r24	; 0x04
	uint8 buttonvalue=0;
    1352:	1b 82       	std	Y+3, r1	; 0x03
	uint8 col=0;
    1354:	1a 82       	std	Y+2, r1	; 0x02
	uint8 row=0;
    1356:	19 82       	std	Y+1, r1	; 0x01
	for(col=0;col<3;col++)
    1358:	1a 82       	std	Y+2, r1	; 0x02
    135a:	28 c0       	rjmp	.+80     	; 0x13ac <Kyp_getPressedButton+0x72>
	{
		DIO_WritePin((col1+col),LOW);
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	8b 5e       	subi	r24, 0xEB	; 235
    1360:	60 e0       	ldi	r22, 0x00	; 0
    1362:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
		for(row=0;row<3;row++)
    1366:	19 82       	std	Y+1, r1	; 0x01
    1368:	16 c0       	rjmp	.+44     	; 0x1396 <Kyp_getPressedButton+0x5c>
		{
			if(DIO_ReadPin(row1+row)==0)
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	8e 5e       	subi	r24, 0xEE	; 238
    136e:	0e 94 7e 07 	call	0xefc	; 0xefc <DIO_ReadPin>
    1372:	88 23       	and	r24, r24
    1374:	69 f4       	brne	.+26     	; 0x1390 <Kyp_getPressedButton+0x56>
			{
				buttonvalue=(row*3)+col+1;
    1376:	89 81       	ldd	r24, Y+1	; 0x01
    1378:	28 2f       	mov	r18, r24
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	c9 01       	movw	r24, r18
    137e:	88 0f       	add	r24, r24
    1380:	99 1f       	adc	r25, r25
    1382:	82 0f       	add	r24, r18
    1384:	93 1f       	adc	r25, r19
    1386:	98 2f       	mov	r25, r24
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	89 0f       	add	r24, r25
    138c:	8f 5f       	subi	r24, 0xFF	; 255
    138e:	8b 83       	std	Y+3, r24	; 0x03
	uint8 col=0;
	uint8 row=0;
	for(col=0;col<3;col++)
	{
		DIO_WritePin((col1+col),LOW);
		for(row=0;row<3;row++)
    1390:	89 81       	ldd	r24, Y+1	; 0x01
    1392:	8f 5f       	subi	r24, 0xFF	; 255
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	89 81       	ldd	r24, Y+1	; 0x01
    1398:	83 30       	cpi	r24, 0x03	; 3
    139a:	38 f3       	brcs	.-50     	; 0x136a <Kyp_getPressedButton+0x30>
			if(DIO_ReadPin(row1+row)==0)
			{
				buttonvalue=(row*3)+col+1;
			}
		}
		DIO_WritePin((col1+col),HIGH);
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	8b 5e       	subi	r24, 0xEB	; 235
    13a0:	61 e0       	ldi	r22, 0x01	; 1
    13a2:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
Button_status Kyp_getPressedButton(uint8* Button_Num)
{
	uint8 buttonvalue=0;
	uint8 col=0;
	uint8 row=0;
	for(col=0;col<3;col++)
    13a6:	8a 81       	ldd	r24, Y+2	; 0x02
    13a8:	8f 5f       	subi	r24, 0xFF	; 255
    13aa:	8a 83       	std	Y+2, r24	; 0x02
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	83 30       	cpi	r24, 0x03	; 3
    13b0:	a8 f2       	brcs	.-86     	; 0x135c <Kyp_getPressedButton+0x22>
				buttonvalue=(row*3)+col+1;
			}
		}
		DIO_WritePin((col1+col),HIGH);
	}
		if(buttonvalue)
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	88 23       	and	r24, r24
    13b6:	89 f0       	breq	.+34     	; 0x13da <Kyp_getPressedButton+0xa0>
		{
			if(((buttonvalue==1)||(buttonvalue==2))&&button_state==NOT_PRESSED)
    13b8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ba:	81 30       	cpi	r24, 0x01	; 1
    13bc:	19 f0       	breq	.+6      	; 0x13c4 <Kyp_getPressedButton+0x8a>
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	82 30       	cpi	r24, 0x02	; 2
    13c2:	41 f4       	brne	.+16     	; 0x13d4 <Kyp_getPressedButton+0x9a>
    13c4:	80 91 68 00 	lds	r24, 0x0068
    13c8:	88 23       	and	r24, r24
    13ca:	21 f4       	brne	.+8      	; 0x13d4 <Kyp_getPressedButton+0x9a>
			{
				button_state=PRE_PRESSED;
    13cc:	81 e0       	ldi	r24, 0x01	; 1
    13ce:	80 93 68 00 	sts	0x0068, r24
    13d2:	05 c0       	rjmp	.+10     	; 0x13de <Kyp_getPressedButton+0xa4>
			}
			else
			{
				button_state=NOT_PRESSED;
    13d4:	10 92 68 00 	sts	0x0068, r1
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <Kyp_getPressedButton+0xa4>
			}
		}
		else
		{
			button_state=NOT_PRESSED;
    13da:	10 92 68 00 	sts	0x0068, r1
		}
		switch(button_state)
    13de:	80 91 68 00 	lds	r24, 0x0068
    13e2:	28 2f       	mov	r18, r24
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	3f 83       	std	Y+7, r19	; 0x07
    13e8:	2e 83       	std	Y+6, r18	; 0x06
    13ea:	8e 81       	ldd	r24, Y+6	; 0x06
    13ec:	9f 81       	ldd	r25, Y+7	; 0x07
    13ee:	81 30       	cpi	r24, 0x01	; 1
    13f0:	91 05       	cpc	r25, r1
    13f2:	31 f0       	breq	.+12     	; 0x1400 <Kyp_getPressedButton+0xc6>
    13f4:	2e 81       	ldd	r18, Y+6	; 0x06
    13f6:	3f 81       	ldd	r19, Y+7	; 0x07
    13f8:	22 30       	cpi	r18, 0x02	; 2
    13fa:	31 05       	cpc	r19, r1
    13fc:	29 f0       	breq	.+10     	; 0x1408 <Kyp_getPressedButton+0xce>
    13fe:	23 c0       	rjmp	.+70     	; 0x1446 <Kyp_getPressedButton+0x10c>
		{
		case NOT_PRESSED:
			break;

		case PRE_PRESSED:
			button_state=PRESSED;
    1400:	82 e0       	ldi	r24, 0x02	; 2
    1402:	80 93 68 00 	sts	0x0068, r24
    1406:	1f c0       	rjmp	.+62     	; 0x1446 <Kyp_getPressedButton+0x10c>
			break;

		case PRESSED:
			if((buttonvalue==1)||(buttonvalue==0))
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	81 30       	cpi	r24, 0x01	; 1
    140c:	19 f0       	breq	.+6      	; 0x1414 <Kyp_getPressedButton+0xda>
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	88 23       	and	r24, r24
    1412:	a1 f4       	brne	.+40     	; 0x143c <Kyp_getPressedButton+0x102>
			{
				if(buttonvalue==1)
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	81 30       	cpi	r24, 0x01	; 1
    1418:	29 f4       	brne	.+10     	; 0x1424 <Kyp_getPressedButton+0xea>
				{
					*Button_Num=1;
    141a:	ec 81       	ldd	r30, Y+4	; 0x04
    141c:	fd 81       	ldd	r31, Y+5	; 0x05
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 83       	st	Z, r24
    1422:	0f c0       	rjmp	.+30     	; 0x1442 <Kyp_getPressedButton+0x108>
				}
				else if(buttonvalue==2)
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	82 30       	cpi	r24, 0x02	; 2
    1428:	29 f4       	brne	.+10     	; 0x1434 <Kyp_getPressedButton+0xfa>
				{
					*Button_Num=2;
    142a:	ec 81       	ldd	r30, Y+4	; 0x04
    142c:	fd 81       	ldd	r31, Y+5	; 0x05
    142e:	82 e0       	ldi	r24, 0x02	; 2
    1430:	80 83       	st	Z, r24
    1432:	07 c0       	rjmp	.+14     	; 0x1442 <Kyp_getPressedButton+0x108>
				}
				else
				{
					*Button_Num=0;
    1434:	ec 81       	ldd	r30, Y+4	; 0x04
    1436:	fd 81       	ldd	r31, Y+5	; 0x05
    1438:	10 82       	st	Z, r1
    143a:	03 c0       	rjmp	.+6      	; 0x1442 <Kyp_getPressedButton+0x108>
				}
			}
			else
			{
				*Button_Num=0;
    143c:	ec 81       	ldd	r30, Y+4	; 0x04
    143e:	fd 81       	ldd	r31, Y+5	; 0x05
    1440:	10 82       	st	Z, r1
			}
			button_state=NOT_PRESSED;
    1442:	10 92 68 00 	sts	0x0068, r1
			break;

		default:
			break;
		}
	return button_state;
    1446:	80 91 68 00 	lds	r24, 0x0068
}
    144a:	27 96       	adiw	r28, 0x07	; 7
    144c:	0f b6       	in	r0, 0x3f	; 63
    144e:	f8 94       	cli
    1450:	de bf       	out	0x3e, r29	; 62
    1452:	0f be       	out	0x3f, r0	; 63
    1454:	cd bf       	out	0x3d, r28	; 61
    1456:	cf 91       	pop	r28
    1458:	df 91       	pop	r29
    145a:	08 95       	ret

0000145c <LCD_Init>:

#include "util/delay.h"
#include "LCD.h"
/* ---------------------------------    INITIALIZE LCD  --------------------------------------------------   */
void LCD_Init(void)
{
    145c:	df 93       	push	r29
    145e:	cf 93       	push	r28
    1460:	cd b7       	in	r28, 0x3d	; 61
    1462:	de b7       	in	r29, 0x3e	; 62
    1464:	68 97       	sbiw	r28, 0x18	; 24
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61


	/*INITIALIZE LCD PINS DIRECTION*/
	DIO_SetPinDirection( LCD_E_PIN,OUTPUT);
    1470:	83 e0       	ldi	r24, 0x03	; 3
    1472:	61 e0       	ldi	r22, 0x01	; 1
    1474:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_RW_PIN,OUTPUT);
    1478:	82 e0       	ldi	r24, 0x02	; 2
    147a:	61 e0       	ldi	r22, 0x01	; 1
    147c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_RS_PIN,OUTPUT);
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	61 e0       	ldi	r22, 0x01	; 1
    1484:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>


	DIO_SetPinDirection( LCD_D4,OUTPUT);
    1488:	84 e0       	ldi	r24, 0x04	; 4
    148a:	61 e0       	ldi	r22, 0x01	; 1
    148c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_D5,OUTPUT);
    1490:	85 e0       	ldi	r24, 0x05	; 5
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_D6,OUTPUT);
    1498:	86 e0       	ldi	r24, 0x06	; 6
    149a:	61 e0       	ldi	r22, 0x01	; 1
    149c:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_SetPinDirection( LCD_D7,OUTPUT);
    14a0:	87 e0       	ldi	r24, 0x07	; 7
    14a2:	61 e0       	ldi	r22, 0x01	; 1
    14a4:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	a8 ec       	ldi	r26, 0xC8	; 200
    14ae:	b2 e4       	ldi	r27, 0x42	; 66
    14b0:	8d 8b       	std	Y+21, r24	; 0x15
    14b2:	9e 8b       	std	Y+22, r25	; 0x16
    14b4:	af 8b       	std	Y+23, r26	; 0x17
    14b6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    14b8:	6d 89       	ldd	r22, Y+21	; 0x15
    14ba:	7e 89       	ldd	r23, Y+22	; 0x16
    14bc:	8f 89       	ldd	r24, Y+23	; 0x17
    14be:	98 8d       	ldd	r25, Y+24	; 0x18
    14c0:	2b ea       	ldi	r18, 0xAB	; 171
    14c2:	3a ea       	ldi	r19, 0xAA	; 170
    14c4:	4a ea       	ldi	r20, 0xAA	; 170
    14c6:	50 e4       	ldi	r21, 0x40	; 64
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	89 8b       	std	Y+17, r24	; 0x11
    14d2:	9a 8b       	std	Y+18, r25	; 0x12
    14d4:	ab 8b       	std	Y+19, r26	; 0x13
    14d6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    14d8:	69 89       	ldd	r22, Y+17	; 0x11
    14da:	7a 89       	ldd	r23, Y+18	; 0x12
    14dc:	8b 89       	ldd	r24, Y+19	; 0x13
    14de:	9c 89       	ldd	r25, Y+20	; 0x14
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e8       	ldi	r20, 0x80	; 128
    14e6:	5f e3       	ldi	r21, 0x3F	; 63
    14e8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14ec:	88 23       	and	r24, r24
    14ee:	1c f4       	brge	.+6      	; 0x14f6 <LCD_Init+0x9a>
		__ticks = 1;
    14f0:	81 e0       	ldi	r24, 0x01	; 1
    14f2:	88 8b       	std	Y+16, r24	; 0x10
    14f4:	91 c0       	rjmp	.+290    	; 0x1618 <LCD_Init+0x1bc>
	else if (__tmp > 255)
    14f6:	69 89       	ldd	r22, Y+17	; 0x11
    14f8:	7a 89       	ldd	r23, Y+18	; 0x12
    14fa:	8b 89       	ldd	r24, Y+19	; 0x13
    14fc:	9c 89       	ldd	r25, Y+20	; 0x14
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4f e7       	ldi	r20, 0x7F	; 127
    1504:	53 e4       	ldi	r21, 0x43	; 67
    1506:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    150a:	18 16       	cp	r1, r24
    150c:	0c f0       	brlt	.+2      	; 0x1510 <LCD_Init+0xb4>
    150e:	7b c0       	rjmp	.+246    	; 0x1606 <LCD_Init+0x1aa>
	{
		_delay_ms(__us / 1000.0);
    1510:	6d 89       	ldd	r22, Y+21	; 0x15
    1512:	7e 89       	ldd	r23, Y+22	; 0x16
    1514:	8f 89       	ldd	r24, Y+23	; 0x17
    1516:	98 8d       	ldd	r25, Y+24	; 0x18
    1518:	20 e0       	ldi	r18, 0x00	; 0
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	4a e7       	ldi	r20, 0x7A	; 122
    151e:	54 e4       	ldi	r21, 0x44	; 68
    1520:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1524:	dc 01       	movw	r26, r24
    1526:	cb 01       	movw	r24, r22
    1528:	8c 87       	std	Y+12, r24	; 0x0c
    152a:	9d 87       	std	Y+13, r25	; 0x0d
    152c:	ae 87       	std	Y+14, r26	; 0x0e
    152e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1530:	6c 85       	ldd	r22, Y+12	; 0x0c
    1532:	7d 85       	ldd	r23, Y+13	; 0x0d
    1534:	8e 85       	ldd	r24, Y+14	; 0x0e
    1536:	9f 85       	ldd	r25, Y+15	; 0x0f
    1538:	20 e0       	ldi	r18, 0x00	; 0
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	4a e7       	ldi	r20, 0x7A	; 122
    153e:	55 e4       	ldi	r21, 0x45	; 69
    1540:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1544:	dc 01       	movw	r26, r24
    1546:	cb 01       	movw	r24, r22
    1548:	88 87       	std	Y+8, r24	; 0x08
    154a:	99 87       	std	Y+9, r25	; 0x09
    154c:	aa 87       	std	Y+10, r26	; 0x0a
    154e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1550:	68 85       	ldd	r22, Y+8	; 0x08
    1552:	79 85       	ldd	r23, Y+9	; 0x09
    1554:	8a 85       	ldd	r24, Y+10	; 0x0a
    1556:	9b 85       	ldd	r25, Y+11	; 0x0b
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e8       	ldi	r20, 0x80	; 128
    155e:	5f e3       	ldi	r21, 0x3F	; 63
    1560:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1564:	88 23       	and	r24, r24
    1566:	2c f4       	brge	.+10     	; 0x1572 <LCD_Init+0x116>
		__ticks = 1;
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	9f 83       	std	Y+7, r25	; 0x07
    156e:	8e 83       	std	Y+6, r24	; 0x06
    1570:	3f c0       	rjmp	.+126    	; 0x15f0 <LCD_Init+0x194>
	else if (__tmp > 65535)
    1572:	68 85       	ldd	r22, Y+8	; 0x08
    1574:	79 85       	ldd	r23, Y+9	; 0x09
    1576:	8a 85       	ldd	r24, Y+10	; 0x0a
    1578:	9b 85       	ldd	r25, Y+11	; 0x0b
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	4f e7       	ldi	r20, 0x7F	; 127
    1580:	57 e4       	ldi	r21, 0x47	; 71
    1582:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1586:	18 16       	cp	r1, r24
    1588:	4c f5       	brge	.+82     	; 0x15dc <LCD_Init+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    158a:	6c 85       	ldd	r22, Y+12	; 0x0c
    158c:	7d 85       	ldd	r23, Y+13	; 0x0d
    158e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1590:	9f 85       	ldd	r25, Y+15	; 0x0f
    1592:	20 e0       	ldi	r18, 0x00	; 0
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	40 e2       	ldi	r20, 0x20	; 32
    1598:	51 e4       	ldi	r21, 0x41	; 65
    159a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    159e:	dc 01       	movw	r26, r24
    15a0:	cb 01       	movw	r24, r22
    15a2:	bc 01       	movw	r22, r24
    15a4:	cd 01       	movw	r24, r26
    15a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15aa:	dc 01       	movw	r26, r24
    15ac:	cb 01       	movw	r24, r22
    15ae:	9f 83       	std	Y+7, r25	; 0x07
    15b0:	8e 83       	std	Y+6, r24	; 0x06
    15b2:	0f c0       	rjmp	.+30     	; 0x15d2 <LCD_Init+0x176>
    15b4:	80 e9       	ldi	r24, 0x90	; 144
    15b6:	91 e0       	ldi	r25, 0x01	; 1
    15b8:	9d 83       	std	Y+5, r25	; 0x05
    15ba:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	01 97       	sbiw	r24, 0x01	; 1
    15c2:	f1 f7       	brne	.-4      	; 0x15c0 <LCD_Init+0x164>
    15c4:	9d 83       	std	Y+5, r25	; 0x05
    15c6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15c8:	8e 81       	ldd	r24, Y+6	; 0x06
    15ca:	9f 81       	ldd	r25, Y+7	; 0x07
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9f 83       	std	Y+7, r25	; 0x07
    15d0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15d2:	8e 81       	ldd	r24, Y+6	; 0x06
    15d4:	9f 81       	ldd	r25, Y+7	; 0x07
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	69 f7       	brne	.-38     	; 0x15b4 <LCD_Init+0x158>
    15da:	24 c0       	rjmp	.+72     	; 0x1624 <LCD_Init+0x1c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15dc:	68 85       	ldd	r22, Y+8	; 0x08
    15de:	79 85       	ldd	r23, Y+9	; 0x09
    15e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    15e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    15e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e8:	dc 01       	movw	r26, r24
    15ea:	cb 01       	movw	r24, r22
    15ec:	9f 83       	std	Y+7, r25	; 0x07
    15ee:	8e 83       	std	Y+6, r24	; 0x06
    15f0:	8e 81       	ldd	r24, Y+6	; 0x06
    15f2:	9f 81       	ldd	r25, Y+7	; 0x07
    15f4:	9b 83       	std	Y+3, r25	; 0x03
    15f6:	8a 83       	std	Y+2, r24	; 0x02
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	9b 81       	ldd	r25, Y+3	; 0x03
    15fc:	01 97       	sbiw	r24, 0x01	; 1
    15fe:	f1 f7       	brne	.-4      	; 0x15fc <LCD_Init+0x1a0>
    1600:	9b 83       	std	Y+3, r25	; 0x03
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	0f c0       	rjmp	.+30     	; 0x1624 <LCD_Init+0x1c8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1606:	69 89       	ldd	r22, Y+17	; 0x11
    1608:	7a 89       	ldd	r23, Y+18	; 0x12
    160a:	8b 89       	ldd	r24, Y+19	; 0x13
    160c:	9c 89       	ldd	r25, Y+20	; 0x14
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	88 8b       	std	Y+16, r24	; 0x10
    1618:	88 89       	ldd	r24, Y+16	; 0x10
    161a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	8a 95       	dec	r24
    1620:	f1 f7       	brne	.-4      	; 0x161e <LCD_Init+0x1c2>
    1622:	89 83       	std	Y+1, r24	; 0x01

	_delay_us(100);

	/*SEND 4BIT LCD_Mode COMMANDS*/
	LCD_WriteCommand(0x33);
    1624:	83 e3       	ldi	r24, 0x33	; 51
    1626:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>
	LCD_WriteCommand(0x32);
    162a:	82 e3       	ldi	r24, 0x32	; 50
    162c:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>
	LCD_WriteCommand(0x28);
    1630:	88 e2       	ldi	r24, 0x28	; 40
    1632:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>
	LCD_WriteCommand(0x0c);
    1636:	8c e0       	ldi	r24, 0x0C	; 12
    1638:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
    163c:	81 e0       	ldi	r24, 0x01	; 1
    163e:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
    1642:	86 e0       	ldi	r24, 0x06	; 6
    1644:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>
	LCD_WriteCommand(0x02);
    1648:	82 e0       	ldi	r24, 0x02	; 2
    164a:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>

}
    164e:	68 96       	adiw	r28, 0x18	; 24
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	f8 94       	cli
    1654:	de bf       	out	0x3e, r29	; 62
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	cd bf       	out	0x3d, r28	; 61
    165a:	cf 91       	pop	r28
    165c:	df 91       	pop	r29
    165e:	08 95       	ret

00001660 <LCD_WriteCommand>:


/*  ---------------------------------    SENDING COMMANDS  ------------------------------------------------  */

void LCD_WriteCommand(uint8 cmd)
{
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	c9 54       	subi	r28, 0x49	; 73
    166e:	d0 40       	sbci	r29, 0x00	; 0
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	fe 01       	movw	r30, r28
    167c:	e7 5b       	subi	r30, 0xB7	; 183
    167e:	ff 4f       	sbci	r31, 0xFF	; 255
    1680:	80 83       	st	Z, r24

	DIO_WritePin(LCD_RW_PIN, LOW);
    1682:	82 e0       	ldi	r24, 0x02	; 2
    1684:	60 e0       	ldi	r22, 0x00	; 0
    1686:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(LCD_RS_PIN, LOW);
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(LCD_E_PIN, LOW);
    1692:	83 e0       	ldi	r24, 0x03	; 3
    1694:	60 e0       	ldi	r22, 0x00	; 0
    1696:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

	LCD_4BIT_PORT = (cmd & 0xf0) | (LCD_4BIT_PORT & 0x0f);
    169a:	ab e3       	ldi	r26, 0x3B	; 59
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	fe 01       	movw	r30, r28
    16a0:	e7 5b       	subi	r30, 0xB7	; 183
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	98 2f       	mov	r25, r24
    16a8:	90 7f       	andi	r25, 0xF0	; 240
    16aa:	eb e3       	ldi	r30, 0x3B	; 59
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	8f 70       	andi	r24, 0x0F	; 15
    16b2:	89 2b       	or	r24, r25
    16b4:	8c 93       	st	X, r24

	DIO_WritePin(LCD_E_PIN, HIGH);
    16b6:	83 e0       	ldi	r24, 0x03	; 3
    16b8:	61 e0       	ldi	r22, 0x01	; 1
    16ba:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    16be:	fe 01       	movw	r30, r28
    16c0:	eb 5b       	subi	r30, 0xBB	; 187
    16c2:	ff 4f       	sbci	r31, 0xFF	; 255
    16c4:	80 e0       	ldi	r24, 0x00	; 0
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	a8 ec       	ldi	r26, 0xC8	; 200
    16ca:	b2 e4       	ldi	r27, 0x42	; 66
    16cc:	80 83       	st	Z, r24
    16ce:	91 83       	std	Z+1, r25	; 0x01
    16d0:	a2 83       	std	Z+2, r26	; 0x02
    16d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    16d4:	8e 01       	movw	r16, r28
    16d6:	0f 5b       	subi	r16, 0xBF	; 191
    16d8:	1f 4f       	sbci	r17, 0xFF	; 255
    16da:	fe 01       	movw	r30, r28
    16dc:	eb 5b       	subi	r30, 0xBB	; 187
    16de:	ff 4f       	sbci	r31, 0xFF	; 255
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	82 81       	ldd	r24, Z+2	; 0x02
    16e6:	93 81       	ldd	r25, Z+3	; 0x03
    16e8:	2b ea       	ldi	r18, 0xAB	; 171
    16ea:	3a ea       	ldi	r19, 0xAA	; 170
    16ec:	4a ea       	ldi	r20, 0xAA	; 170
    16ee:	50 e4       	ldi	r21, 0x40	; 64
    16f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	f8 01       	movw	r30, r16
    16fa:	80 83       	st	Z, r24
    16fc:	91 83       	std	Z+1, r25	; 0x01
    16fe:	a2 83       	std	Z+2, r26	; 0x02
    1700:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1702:	fe 01       	movw	r30, r28
    1704:	ef 5b       	subi	r30, 0xBF	; 191
    1706:	ff 4f       	sbci	r31, 0xFF	; 255
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e8       	ldi	r20, 0x80	; 128
    1716:	5f e3       	ldi	r21, 0x3F	; 63
    1718:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    171c:	88 23       	and	r24, r24
    171e:	34 f4       	brge	.+12     	; 0x172c <LCD_WriteCommand+0xcc>
		__ticks = 1;
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	fe 01       	movw	r30, r28
    1724:	e0 5c       	subi	r30, 0xC0	; 192
    1726:	ff 4f       	sbci	r31, 0xFF	; 255
    1728:	80 83       	st	Z, r24
    172a:	9d c0       	rjmp	.+314    	; 0x1866 <LCD_WriteCommand+0x206>
	else if (__tmp > 255)
    172c:	fe 01       	movw	r30, r28
    172e:	ef 5b       	subi	r30, 0xBF	; 191
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	60 81       	ld	r22, Z
    1734:	71 81       	ldd	r23, Z+1	; 0x01
    1736:	82 81       	ldd	r24, Z+2	; 0x02
    1738:	93 81       	ldd	r25, Z+3	; 0x03
    173a:	20 e0       	ldi	r18, 0x00	; 0
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	4f e7       	ldi	r20, 0x7F	; 127
    1740:	53 e4       	ldi	r21, 0x43	; 67
    1742:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1746:	18 16       	cp	r1, r24
    1748:	0c f0       	brlt	.+2      	; 0x174c <LCD_WriteCommand+0xec>
    174a:	7e c0       	rjmp	.+252    	; 0x1848 <LCD_WriteCommand+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    174c:	fe 01       	movw	r30, r28
    174e:	eb 5b       	subi	r30, 0xBB	; 187
    1750:	ff 4f       	sbci	r31, 0xFF	; 255
    1752:	60 81       	ld	r22, Z
    1754:	71 81       	ldd	r23, Z+1	; 0x01
    1756:	82 81       	ldd	r24, Z+2	; 0x02
    1758:	93 81       	ldd	r25, Z+3	; 0x03
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	4a e7       	ldi	r20, 0x7A	; 122
    1760:	54 e4       	ldi	r21, 0x44	; 68
    1762:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	8c af       	std	Y+60, r24	; 0x3c
    176c:	9d af       	std	Y+61, r25	; 0x3d
    176e:	ae af       	std	Y+62, r26	; 0x3e
    1770:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1772:	6c ad       	ldd	r22, Y+60	; 0x3c
    1774:	7d ad       	ldd	r23, Y+61	; 0x3d
    1776:	8e ad       	ldd	r24, Y+62	; 0x3e
    1778:	9f ad       	ldd	r25, Y+63	; 0x3f
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	4a e7       	ldi	r20, 0x7A	; 122
    1780:	55 e4       	ldi	r21, 0x45	; 69
    1782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1786:	dc 01       	movw	r26, r24
    1788:	cb 01       	movw	r24, r22
    178a:	88 af       	std	Y+56, r24	; 0x38
    178c:	99 af       	std	Y+57, r25	; 0x39
    178e:	aa af       	std	Y+58, r26	; 0x3a
    1790:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1792:	68 ad       	ldd	r22, Y+56	; 0x38
    1794:	79 ad       	ldd	r23, Y+57	; 0x39
    1796:	8a ad       	ldd	r24, Y+58	; 0x3a
    1798:	9b ad       	ldd	r25, Y+59	; 0x3b
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	30 e0       	ldi	r19, 0x00	; 0
    179e:	40 e8       	ldi	r20, 0x80	; 128
    17a0:	5f e3       	ldi	r21, 0x3F	; 63
    17a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17a6:	88 23       	and	r24, r24
    17a8:	2c f4       	brge	.+10     	; 0x17b4 <LCD_WriteCommand+0x154>
		__ticks = 1;
    17aa:	81 e0       	ldi	r24, 0x01	; 1
    17ac:	90 e0       	ldi	r25, 0x00	; 0
    17ae:	9f ab       	std	Y+55, r25	; 0x37
    17b0:	8e ab       	std	Y+54, r24	; 0x36
    17b2:	3f c0       	rjmp	.+126    	; 0x1832 <LCD_WriteCommand+0x1d2>
	else if (__tmp > 65535)
    17b4:	68 ad       	ldd	r22, Y+56	; 0x38
    17b6:	79 ad       	ldd	r23, Y+57	; 0x39
    17b8:	8a ad       	ldd	r24, Y+58	; 0x3a
    17ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    17bc:	20 e0       	ldi	r18, 0x00	; 0
    17be:	3f ef       	ldi	r19, 0xFF	; 255
    17c0:	4f e7       	ldi	r20, 0x7F	; 127
    17c2:	57 e4       	ldi	r21, 0x47	; 71
    17c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17c8:	18 16       	cp	r1, r24
    17ca:	4c f5       	brge	.+82     	; 0x181e <LCD_WriteCommand+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17cc:	6c ad       	ldd	r22, Y+60	; 0x3c
    17ce:	7d ad       	ldd	r23, Y+61	; 0x3d
    17d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    17d2:	9f ad       	ldd	r25, Y+63	; 0x3f
    17d4:	20 e0       	ldi	r18, 0x00	; 0
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	40 e2       	ldi	r20, 0x20	; 32
    17da:	51 e4       	ldi	r21, 0x41	; 65
    17dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17e0:	dc 01       	movw	r26, r24
    17e2:	cb 01       	movw	r24, r22
    17e4:	bc 01       	movw	r22, r24
    17e6:	cd 01       	movw	r24, r26
    17e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ec:	dc 01       	movw	r26, r24
    17ee:	cb 01       	movw	r24, r22
    17f0:	9f ab       	std	Y+55, r25	; 0x37
    17f2:	8e ab       	std	Y+54, r24	; 0x36
    17f4:	0f c0       	rjmp	.+30     	; 0x1814 <LCD_WriteCommand+0x1b4>
    17f6:	80 e9       	ldi	r24, 0x90	; 144
    17f8:	91 e0       	ldi	r25, 0x01	; 1
    17fa:	9d ab       	std	Y+53, r25	; 0x35
    17fc:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17fe:	8c a9       	ldd	r24, Y+52	; 0x34
    1800:	9d a9       	ldd	r25, Y+53	; 0x35
    1802:	01 97       	sbiw	r24, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <LCD_WriteCommand+0x1a2>
    1806:	9d ab       	std	Y+53, r25	; 0x35
    1808:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	8e a9       	ldd	r24, Y+54	; 0x36
    180c:	9f a9       	ldd	r25, Y+55	; 0x37
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	9f ab       	std	Y+55, r25	; 0x37
    1812:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1814:	8e a9       	ldd	r24, Y+54	; 0x36
    1816:	9f a9       	ldd	r25, Y+55	; 0x37
    1818:	00 97       	sbiw	r24, 0x00	; 0
    181a:	69 f7       	brne	.-38     	; 0x17f6 <LCD_WriteCommand+0x196>
    181c:	2d c0       	rjmp	.+90     	; 0x1878 <LCD_WriteCommand+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    181e:	68 ad       	ldd	r22, Y+56	; 0x38
    1820:	79 ad       	ldd	r23, Y+57	; 0x39
    1822:	8a ad       	ldd	r24, Y+58	; 0x3a
    1824:	9b ad       	ldd	r25, Y+59	; 0x3b
    1826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    182a:	dc 01       	movw	r26, r24
    182c:	cb 01       	movw	r24, r22
    182e:	9f ab       	std	Y+55, r25	; 0x37
    1830:	8e ab       	std	Y+54, r24	; 0x36
    1832:	8e a9       	ldd	r24, Y+54	; 0x36
    1834:	9f a9       	ldd	r25, Y+55	; 0x37
    1836:	9b ab       	std	Y+51, r25	; 0x33
    1838:	8a ab       	std	Y+50, r24	; 0x32
    183a:	8a a9       	ldd	r24, Y+50	; 0x32
    183c:	9b a9       	ldd	r25, Y+51	; 0x33
    183e:	01 97       	sbiw	r24, 0x01	; 1
    1840:	f1 f7       	brne	.-4      	; 0x183e <LCD_WriteCommand+0x1de>
    1842:	9b ab       	std	Y+51, r25	; 0x33
    1844:	8a ab       	std	Y+50, r24	; 0x32
    1846:	18 c0       	rjmp	.+48     	; 0x1878 <LCD_WriteCommand+0x218>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1848:	fe 01       	movw	r30, r28
    184a:	ef 5b       	subi	r30, 0xBF	; 191
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	60 81       	ld	r22, Z
    1850:	71 81       	ldd	r23, Z+1	; 0x01
    1852:	82 81       	ldd	r24, Z+2	; 0x02
    1854:	93 81       	ldd	r25, Z+3	; 0x03
    1856:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185a:	dc 01       	movw	r26, r24
    185c:	cb 01       	movw	r24, r22
    185e:	fe 01       	movw	r30, r28
    1860:	e0 5c       	subi	r30, 0xC0	; 192
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 83       	st	Z, r24
    1866:	fe 01       	movw	r30, r28
    1868:	e0 5c       	subi	r30, 0xC0	; 192
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	80 81       	ld	r24, Z
    186e:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1870:	89 a9       	ldd	r24, Y+49	; 0x31
    1872:	8a 95       	dec	r24
    1874:	f1 f7       	brne	.-4      	; 0x1872 <LCD_WriteCommand+0x212>
    1876:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	DIO_WritePin(LCD_E_PIN, LOW);
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	60 e0       	ldi	r22, 0x00	; 0
    187c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

	LCD_4BIT_PORT = (cmd << 4) | (LCD_4BIT_PORT & 0x0f);
    1880:	ab e3       	ldi	r26, 0x3B	; 59
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	fe 01       	movw	r30, r28
    1886:	e7 5b       	subi	r30, 0xB7	; 183
    1888:	ff 4f       	sbci	r31, 0xFF	; 255
    188a:	80 81       	ld	r24, Z
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	82 95       	swap	r24
    1892:	92 95       	swap	r25
    1894:	90 7f       	andi	r25, 0xF0	; 240
    1896:	98 27       	eor	r25, r24
    1898:	80 7f       	andi	r24, 0xF0	; 240
    189a:	98 27       	eor	r25, r24
    189c:	98 2f       	mov	r25, r24
    189e:	eb e3       	ldi	r30, 0x3B	; 59
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8f 70       	andi	r24, 0x0F	; 15
    18a6:	89 2b       	or	r24, r25
    18a8:	8c 93       	st	X, r24

	DIO_WritePin(LCD_E_PIN, HIGH);
    18aa:	83 e0       	ldi	r24, 0x03	; 3
    18ac:	61 e0       	ldi	r22, 0x01	; 1
    18ae:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	a8 ec       	ldi	r26, 0xC8	; 200
    18b8:	b2 e4       	ldi	r27, 0x42	; 66
    18ba:	8d a7       	std	Y+45, r24	; 0x2d
    18bc:	9e a7       	std	Y+46, r25	; 0x2e
    18be:	af a7       	std	Y+47, r26	; 0x2f
    18c0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    18c2:	6d a5       	ldd	r22, Y+45	; 0x2d
    18c4:	7e a5       	ldd	r23, Y+46	; 0x2e
    18c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    18c8:	98 a9       	ldd	r25, Y+48	; 0x30
    18ca:	2b ea       	ldi	r18, 0xAB	; 171
    18cc:	3a ea       	ldi	r19, 0xAA	; 170
    18ce:	4a ea       	ldi	r20, 0xAA	; 170
    18d0:	50 e4       	ldi	r21, 0x40	; 64
    18d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	89 a7       	std	Y+41, r24	; 0x29
    18dc:	9a a7       	std	Y+42, r25	; 0x2a
    18de:	ab a7       	std	Y+43, r26	; 0x2b
    18e0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    18e2:	69 a5       	ldd	r22, Y+41	; 0x29
    18e4:	7a a5       	ldd	r23, Y+42	; 0x2a
    18e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    18e8:	9c a5       	ldd	r25, Y+44	; 0x2c
    18ea:	20 e0       	ldi	r18, 0x00	; 0
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	40 e8       	ldi	r20, 0x80	; 128
    18f0:	5f e3       	ldi	r21, 0x3F	; 63
    18f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18f6:	88 23       	and	r24, r24
    18f8:	1c f4       	brge	.+6      	; 0x1900 <LCD_WriteCommand+0x2a0>
		__ticks = 1;
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	88 a7       	std	Y+40, r24	; 0x28
    18fe:	91 c0       	rjmp	.+290    	; 0x1a22 <LCD_WriteCommand+0x3c2>
	else if (__tmp > 255)
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	20 e0       	ldi	r18, 0x00	; 0
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	4f e7       	ldi	r20, 0x7F	; 127
    190e:	53 e4       	ldi	r21, 0x43	; 67
    1910:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1914:	18 16       	cp	r1, r24
    1916:	0c f0       	brlt	.+2      	; 0x191a <LCD_WriteCommand+0x2ba>
    1918:	7b c0       	rjmp	.+246    	; 0x1a10 <LCD_WriteCommand+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    191a:	6d a5       	ldd	r22, Y+45	; 0x2d
    191c:	7e a5       	ldd	r23, Y+46	; 0x2e
    191e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1920:	98 a9       	ldd	r25, Y+48	; 0x30
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	4a e7       	ldi	r20, 0x7A	; 122
    1928:	54 e4       	ldi	r21, 0x44	; 68
    192a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	8c a3       	std	Y+36, r24	; 0x24
    1934:	9d a3       	std	Y+37, r25	; 0x25
    1936:	ae a3       	std	Y+38, r26	; 0x26
    1938:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    193a:	6c a1       	ldd	r22, Y+36	; 0x24
    193c:	7d a1       	ldd	r23, Y+37	; 0x25
    193e:	8e a1       	ldd	r24, Y+38	; 0x26
    1940:	9f a1       	ldd	r25, Y+39	; 0x27
    1942:	20 e0       	ldi	r18, 0x00	; 0
    1944:	30 e0       	ldi	r19, 0x00	; 0
    1946:	4a e7       	ldi	r20, 0x7A	; 122
    1948:	55 e4       	ldi	r21, 0x45	; 69
    194a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    194e:	dc 01       	movw	r26, r24
    1950:	cb 01       	movw	r24, r22
    1952:	88 a3       	std	Y+32, r24	; 0x20
    1954:	99 a3       	std	Y+33, r25	; 0x21
    1956:	aa a3       	std	Y+34, r26	; 0x22
    1958:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    195a:	68 a1       	ldd	r22, Y+32	; 0x20
    195c:	79 a1       	ldd	r23, Y+33	; 0x21
    195e:	8a a1       	ldd	r24, Y+34	; 0x22
    1960:	9b a1       	ldd	r25, Y+35	; 0x23
    1962:	20 e0       	ldi	r18, 0x00	; 0
    1964:	30 e0       	ldi	r19, 0x00	; 0
    1966:	40 e8       	ldi	r20, 0x80	; 128
    1968:	5f e3       	ldi	r21, 0x3F	; 63
    196a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    196e:	88 23       	and	r24, r24
    1970:	2c f4       	brge	.+10     	; 0x197c <LCD_WriteCommand+0x31c>
		__ticks = 1;
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	9f 8f       	std	Y+31, r25	; 0x1f
    1978:	8e 8f       	std	Y+30, r24	; 0x1e
    197a:	3f c0       	rjmp	.+126    	; 0x19fa <LCD_WriteCommand+0x39a>
	else if (__tmp > 65535)
    197c:	68 a1       	ldd	r22, Y+32	; 0x20
    197e:	79 a1       	ldd	r23, Y+33	; 0x21
    1980:	8a a1       	ldd	r24, Y+34	; 0x22
    1982:	9b a1       	ldd	r25, Y+35	; 0x23
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	3f ef       	ldi	r19, 0xFF	; 255
    1988:	4f e7       	ldi	r20, 0x7F	; 127
    198a:	57 e4       	ldi	r21, 0x47	; 71
    198c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1990:	18 16       	cp	r1, r24
    1992:	4c f5       	brge	.+82     	; 0x19e6 <LCD_WriteCommand+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1994:	6c a1       	ldd	r22, Y+36	; 0x24
    1996:	7d a1       	ldd	r23, Y+37	; 0x25
    1998:	8e a1       	ldd	r24, Y+38	; 0x26
    199a:	9f a1       	ldd	r25, Y+39	; 0x27
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 e2       	ldi	r20, 0x20	; 32
    19a2:	51 e4       	ldi	r21, 0x41	; 65
    19a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a8:	dc 01       	movw	r26, r24
    19aa:	cb 01       	movw	r24, r22
    19ac:	bc 01       	movw	r22, r24
    19ae:	cd 01       	movw	r24, r26
    19b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	9f 8f       	std	Y+31, r25	; 0x1f
    19ba:	8e 8f       	std	Y+30, r24	; 0x1e
    19bc:	0f c0       	rjmp	.+30     	; 0x19dc <LCD_WriteCommand+0x37c>
    19be:	80 e9       	ldi	r24, 0x90	; 144
    19c0:	91 e0       	ldi	r25, 0x01	; 1
    19c2:	9d 8f       	std	Y+29, r25	; 0x1d
    19c4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    19c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	f1 f7       	brne	.-4      	; 0x19ca <LCD_WriteCommand+0x36a>
    19ce:	9d 8f       	std	Y+29, r25	; 0x1d
    19d0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19d2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19d4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19d6:	01 97       	sbiw	r24, 0x01	; 1
    19d8:	9f 8f       	std	Y+31, r25	; 0x1f
    19da:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19dc:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19de:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19e0:	00 97       	sbiw	r24, 0x00	; 0
    19e2:	69 f7       	brne	.-38     	; 0x19be <LCD_WriteCommand+0x35e>
    19e4:	24 c0       	rjmp	.+72     	; 0x1a2e <LCD_WriteCommand+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e6:	68 a1       	ldd	r22, Y+32	; 0x20
    19e8:	79 a1       	ldd	r23, Y+33	; 0x21
    19ea:	8a a1       	ldd	r24, Y+34	; 0x22
    19ec:	9b a1       	ldd	r25, Y+35	; 0x23
    19ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	9f 8f       	std	Y+31, r25	; 0x1f
    19f8:	8e 8f       	std	Y+30, r24	; 0x1e
    19fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    19fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    19fe:	9b 8f       	std	Y+27, r25	; 0x1b
    1a00:	8a 8f       	std	Y+26, r24	; 0x1a
    1a02:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a04:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1a06:	01 97       	sbiw	r24, 0x01	; 1
    1a08:	f1 f7       	brne	.-4      	; 0x1a06 <LCD_WriteCommand+0x3a6>
    1a0a:	9b 8f       	std	Y+27, r25	; 0x1b
    1a0c:	8a 8f       	std	Y+26, r24	; 0x1a
    1a0e:	0f c0       	rjmp	.+30     	; 0x1a2e <LCD_WriteCommand+0x3ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1a10:	69 a5       	ldd	r22, Y+41	; 0x29
    1a12:	7a a5       	ldd	r23, Y+42	; 0x2a
    1a14:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a16:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1c:	dc 01       	movw	r26, r24
    1a1e:	cb 01       	movw	r24, r22
    1a20:	88 a7       	std	Y+40, r24	; 0x28
    1a22:	88 a5       	ldd	r24, Y+40	; 0x28
    1a24:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1a26:	89 8d       	ldd	r24, Y+25	; 0x19
    1a28:	8a 95       	dec	r24
    1a2a:	f1 f7       	brne	.-4      	; 0x1a28 <LCD_WriteCommand+0x3c8>
    1a2c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	DIO_WritePin(LCD_E_PIN, LOW);
    1a2e:	83 e0       	ldi	r24, 0x03	; 3
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    1a36:	80 e0       	ldi	r24, 0x00	; 0
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	aa ef       	ldi	r26, 0xFA	; 250
    1a3c:	b3 e4       	ldi	r27, 0x43	; 67
    1a3e:	8d 8b       	std	Y+21, r24	; 0x15
    1a40:	9e 8b       	std	Y+22, r25	; 0x16
    1a42:	af 8b       	std	Y+23, r26	; 0x17
    1a44:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a46:	6d 89       	ldd	r22, Y+21	; 0x15
    1a48:	7e 89       	ldd	r23, Y+22	; 0x16
    1a4a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a4c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a4e:	2b ea       	ldi	r18, 0xAB	; 171
    1a50:	3a ea       	ldi	r19, 0xAA	; 170
    1a52:	4a ea       	ldi	r20, 0xAA	; 170
    1a54:	50 e4       	ldi	r21, 0x40	; 64
    1a56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	cb 01       	movw	r24, r22
    1a5e:	89 8b       	std	Y+17, r24	; 0x11
    1a60:	9a 8b       	std	Y+18, r25	; 0x12
    1a62:	ab 8b       	std	Y+19, r26	; 0x13
    1a64:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1a66:	69 89       	ldd	r22, Y+17	; 0x11
    1a68:	7a 89       	ldd	r23, Y+18	; 0x12
    1a6a:	8b 89       	ldd	r24, Y+19	; 0x13
    1a6c:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	40 e8       	ldi	r20, 0x80	; 128
    1a74:	5f e3       	ldi	r21, 0x3F	; 63
    1a76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	1c f4       	brge	.+6      	; 0x1a84 <LCD_WriteCommand+0x424>
		__ticks = 1;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	88 8b       	std	Y+16, r24	; 0x10
    1a82:	91 c0       	rjmp	.+290    	; 0x1ba6 <LCD_WriteCommand+0x546>
	else if (__tmp > 255)
    1a84:	69 89       	ldd	r22, Y+17	; 0x11
    1a86:	7a 89       	ldd	r23, Y+18	; 0x12
    1a88:	8b 89       	ldd	r24, Y+19	; 0x13
    1a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4f e7       	ldi	r20, 0x7F	; 127
    1a92:	53 e4       	ldi	r21, 0x43	; 67
    1a94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1a98:	18 16       	cp	r1, r24
    1a9a:	0c f0       	brlt	.+2      	; 0x1a9e <LCD_WriteCommand+0x43e>
    1a9c:	7b c0       	rjmp	.+246    	; 0x1b94 <LCD_WriteCommand+0x534>
	{
		_delay_ms(__us / 1000.0);
    1a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	4a e7       	ldi	r20, 0x7A	; 122
    1aac:	54 e4       	ldi	r21, 0x44	; 68
    1aae:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	8c 87       	std	Y+12, r24	; 0x0c
    1ab8:	9d 87       	std	Y+13, r25	; 0x0d
    1aba:	ae 87       	std	Y+14, r26	; 0x0e
    1abc:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1abe:	6c 85       	ldd	r22, Y+12	; 0x0c
    1ac0:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ac2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ac4:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	4a e7       	ldi	r20, 0x7A	; 122
    1acc:	55 e4       	ldi	r21, 0x45	; 69
    1ace:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	88 87       	std	Y+8, r24	; 0x08
    1ad8:	99 87       	std	Y+9, r25	; 0x09
    1ada:	aa 87       	std	Y+10, r26	; 0x0a
    1adc:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1ade:	68 85       	ldd	r22, Y+8	; 0x08
    1ae0:	79 85       	ldd	r23, Y+9	; 0x09
    1ae2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ae4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e8       	ldi	r20, 0x80	; 128
    1aec:	5f e3       	ldi	r21, 0x3F	; 63
    1aee:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af2:	88 23       	and	r24, r24
    1af4:	2c f4       	brge	.+10     	; 0x1b00 <LCD_WriteCommand+0x4a0>
		__ticks = 1;
    1af6:	81 e0       	ldi	r24, 0x01	; 1
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	9f 83       	std	Y+7, r25	; 0x07
    1afc:	8e 83       	std	Y+6, r24	; 0x06
    1afe:	3f c0       	rjmp	.+126    	; 0x1b7e <LCD_WriteCommand+0x51e>
	else if (__tmp > 65535)
    1b00:	68 85       	ldd	r22, Y+8	; 0x08
    1b02:	79 85       	ldd	r23, Y+9	; 0x09
    1b04:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b06:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	3f ef       	ldi	r19, 0xFF	; 255
    1b0c:	4f e7       	ldi	r20, 0x7F	; 127
    1b0e:	57 e4       	ldi	r21, 0x47	; 71
    1b10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b14:	18 16       	cp	r1, r24
    1b16:	4c f5       	brge	.+82     	; 0x1b6a <LCD_WriteCommand+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b18:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b1a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b1e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	40 e2       	ldi	r20, 0x20	; 32
    1b26:	51 e4       	ldi	r21, 0x41	; 65
    1b28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	bc 01       	movw	r22, r24
    1b32:	cd 01       	movw	r24, r26
    1b34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b38:	dc 01       	movw	r26, r24
    1b3a:	cb 01       	movw	r24, r22
    1b3c:	9f 83       	std	Y+7, r25	; 0x07
    1b3e:	8e 83       	std	Y+6, r24	; 0x06
    1b40:	0f c0       	rjmp	.+30     	; 0x1b60 <LCD_WriteCommand+0x500>
    1b42:	80 e9       	ldi	r24, 0x90	; 144
    1b44:	91 e0       	ldi	r25, 0x01	; 1
    1b46:	9d 83       	std	Y+5, r25	; 0x05
    1b48:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b4a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4c:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_WriteCommand+0x4ee>
    1b52:	9d 83       	std	Y+5, r25	; 0x05
    1b54:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b56:	8e 81       	ldd	r24, Y+6	; 0x06
    1b58:	9f 81       	ldd	r25, Y+7	; 0x07
    1b5a:	01 97       	sbiw	r24, 0x01	; 1
    1b5c:	9f 83       	std	Y+7, r25	; 0x07
    1b5e:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b60:	8e 81       	ldd	r24, Y+6	; 0x06
    1b62:	9f 81       	ldd	r25, Y+7	; 0x07
    1b64:	00 97       	sbiw	r24, 0x00	; 0
    1b66:	69 f7       	brne	.-38     	; 0x1b42 <LCD_WriteCommand+0x4e2>
    1b68:	24 c0       	rjmp	.+72     	; 0x1bb2 <LCD_WriteCommand+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b6a:	68 85       	ldd	r22, Y+8	; 0x08
    1b6c:	79 85       	ldd	r23, Y+9	; 0x09
    1b6e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b70:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b76:	dc 01       	movw	r26, r24
    1b78:	cb 01       	movw	r24, r22
    1b7a:	9f 83       	std	Y+7, r25	; 0x07
    1b7c:	8e 83       	std	Y+6, r24	; 0x06
    1b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b80:	9f 81       	ldd	r25, Y+7	; 0x07
    1b82:	9b 83       	std	Y+3, r25	; 0x03
    1b84:	8a 83       	std	Y+2, r24	; 0x02
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	9b 81       	ldd	r25, Y+3	; 0x03
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	f1 f7       	brne	.-4      	; 0x1b8a <LCD_WriteCommand+0x52a>
    1b8e:	9b 83       	std	Y+3, r25	; 0x03
    1b90:	8a 83       	std	Y+2, r24	; 0x02
    1b92:	0f c0       	rjmp	.+30     	; 0x1bb2 <LCD_WriteCommand+0x552>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1b94:	69 89       	ldd	r22, Y+17	; 0x11
    1b96:	7a 89       	ldd	r23, Y+18	; 0x12
    1b98:	8b 89       	ldd	r24, Y+19	; 0x13
    1b9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	88 8b       	std	Y+16, r24	; 0x10
    1ba6:	88 89       	ldd	r24, Y+16	; 0x10
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	8a 95       	dec	r24
    1bae:	f1 f7       	brne	.-4      	; 0x1bac <LCD_WriteCommand+0x54c>
    1bb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);

}
    1bb2:	c7 5b       	subi	r28, 0xB7	; 183
    1bb4:	df 4f       	sbci	r29, 0xFF	; 255
    1bb6:	0f b6       	in	r0, 0x3f	; 63
    1bb8:	f8 94       	cli
    1bba:	de bf       	out	0x3e, r29	; 62
    1bbc:	0f be       	out	0x3f, r0	; 63
    1bbe:	cd bf       	out	0x3d, r28	; 61
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	1f 91       	pop	r17
    1bc6:	0f 91       	pop	r16
    1bc8:	08 95       	ret

00001bca <LCD_WriteCharacter>:

/*  ---------------------------------  SENDING DATA   --------------------------------------------------  */


void LCD_WriteCharacter(uint8 chr)
{
    1bca:	0f 93       	push	r16
    1bcc:	1f 93       	push	r17
    1bce:	df 93       	push	r29
    1bd0:	cf 93       	push	r28
    1bd2:	cd b7       	in	r28, 0x3d	; 61
    1bd4:	de b7       	in	r29, 0x3e	; 62
    1bd6:	c9 54       	subi	r28, 0x49	; 73
    1bd8:	d0 40       	sbci	r29, 0x00	; 0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	f8 94       	cli
    1bde:	de bf       	out	0x3e, r29	; 62
    1be0:	0f be       	out	0x3f, r0	; 63
    1be2:	cd bf       	out	0x3d, r28	; 61
    1be4:	fe 01       	movw	r30, r28
    1be6:	e7 5b       	subi	r30, 0xB7	; 183
    1be8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bea:	80 83       	st	Z, r24

	DIO_WritePin(LCD_RW_PIN, LOW);
    1bec:	82 e0       	ldi	r24, 0x02	; 2
    1bee:	60 e0       	ldi	r22, 0x00	; 0
    1bf0:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(LCD_RS_PIN, HIGH);
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	61 e0       	ldi	r22, 0x01	; 1
    1bf8:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
	DIO_WritePin(LCD_E_PIN, LOW);
    1bfc:	83 e0       	ldi	r24, 0x03	; 3
    1bfe:	60 e0       	ldi	r22, 0x00	; 0
    1c00:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

	LCD_4BIT_PORT = (chr & 0xf0) | (LCD_4BIT_PORT & 0x0f);
    1c04:	ab e3       	ldi	r26, 0x3B	; 59
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	fe 01       	movw	r30, r28
    1c0a:	e7 5b       	subi	r30, 0xB7	; 183
    1c0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c0e:	80 81       	ld	r24, Z
    1c10:	98 2f       	mov	r25, r24
    1c12:	90 7f       	andi	r25, 0xF0	; 240
    1c14:	eb e3       	ldi	r30, 0x3B	; 59
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	8f 70       	andi	r24, 0x0F	; 15
    1c1c:	89 2b       	or	r24, r25
    1c1e:	8c 93       	st	X, r24

	DIO_WritePin(LCD_E_PIN, HIGH);
    1c20:	83 e0       	ldi	r24, 0x03	; 3
    1c22:	61 e0       	ldi	r22, 0x01	; 1
    1c24:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    1c28:	fe 01       	movw	r30, r28
    1c2a:	eb 5b       	subi	r30, 0xBB	; 187
    1c2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	90 e0       	ldi	r25, 0x00	; 0
    1c32:	a8 ec       	ldi	r26, 0xC8	; 200
    1c34:	b2 e4       	ldi	r27, 0x42	; 66
    1c36:	80 83       	st	Z, r24
    1c38:	91 83       	std	Z+1, r25	; 0x01
    1c3a:	a2 83       	std	Z+2, r26	; 0x02
    1c3c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1c3e:	8e 01       	movw	r16, r28
    1c40:	0f 5b       	subi	r16, 0xBF	; 191
    1c42:	1f 4f       	sbci	r17, 0xFF	; 255
    1c44:	fe 01       	movw	r30, r28
    1c46:	eb 5b       	subi	r30, 0xBB	; 187
    1c48:	ff 4f       	sbci	r31, 0xFF	; 255
    1c4a:	60 81       	ld	r22, Z
    1c4c:	71 81       	ldd	r23, Z+1	; 0x01
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	93 81       	ldd	r25, Z+3	; 0x03
    1c52:	2b ea       	ldi	r18, 0xAB	; 171
    1c54:	3a ea       	ldi	r19, 0xAA	; 170
    1c56:	4a ea       	ldi	r20, 0xAA	; 170
    1c58:	50 e4       	ldi	r21, 0x40	; 64
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	f8 01       	movw	r30, r16
    1c64:	80 83       	st	Z, r24
    1c66:	91 83       	std	Z+1, r25	; 0x01
    1c68:	a2 83       	std	Z+2, r26	; 0x02
    1c6a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	ef 5b       	subi	r30, 0xBF	; 191
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	60 81       	ld	r22, Z
    1c74:	71 81       	ldd	r23, Z+1	; 0x01
    1c76:	82 81       	ldd	r24, Z+2	; 0x02
    1c78:	93 81       	ldd	r25, Z+3	; 0x03
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	40 e8       	ldi	r20, 0x80	; 128
    1c80:	5f e3       	ldi	r21, 0x3F	; 63
    1c82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c86:	88 23       	and	r24, r24
    1c88:	34 f4       	brge	.+12     	; 0x1c96 <LCD_WriteCharacter+0xcc>
		__ticks = 1;
    1c8a:	81 e0       	ldi	r24, 0x01	; 1
    1c8c:	fe 01       	movw	r30, r28
    1c8e:	e0 5c       	subi	r30, 0xC0	; 192
    1c90:	ff 4f       	sbci	r31, 0xFF	; 255
    1c92:	80 83       	st	Z, r24
    1c94:	9d c0       	rjmp	.+314    	; 0x1dd0 <LCD_WriteCharacter+0x206>
	else if (__tmp > 255)
    1c96:	fe 01       	movw	r30, r28
    1c98:	ef 5b       	subi	r30, 0xBF	; 191
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	60 81       	ld	r22, Z
    1c9e:	71 81       	ldd	r23, Z+1	; 0x01
    1ca0:	82 81       	ldd	r24, Z+2	; 0x02
    1ca2:	93 81       	ldd	r25, Z+3	; 0x03
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4f e7       	ldi	r20, 0x7F	; 127
    1caa:	53 e4       	ldi	r21, 0x43	; 67
    1cac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb0:	18 16       	cp	r1, r24
    1cb2:	0c f0       	brlt	.+2      	; 0x1cb6 <LCD_WriteCharacter+0xec>
    1cb4:	7e c0       	rjmp	.+252    	; 0x1db2 <LCD_WriteCharacter+0x1e8>
	{
		_delay_ms(__us / 1000.0);
    1cb6:	fe 01       	movw	r30, r28
    1cb8:	eb 5b       	subi	r30, 0xBB	; 187
    1cba:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbc:	60 81       	ld	r22, Z
    1cbe:	71 81       	ldd	r23, Z+1	; 0x01
    1cc0:	82 81       	ldd	r24, Z+2	; 0x02
    1cc2:	93 81       	ldd	r25, Z+3	; 0x03
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	4a e7       	ldi	r20, 0x7A	; 122
    1cca:	54 e4       	ldi	r21, 0x44	; 68
    1ccc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1cd0:	dc 01       	movw	r26, r24
    1cd2:	cb 01       	movw	r24, r22
    1cd4:	8c af       	std	Y+60, r24	; 0x3c
    1cd6:	9d af       	std	Y+61, r25	; 0x3d
    1cd8:	ae af       	std	Y+62, r26	; 0x3e
    1cda:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cdc:	6c ad       	ldd	r22, Y+60	; 0x3c
    1cde:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ce0:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ce2:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	4a e7       	ldi	r20, 0x7A	; 122
    1cea:	55 e4       	ldi	r21, 0x45	; 69
    1cec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cf0:	dc 01       	movw	r26, r24
    1cf2:	cb 01       	movw	r24, r22
    1cf4:	88 af       	std	Y+56, r24	; 0x38
    1cf6:	99 af       	std	Y+57, r25	; 0x39
    1cf8:	aa af       	std	Y+58, r26	; 0x3a
    1cfa:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1cfc:	68 ad       	ldd	r22, Y+56	; 0x38
    1cfe:	79 ad       	ldd	r23, Y+57	; 0x39
    1d00:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d02:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	40 e8       	ldi	r20, 0x80	; 128
    1d0a:	5f e3       	ldi	r21, 0x3F	; 63
    1d0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d10:	88 23       	and	r24, r24
    1d12:	2c f4       	brge	.+10     	; 0x1d1e <LCD_WriteCharacter+0x154>
		__ticks = 1;
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	9f ab       	std	Y+55, r25	; 0x37
    1d1a:	8e ab       	std	Y+54, r24	; 0x36
    1d1c:	3f c0       	rjmp	.+126    	; 0x1d9c <LCD_WriteCharacter+0x1d2>
	else if (__tmp > 65535)
    1d1e:	68 ad       	ldd	r22, Y+56	; 0x38
    1d20:	79 ad       	ldd	r23, Y+57	; 0x39
    1d22:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d24:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	3f ef       	ldi	r19, 0xFF	; 255
    1d2a:	4f e7       	ldi	r20, 0x7F	; 127
    1d2c:	57 e4       	ldi	r21, 0x47	; 71
    1d2e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1d32:	18 16       	cp	r1, r24
    1d34:	4c f5       	brge	.+82     	; 0x1d88 <LCD_WriteCharacter+0x1be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d36:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d38:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	40 e2       	ldi	r20, 0x20	; 32
    1d44:	51 e4       	ldi	r21, 0x41	; 65
    1d46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	bc 01       	movw	r22, r24
    1d50:	cd 01       	movw	r24, r26
    1d52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	9f ab       	std	Y+55, r25	; 0x37
    1d5c:	8e ab       	std	Y+54, r24	; 0x36
    1d5e:	0f c0       	rjmp	.+30     	; 0x1d7e <LCD_WriteCharacter+0x1b4>
    1d60:	80 e9       	ldi	r24, 0x90	; 144
    1d62:	91 e0       	ldi	r25, 0x01	; 1
    1d64:	9d ab       	std	Y+53, r25	; 0x35
    1d66:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d68:	8c a9       	ldd	r24, Y+52	; 0x34
    1d6a:	9d a9       	ldd	r25, Y+53	; 0x35
    1d6c:	01 97       	sbiw	r24, 0x01	; 1
    1d6e:	f1 f7       	brne	.-4      	; 0x1d6c <LCD_WriteCharacter+0x1a2>
    1d70:	9d ab       	std	Y+53, r25	; 0x35
    1d72:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d74:	8e a9       	ldd	r24, Y+54	; 0x36
    1d76:	9f a9       	ldd	r25, Y+55	; 0x37
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	9f ab       	std	Y+55, r25	; 0x37
    1d7c:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7e:	8e a9       	ldd	r24, Y+54	; 0x36
    1d80:	9f a9       	ldd	r25, Y+55	; 0x37
    1d82:	00 97       	sbiw	r24, 0x00	; 0
    1d84:	69 f7       	brne	.-38     	; 0x1d60 <LCD_WriteCharacter+0x196>
    1d86:	2d c0       	rjmp	.+90     	; 0x1de2 <LCD_WriteCharacter+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d88:	68 ad       	ldd	r22, Y+56	; 0x38
    1d8a:	79 ad       	ldd	r23, Y+57	; 0x39
    1d8c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d8e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d94:	dc 01       	movw	r26, r24
    1d96:	cb 01       	movw	r24, r22
    1d98:	9f ab       	std	Y+55, r25	; 0x37
    1d9a:	8e ab       	std	Y+54, r24	; 0x36
    1d9c:	8e a9       	ldd	r24, Y+54	; 0x36
    1d9e:	9f a9       	ldd	r25, Y+55	; 0x37
    1da0:	9b ab       	std	Y+51, r25	; 0x33
    1da2:	8a ab       	std	Y+50, r24	; 0x32
    1da4:	8a a9       	ldd	r24, Y+50	; 0x32
    1da6:	9b a9       	ldd	r25, Y+51	; 0x33
    1da8:	01 97       	sbiw	r24, 0x01	; 1
    1daa:	f1 f7       	brne	.-4      	; 0x1da8 <LCD_WriteCharacter+0x1de>
    1dac:	9b ab       	std	Y+51, r25	; 0x33
    1dae:	8a ab       	std	Y+50, r24	; 0x32
    1db0:	18 c0       	rjmp	.+48     	; 0x1de2 <LCD_WriteCharacter+0x218>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1db2:	fe 01       	movw	r30, r28
    1db4:	ef 5b       	subi	r30, 0xBF	; 191
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	60 81       	ld	r22, Z
    1dba:	71 81       	ldd	r23, Z+1	; 0x01
    1dbc:	82 81       	ldd	r24, Z+2	; 0x02
    1dbe:	93 81       	ldd	r25, Z+3	; 0x03
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e0 5c       	subi	r30, 0xC0	; 192
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 83       	st	Z, r24
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e0 5c       	subi	r30, 0xC0	; 192
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1dda:	89 a9       	ldd	r24, Y+49	; 0x31
    1ddc:	8a 95       	dec	r24
    1dde:	f1 f7       	brne	.-4      	; 0x1ddc <LCD_WriteCharacter+0x212>
    1de0:	89 ab       	std	Y+49, r24	; 0x31
	_delay_us(100);
	DIO_WritePin(LCD_E_PIN, LOW);
    1de2:	83 e0       	ldi	r24, 0x03	; 3
    1de4:	60 e0       	ldi	r22, 0x00	; 0
    1de6:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

	LCD_4BIT_PORT = (chr << 4) | (LCD_4BIT_PORT & 0x0f);
    1dea:	ab e3       	ldi	r26, 0x3B	; 59
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	fe 01       	movw	r30, r28
    1df0:	e7 5b       	subi	r30, 0xB7	; 183
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	80 81       	ld	r24, Z
    1df6:	88 2f       	mov	r24, r24
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	82 95       	swap	r24
    1dfc:	92 95       	swap	r25
    1dfe:	90 7f       	andi	r25, 0xF0	; 240
    1e00:	98 27       	eor	r25, r24
    1e02:	80 7f       	andi	r24, 0xF0	; 240
    1e04:	98 27       	eor	r25, r24
    1e06:	98 2f       	mov	r25, r24
    1e08:	eb e3       	ldi	r30, 0x3B	; 59
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	8f 70       	andi	r24, 0x0F	; 15
    1e10:	89 2b       	or	r24, r25
    1e12:	8c 93       	st	X, r24

	DIO_WritePin(LCD_E_PIN, HIGH);
    1e14:	83 e0       	ldi	r24, 0x03	; 3
    1e16:	61 e0       	ldi	r22, 0x01	; 1
    1e18:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    1e1c:	80 e0       	ldi	r24, 0x00	; 0
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	a8 ec       	ldi	r26, 0xC8	; 200
    1e22:	b2 e4       	ldi	r27, 0x42	; 66
    1e24:	8d a7       	std	Y+45, r24	; 0x2d
    1e26:	9e a7       	std	Y+46, r25	; 0x2e
    1e28:	af a7       	std	Y+47, r26	; 0x2f
    1e2a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e2c:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e2e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e30:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e32:	98 a9       	ldd	r25, Y+48	; 0x30
    1e34:	2b ea       	ldi	r18, 0xAB	; 171
    1e36:	3a ea       	ldi	r19, 0xAA	; 170
    1e38:	4a ea       	ldi	r20, 0xAA	; 170
    1e3a:	50 e4       	ldi	r21, 0x40	; 64
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	89 a7       	std	Y+41, r24	; 0x29
    1e46:	9a a7       	std	Y+42, r25	; 0x2a
    1e48:	ab a7       	std	Y+43, r26	; 0x2b
    1e4a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e4c:	69 a5       	ldd	r22, Y+41	; 0x29
    1e4e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e50:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e52:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e54:	20 e0       	ldi	r18, 0x00	; 0
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e8       	ldi	r20, 0x80	; 128
    1e5a:	5f e3       	ldi	r21, 0x3F	; 63
    1e5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e60:	88 23       	and	r24, r24
    1e62:	1c f4       	brge	.+6      	; 0x1e6a <LCD_WriteCharacter+0x2a0>
		__ticks = 1;
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	88 a7       	std	Y+40, r24	; 0x28
    1e68:	91 c0       	rjmp	.+290    	; 0x1f8c <LCD_WriteCharacter+0x3c2>
	else if (__tmp > 255)
    1e6a:	69 a5       	ldd	r22, Y+41	; 0x29
    1e6c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e72:	20 e0       	ldi	r18, 0x00	; 0
    1e74:	30 e0       	ldi	r19, 0x00	; 0
    1e76:	4f e7       	ldi	r20, 0x7F	; 127
    1e78:	53 e4       	ldi	r21, 0x43	; 67
    1e7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	0c f0       	brlt	.+2      	; 0x1e84 <LCD_WriteCharacter+0x2ba>
    1e82:	7b c0       	rjmp	.+246    	; 0x1f7a <LCD_WriteCharacter+0x3b0>
	{
		_delay_ms(__us / 1000.0);
    1e84:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e86:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e88:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8a:	98 a9       	ldd	r25, Y+48	; 0x30
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	54 e4       	ldi	r21, 0x44	; 68
    1e94:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1e98:	dc 01       	movw	r26, r24
    1e9a:	cb 01       	movw	r24, r22
    1e9c:	8c a3       	std	Y+36, r24	; 0x24
    1e9e:	9d a3       	std	Y+37, r25	; 0x25
    1ea0:	ae a3       	std	Y+38, r26	; 0x26
    1ea2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ea4:	6c a1       	ldd	r22, Y+36	; 0x24
    1ea6:	7d a1       	ldd	r23, Y+37	; 0x25
    1ea8:	8e a1       	ldd	r24, Y+38	; 0x26
    1eaa:	9f a1       	ldd	r25, Y+39	; 0x27
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a e7       	ldi	r20, 0x7A	; 122
    1eb2:	55 e4       	ldi	r21, 0x45	; 69
    1eb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	88 a3       	std	Y+32, r24	; 0x20
    1ebe:	99 a3       	std	Y+33, r25	; 0x21
    1ec0:	aa a3       	std	Y+34, r26	; 0x22
    1ec2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1ec4:	68 a1       	ldd	r22, Y+32	; 0x20
    1ec6:	79 a1       	ldd	r23, Y+33	; 0x21
    1ec8:	8a a1       	ldd	r24, Y+34	; 0x22
    1eca:	9b a1       	ldd	r25, Y+35	; 0x23
    1ecc:	20 e0       	ldi	r18, 0x00	; 0
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	40 e8       	ldi	r20, 0x80	; 128
    1ed2:	5f e3       	ldi	r21, 0x3F	; 63
    1ed4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	2c f4       	brge	.+10     	; 0x1ee6 <LCD_WriteCharacter+0x31c>
		__ticks = 1;
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	9f 8f       	std	Y+31, r25	; 0x1f
    1ee2:	8e 8f       	std	Y+30, r24	; 0x1e
    1ee4:	3f c0       	rjmp	.+126    	; 0x1f64 <LCD_WriteCharacter+0x39a>
	else if (__tmp > 65535)
    1ee6:	68 a1       	ldd	r22, Y+32	; 0x20
    1ee8:	79 a1       	ldd	r23, Y+33	; 0x21
    1eea:	8a a1       	ldd	r24, Y+34	; 0x22
    1eec:	9b a1       	ldd	r25, Y+35	; 0x23
    1eee:	20 e0       	ldi	r18, 0x00	; 0
    1ef0:	3f ef       	ldi	r19, 0xFF	; 255
    1ef2:	4f e7       	ldi	r20, 0x7F	; 127
    1ef4:	57 e4       	ldi	r21, 0x47	; 71
    1ef6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1efa:	18 16       	cp	r1, r24
    1efc:	4c f5       	brge	.+82     	; 0x1f50 <LCD_WriteCharacter+0x386>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	6c a1       	ldd	r22, Y+36	; 0x24
    1f00:	7d a1       	ldd	r23, Y+37	; 0x25
    1f02:	8e a1       	ldd	r24, Y+38	; 0x26
    1f04:	9f a1       	ldd	r25, Y+39	; 0x27
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e2       	ldi	r20, 0x20	; 32
    1f0c:	51 e4       	ldi	r21, 0x41	; 65
    1f0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f12:	dc 01       	movw	r26, r24
    1f14:	cb 01       	movw	r24, r22
    1f16:	bc 01       	movw	r22, r24
    1f18:	cd 01       	movw	r24, r26
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9f 8f       	std	Y+31, r25	; 0x1f
    1f24:	8e 8f       	std	Y+30, r24	; 0x1e
    1f26:	0f c0       	rjmp	.+30     	; 0x1f46 <LCD_WriteCharacter+0x37c>
    1f28:	80 e9       	ldi	r24, 0x90	; 144
    1f2a:	91 e0       	ldi	r25, 0x01	; 1
    1f2c:	9d 8f       	std	Y+29, r25	; 0x1d
    1f2e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f32:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f34:	01 97       	sbiw	r24, 0x01	; 1
    1f36:	f1 f7       	brne	.-4      	; 0x1f34 <LCD_WriteCharacter+0x36a>
    1f38:	9d 8f       	std	Y+29, r25	; 0x1d
    1f3a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f3c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f3e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	9f 8f       	std	Y+31, r25	; 0x1f
    1f44:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f46:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f48:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f4a:	00 97       	sbiw	r24, 0x00	; 0
    1f4c:	69 f7       	brne	.-38     	; 0x1f28 <LCD_WriteCharacter+0x35e>
    1f4e:	24 c0       	rjmp	.+72     	; 0x1f98 <LCD_WriteCharacter+0x3ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f50:	68 a1       	ldd	r22, Y+32	; 0x20
    1f52:	79 a1       	ldd	r23, Y+33	; 0x21
    1f54:	8a a1       	ldd	r24, Y+34	; 0x22
    1f56:	9b a1       	ldd	r25, Y+35	; 0x23
    1f58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f5c:	dc 01       	movw	r26, r24
    1f5e:	cb 01       	movw	r24, r22
    1f60:	9f 8f       	std	Y+31, r25	; 0x1f
    1f62:	8e 8f       	std	Y+30, r24	; 0x1e
    1f64:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f66:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f68:	9b 8f       	std	Y+27, r25	; 0x1b
    1f6a:	8a 8f       	std	Y+26, r24	; 0x1a
    1f6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f6e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	f1 f7       	brne	.-4      	; 0x1f70 <LCD_WriteCharacter+0x3a6>
    1f74:	9b 8f       	std	Y+27, r25	; 0x1b
    1f76:	8a 8f       	std	Y+26, r24	; 0x1a
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_WriteCharacter+0x3ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f7a:	69 a5       	ldd	r22, Y+41	; 0x29
    1f7c:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f7e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f80:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f82:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f86:	dc 01       	movw	r26, r24
    1f88:	cb 01       	movw	r24, r22
    1f8a:	88 a7       	std	Y+40, r24	; 0x28
    1f8c:	88 a5       	ldd	r24, Y+40	; 0x28
    1f8e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1f90:	89 8d       	ldd	r24, Y+25	; 0x19
    1f92:	8a 95       	dec	r24
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <LCD_WriteCharacter+0x3c8>
    1f96:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(100);
	DIO_WritePin(LCD_E_PIN, LOW);
    1f98:	83 e0       	ldi	r24, 0x03	; 3
    1f9a:	60 e0       	ldi	r22, 0x00	; 0
    1f9c:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	aa ef       	ldi	r26, 0xFA	; 250
    1fa6:	b3 e4       	ldi	r27, 0x43	; 67
    1fa8:	8d 8b       	std	Y+21, r24	; 0x15
    1faa:	9e 8b       	std	Y+22, r25	; 0x16
    1fac:	af 8b       	std	Y+23, r26	; 0x17
    1fae:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fb0:	6d 89       	ldd	r22, Y+21	; 0x15
    1fb2:	7e 89       	ldd	r23, Y+22	; 0x16
    1fb4:	8f 89       	ldd	r24, Y+23	; 0x17
    1fb6:	98 8d       	ldd	r25, Y+24	; 0x18
    1fb8:	2b ea       	ldi	r18, 0xAB	; 171
    1fba:	3a ea       	ldi	r19, 0xAA	; 170
    1fbc:	4a ea       	ldi	r20, 0xAA	; 170
    1fbe:	50 e4       	ldi	r21, 0x40	; 64
    1fc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	cb 01       	movw	r24, r22
    1fc8:	89 8b       	std	Y+17, r24	; 0x11
    1fca:	9a 8b       	std	Y+18, r25	; 0x12
    1fcc:	ab 8b       	std	Y+19, r26	; 0x13
    1fce:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1fd0:	69 89       	ldd	r22, Y+17	; 0x11
    1fd2:	7a 89       	ldd	r23, Y+18	; 0x12
    1fd4:	8b 89       	ldd	r24, Y+19	; 0x13
    1fd6:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	5f e3       	ldi	r21, 0x3F	; 63
    1fe0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe4:	88 23       	and	r24, r24
    1fe6:	1c f4       	brge	.+6      	; 0x1fee <LCD_WriteCharacter+0x424>
		__ticks = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	88 8b       	std	Y+16, r24	; 0x10
    1fec:	91 c0       	rjmp	.+290    	; 0x2110 <LCD_WriteCharacter+0x546>
	else if (__tmp > 255)
    1fee:	69 89       	ldd	r22, Y+17	; 0x11
    1ff0:	7a 89       	ldd	r23, Y+18	; 0x12
    1ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff6:	20 e0       	ldi	r18, 0x00	; 0
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	4f e7       	ldi	r20, 0x7F	; 127
    1ffc:	53 e4       	ldi	r21, 0x43	; 67
    1ffe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2002:	18 16       	cp	r1, r24
    2004:	0c f0       	brlt	.+2      	; 0x2008 <LCD_WriteCharacter+0x43e>
    2006:	7b c0       	rjmp	.+246    	; 0x20fe <LCD_WriteCharacter+0x534>
	{
		_delay_ms(__us / 1000.0);
    2008:	6d 89       	ldd	r22, Y+21	; 0x15
    200a:	7e 89       	ldd	r23, Y+22	; 0x16
    200c:	8f 89       	ldd	r24, Y+23	; 0x17
    200e:	98 8d       	ldd	r25, Y+24	; 0x18
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a e7       	ldi	r20, 0x7A	; 122
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	8c 87       	std	Y+12, r24	; 0x0c
    2022:	9d 87       	std	Y+13, r25	; 0x0d
    2024:	ae 87       	std	Y+14, r26	; 0x0e
    2026:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2028:	6c 85       	ldd	r22, Y+12	; 0x0c
    202a:	7d 85       	ldd	r23, Y+13	; 0x0d
    202c:	8e 85       	ldd	r24, Y+14	; 0x0e
    202e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2030:	20 e0       	ldi	r18, 0x00	; 0
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	4a e7       	ldi	r20, 0x7A	; 122
    2036:	55 e4       	ldi	r21, 0x45	; 69
    2038:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	88 87       	std	Y+8, r24	; 0x08
    2042:	99 87       	std	Y+9, r25	; 0x09
    2044:	aa 87       	std	Y+10, r26	; 0x0a
    2046:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2048:	68 85       	ldd	r22, Y+8	; 0x08
    204a:	79 85       	ldd	r23, Y+9	; 0x09
    204c:	8a 85       	ldd	r24, Y+10	; 0x0a
    204e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	40 e8       	ldi	r20, 0x80	; 128
    2056:	5f e3       	ldi	r21, 0x3F	; 63
    2058:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    205c:	88 23       	and	r24, r24
    205e:	2c f4       	brge	.+10     	; 0x206a <LCD_WriteCharacter+0x4a0>
		__ticks = 1;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	90 e0       	ldi	r25, 0x00	; 0
    2064:	9f 83       	std	Y+7, r25	; 0x07
    2066:	8e 83       	std	Y+6, r24	; 0x06
    2068:	3f c0       	rjmp	.+126    	; 0x20e8 <LCD_WriteCharacter+0x51e>
	else if (__tmp > 65535)
    206a:	68 85       	ldd	r22, Y+8	; 0x08
    206c:	79 85       	ldd	r23, Y+9	; 0x09
    206e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2070:	9b 85       	ldd	r25, Y+11	; 0x0b
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	3f ef       	ldi	r19, 0xFF	; 255
    2076:	4f e7       	ldi	r20, 0x7F	; 127
    2078:	57 e4       	ldi	r21, 0x47	; 71
    207a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    207e:	18 16       	cp	r1, r24
    2080:	4c f5       	brge	.+82     	; 0x20d4 <LCD_WriteCharacter+0x50a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2082:	6c 85       	ldd	r22, Y+12	; 0x0c
    2084:	7d 85       	ldd	r23, Y+13	; 0x0d
    2086:	8e 85       	ldd	r24, Y+14	; 0x0e
    2088:	9f 85       	ldd	r25, Y+15	; 0x0f
    208a:	20 e0       	ldi	r18, 0x00	; 0
    208c:	30 e0       	ldi	r19, 0x00	; 0
    208e:	40 e2       	ldi	r20, 0x20	; 32
    2090:	51 e4       	ldi	r21, 0x41	; 65
    2092:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a2:	dc 01       	movw	r26, r24
    20a4:	cb 01       	movw	r24, r22
    20a6:	9f 83       	std	Y+7, r25	; 0x07
    20a8:	8e 83       	std	Y+6, r24	; 0x06
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <LCD_WriteCharacter+0x500>
    20ac:	80 e9       	ldi	r24, 0x90	; 144
    20ae:	91 e0       	ldi	r25, 0x01	; 1
    20b0:	9d 83       	std	Y+5, r25	; 0x05
    20b2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	9d 81       	ldd	r25, Y+5	; 0x05
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_WriteCharacter+0x4ee>
    20bc:	9d 83       	std	Y+5, r25	; 0x05
    20be:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c0:	8e 81       	ldd	r24, Y+6	; 0x06
    20c2:	9f 81       	ldd	r25, Y+7	; 0x07
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9f 83       	std	Y+7, r25	; 0x07
    20c8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ca:	8e 81       	ldd	r24, Y+6	; 0x06
    20cc:	9f 81       	ldd	r25, Y+7	; 0x07
    20ce:	00 97       	sbiw	r24, 0x00	; 0
    20d0:	69 f7       	brne	.-38     	; 0x20ac <LCD_WriteCharacter+0x4e2>
    20d2:	24 c0       	rjmp	.+72     	; 0x211c <LCD_WriteCharacter+0x552>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20d4:	68 85       	ldd	r22, Y+8	; 0x08
    20d6:	79 85       	ldd	r23, Y+9	; 0x09
    20d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20da:	9b 85       	ldd	r25, Y+11	; 0x0b
    20dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	9f 83       	std	Y+7, r25	; 0x07
    20e6:	8e 83       	std	Y+6, r24	; 0x06
    20e8:	8e 81       	ldd	r24, Y+6	; 0x06
    20ea:	9f 81       	ldd	r25, Y+7	; 0x07
    20ec:	9b 83       	std	Y+3, r25	; 0x03
    20ee:	8a 83       	std	Y+2, r24	; 0x02
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	9b 81       	ldd	r25, Y+3	; 0x03
    20f4:	01 97       	sbiw	r24, 0x01	; 1
    20f6:	f1 f7       	brne	.-4      	; 0x20f4 <LCD_WriteCharacter+0x52a>
    20f8:	9b 83       	std	Y+3, r25	; 0x03
    20fa:	8a 83       	std	Y+2, r24	; 0x02
    20fc:	0f c0       	rjmp	.+30     	; 0x211c <LCD_WriteCharacter+0x552>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    20fe:	69 89       	ldd	r22, Y+17	; 0x11
    2100:	7a 89       	ldd	r23, Y+18	; 0x12
    2102:	8b 89       	ldd	r24, Y+19	; 0x13
    2104:	9c 89       	ldd	r25, Y+20	; 0x14
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	88 8b       	std	Y+16, r24	; 0x10
    2110:	88 89       	ldd	r24, Y+16	; 0x10
    2112:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2114:	89 81       	ldd	r24, Y+1	; 0x01
    2116:	8a 95       	dec	r24
    2118:	f1 f7       	brne	.-4      	; 0x2116 <LCD_WriteCharacter+0x54c>
    211a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(500);

}
    211c:	c7 5b       	subi	r28, 0xB7	; 183
    211e:	df 4f       	sbci	r29, 0xFF	; 255
    2120:	0f b6       	in	r0, 0x3f	; 63
    2122:	f8 94       	cli
    2124:	de bf       	out	0x3e, r29	; 62
    2126:	0f be       	out	0x3f, r0	; 63
    2128:	cd bf       	out	0x3d, r28	; 61
    212a:	cf 91       	pop	r28
    212c:	df 91       	pop	r29
    212e:	1f 91       	pop	r17
    2130:	0f 91       	pop	r16
    2132:	08 95       	ret

00002134 <LCD_WriteString>:

/* ---------------------------------  WRITE A STRING  --------------------------------------------------  */


void LCD_WriteString(uint8* str)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	00 d0       	rcall	.+0      	; 0x213a <LCD_WriteString+0x6>
    213a:	0f 92       	push	r0
    213c:	cd b7       	in	r28, 0x3d	; 61
    213e:	de b7       	in	r29, 0x3e	; 62
    2140:	9b 83       	std	Y+3, r25	; 0x03
    2142:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i= 0;
    2144:	19 82       	std	Y+1, r1	; 0x01
    2146:	0e c0       	rjmp	.+28     	; 0x2164 <LCD_WriteString+0x30>

	while(str[i] !='\0')
	{
		LCD_WriteCharacter(str[i]);
    2148:	89 81       	ldd	r24, Y+1	; 0x01
    214a:	28 2f       	mov	r18, r24
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	8a 81       	ldd	r24, Y+2	; 0x02
    2150:	9b 81       	ldd	r25, Y+3	; 0x03
    2152:	fc 01       	movw	r30, r24
    2154:	e2 0f       	add	r30, r18
    2156:	f3 1f       	adc	r31, r19
    2158:	80 81       	ld	r24, Z
    215a:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_WriteCharacter>
		i++;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	8f 5f       	subi	r24, 0xFF	; 255
    2162:	89 83       	std	Y+1, r24	; 0x01

void LCD_WriteString(uint8* str)
{
	uint8 i= 0;

	while(str[i] !='\0')
    2164:	89 81       	ldd	r24, Y+1	; 0x01
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	8a 81       	ldd	r24, Y+2	; 0x02
    216c:	9b 81       	ldd	r25, Y+3	; 0x03
    216e:	fc 01       	movw	r30, r24
    2170:	e2 0f       	add	r30, r18
    2172:	f3 1f       	adc	r31, r19
    2174:	80 81       	ld	r24, Z
    2176:	88 23       	and	r24, r24
    2178:	39 f7       	brne	.-50     	; 0x2148 <LCD_WriteString+0x14>
	{
		LCD_WriteCharacter(str[i]);
		i++;
	}
}
    217a:	0f 90       	pop	r0
    217c:	0f 90       	pop	r0
    217e:	0f 90       	pop	r0
    2180:	cf 91       	pop	r28
    2182:	df 91       	pop	r29
    2184:	08 95       	ret

00002186 <LCD_WriteInteger>:


/*  ---------------------------------  WRITE INTEGER --------------------------------------------------  */

void LCD_WriteInteger(uint32 intgr)
{
    2186:	ef 92       	push	r14
    2188:	ff 92       	push	r15
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	df 93       	push	r29
    2190:	cf 93       	push	r28
    2192:	cd b7       	in	r28, 0x3d	; 61
    2194:	de b7       	in	r29, 0x3e	; 62
    2196:	28 97       	sbiw	r28, 0x08	; 8
    2198:	0f b6       	in	r0, 0x3f	; 63
    219a:	f8 94       	cli
    219c:	de bf       	out	0x3e, r29	; 62
    219e:	0f be       	out	0x3f, r0	; 63
    21a0:	cd bf       	out	0x3d, r28	; 61
    21a2:	6d 83       	std	Y+5, r22	; 0x05
    21a4:	7e 83       	std	Y+6, r23	; 0x06
    21a6:	8f 83       	std	Y+7, r24	; 0x07
    21a8:	98 87       	std	Y+8, r25	; 0x08


	uint32 y = 1;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	a0 e0       	ldi	r26, 0x00	; 0
    21b0:	b0 e0       	ldi	r27, 0x00	; 0
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	9a 83       	std	Y+2, r25	; 0x02
    21b6:	ab 83       	std	Y+3, r26	; 0x03
    21b8:	bc 83       	std	Y+4, r27	; 0x04
    21ba:	36 c0       	rjmp	.+108    	; 0x2228 <LCD_WriteInteger+0xa2>

	while(intgr > 0)
	{
		y = ((y*10) + (intgr%10));
    21bc:	89 81       	ldd	r24, Y+1	; 0x01
    21be:	9a 81       	ldd	r25, Y+2	; 0x02
    21c0:	ab 81       	ldd	r26, Y+3	; 0x03
    21c2:	bc 81       	ldd	r27, Y+4	; 0x04
    21c4:	2a e0       	ldi	r18, 0x0A	; 10
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e0       	ldi	r20, 0x00	; 0
    21ca:	50 e0       	ldi	r21, 0x00	; 0
    21cc:	bc 01       	movw	r22, r24
    21ce:	cd 01       	movw	r24, r26
    21d0:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__mulsi3>
    21d4:	7b 01       	movw	r14, r22
    21d6:	8c 01       	movw	r16, r24
    21d8:	8d 81       	ldd	r24, Y+5	; 0x05
    21da:	9e 81       	ldd	r25, Y+6	; 0x06
    21dc:	af 81       	ldd	r26, Y+7	; 0x07
    21de:	b8 85       	ldd	r27, Y+8	; 0x08
    21e0:	2a e0       	ldi	r18, 0x0A	; 10
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	50 e0       	ldi	r21, 0x00	; 0
    21e8:	bc 01       	movw	r22, r24
    21ea:	cd 01       	movw	r24, r26
    21ec:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__udivmodsi4>
    21f0:	dc 01       	movw	r26, r24
    21f2:	cb 01       	movw	r24, r22
    21f4:	8e 0d       	add	r24, r14
    21f6:	9f 1d       	adc	r25, r15
    21f8:	a0 1f       	adc	r26, r16
    21fa:	b1 1f       	adc	r27, r17
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	9a 83       	std	Y+2, r25	; 0x02
    2200:	ab 83       	std	Y+3, r26	; 0x03
    2202:	bc 83       	std	Y+4, r27	; 0x04
		intgr /= 10;
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	af 81       	ldd	r26, Y+7	; 0x07
    220a:	b8 85       	ldd	r27, Y+8	; 0x08
    220c:	2a e0       	ldi	r18, 0x0A	; 10
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e0       	ldi	r20, 0x00	; 0
    2212:	50 e0       	ldi	r21, 0x00	; 0
    2214:	bc 01       	movw	r22, r24
    2216:	cd 01       	movw	r24, r26
    2218:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__udivmodsi4>
    221c:	da 01       	movw	r26, r20
    221e:	c9 01       	movw	r24, r18
    2220:	8d 83       	std	Y+5, r24	; 0x05
    2222:	9e 83       	std	Y+6, r25	; 0x06
    2224:	af 83       	std	Y+7, r26	; 0x07
    2226:	b8 87       	std	Y+8, r27	; 0x08
{


	uint32 y = 1;

	while(intgr > 0)
    2228:	8d 81       	ldd	r24, Y+5	; 0x05
    222a:	9e 81       	ldd	r25, Y+6	; 0x06
    222c:	af 81       	ldd	r26, Y+7	; 0x07
    222e:	b8 85       	ldd	r27, Y+8	; 0x08
    2230:	00 97       	sbiw	r24, 0x00	; 0
    2232:	a1 05       	cpc	r26, r1
    2234:	b1 05       	cpc	r27, r1
    2236:	11 f6       	brne	.-124    	; 0x21bc <LCD_WriteInteger+0x36>
    2238:	23 c0       	rjmp	.+70     	; 0x2280 <LCD_WriteInteger+0xfa>
		intgr /= 10;
	}

	while(y > 1 )
	{
		LCD_WriteCharacter(((y%10)+48));
    223a:	89 81       	ldd	r24, Y+1	; 0x01
    223c:	9a 81       	ldd	r25, Y+2	; 0x02
    223e:	ab 81       	ldd	r26, Y+3	; 0x03
    2240:	bc 81       	ldd	r27, Y+4	; 0x04
    2242:	2a e0       	ldi	r18, 0x0A	; 10
    2244:	30 e0       	ldi	r19, 0x00	; 0
    2246:	40 e0       	ldi	r20, 0x00	; 0
    2248:	50 e0       	ldi	r21, 0x00	; 0
    224a:	bc 01       	movw	r22, r24
    224c:	cd 01       	movw	r24, r26
    224e:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__udivmodsi4>
    2252:	dc 01       	movw	r26, r24
    2254:	cb 01       	movw	r24, r22
    2256:	80 5d       	subi	r24, 0xD0	; 208
    2258:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_WriteCharacter>
		y /= 10;
    225c:	89 81       	ldd	r24, Y+1	; 0x01
    225e:	9a 81       	ldd	r25, Y+2	; 0x02
    2260:	ab 81       	ldd	r26, Y+3	; 0x03
    2262:	bc 81       	ldd	r27, Y+4	; 0x04
    2264:	2a e0       	ldi	r18, 0x0A	; 10
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	50 e0       	ldi	r21, 0x00	; 0
    226c:	bc 01       	movw	r22, r24
    226e:	cd 01       	movw	r24, r26
    2270:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__udivmodsi4>
    2274:	da 01       	movw	r26, r20
    2276:	c9 01       	movw	r24, r18
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	9a 83       	std	Y+2, r25	; 0x02
    227c:	ab 83       	std	Y+3, r26	; 0x03
    227e:	bc 83       	std	Y+4, r27	; 0x04
	{
		y = ((y*10) + (intgr%10));
		intgr /= 10;
	}

	while(y > 1 )
    2280:	89 81       	ldd	r24, Y+1	; 0x01
    2282:	9a 81       	ldd	r25, Y+2	; 0x02
    2284:	ab 81       	ldd	r26, Y+3	; 0x03
    2286:	bc 81       	ldd	r27, Y+4	; 0x04
    2288:	82 30       	cpi	r24, 0x02	; 2
    228a:	91 05       	cpc	r25, r1
    228c:	a1 05       	cpc	r26, r1
    228e:	b1 05       	cpc	r27, r1
    2290:	a0 f6       	brcc	.-88     	; 0x223a <LCD_WriteInteger+0xb4>
	{
		LCD_WriteCharacter(((y%10)+48));
		y /= 10;
	}

}
    2292:	28 96       	adiw	r28, 0x08	; 8
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	1f 91       	pop	r17
    22a4:	0f 91       	pop	r16
    22a6:	ff 90       	pop	r15
    22a8:	ef 90       	pop	r14
    22aa:	08 95       	ret

000022ac <LCD_GoTo>:

/*  ---------------------------------  GOTO SPECIFIC LOCATION  -------------------------------------------------- */

void LCD_GoTo(uint8 row,uint8 col)
{
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	00 d0       	rcall	.+0      	; 0x22b2 <LCD_GoTo+0x6>
    22b2:	00 d0       	rcall	.+0      	; 0x22b4 <LCD_GoTo+0x8>
    22b4:	cd b7       	in	r28, 0x3d	; 61
    22b6:	de b7       	in	r29, 0x3e	; 62
    22b8:	8b 83       	std	Y+3, r24	; 0x03
    22ba:	6c 83       	std	Y+4, r22	; 0x04
	uint8 arr[2] = {0x80,0xc0};
    22bc:	80 e8       	ldi	r24, 0x80	; 128
    22be:	89 83       	std	Y+1, r24	; 0x01
    22c0:	80 ec       	ldi	r24, 0xC0	; 192
    22c2:	8a 83       	std	Y+2, r24	; 0x02

	LCD_WriteCommand(arr[row]+col);
    22c4:	8b 81       	ldd	r24, Y+3	; 0x03
    22c6:	28 2f       	mov	r18, r24
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	ce 01       	movw	r24, r28
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	fc 01       	movw	r30, r24
    22d0:	e2 0f       	add	r30, r18
    22d2:	f3 1f       	adc	r31, r19
    22d4:	90 81       	ld	r25, Z
    22d6:	8c 81       	ldd	r24, Y+4	; 0x04
    22d8:	89 0f       	add	r24, r25
    22da:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>

}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	cf 91       	pop	r28
    22e8:	df 91       	pop	r29
    22ea:	08 95       	ret

000022ec <LCD_Clear>:


/*  ---------------------------------  CLEAR LCD  --------------------------------------------------  */

void LCD_Clear(void)
{
    22ec:	df 93       	push	r29
    22ee:	cf 93       	push	r28
    22f0:	cd b7       	in	r28, 0x3d	; 61
    22f2:	de b7       	in	r29, 0x3e	; 62

	LCD_WriteCommand(0x01);
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	0e 94 30 0b 	call	0x1660	; 0x1660 <LCD_WriteCommand>
}
    22fa:	cf 91       	pop	r28
    22fc:	df 91       	pop	r29
    22fe:	08 95       	ret

00002300 <toggle_led0>:

/*****************************************************************/
					/*Toggle 0 Function*/

void toggle_led0(void)
{
    2300:	df 93       	push	r29
    2302:	cf 93       	push	r28
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
	PORTB^=1<<4;
    2308:	a8 e3       	ldi	r26, 0x38	; 56
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e8 e3       	ldi	r30, 0x38	; 56
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	90 81       	ld	r25, Z
    2312:	80 e1       	ldi	r24, 0x10	; 16
    2314:	89 27       	eor	r24, r25
    2316:	8c 93       	st	X, r24
	}
	else
	{
		DIO_WritePin(LED0,LOW);
	}*/
}
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	08 95       	ret

0000231e <LED0_Init>:

/*****************************************************************/
					/*Init LED0 Function*/
void LED0_Init(void)
{
    231e:	df 93       	push	r29
    2320:	cf 93       	push	r28
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED0,OUTPUT);
    2326:	8c e0       	ldi	r24, 0x0C	; 12
    2328:	61 e0       	ldi	r22, 0x01	; 1
    232a:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_WritePin(LED0,LOW);
    232e:	8c e0       	ldi	r24, 0x0C	; 12
    2330:	60 e0       	ldi	r22, 0x00	; 0
    2332:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    2336:	cf 91       	pop	r28
    2338:	df 91       	pop	r29
    233a:	08 95       	ret

0000233c <toggle_led1>:
/*****************************************************************/
					/*Toggle 1 Function*/
void toggle_led1(void)
{
    233c:	df 93       	push	r29
    233e:	cf 93       	push	r28
    2340:	cd b7       	in	r28, 0x3d	; 61
    2342:	de b7       	in	r29, 0x3e	; 62
	PORTB^=1<<5;
    2344:	a8 e3       	ldi	r26, 0x38	; 56
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 e3       	ldi	r30, 0x38	; 56
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	90 81       	ld	r25, Z
    234e:	80 e2       	ldi	r24, 0x20	; 32
    2350:	89 27       	eor	r24, r25
    2352:	8c 93       	st	X, r24

}
    2354:	cf 91       	pop	r28
    2356:	df 91       	pop	r29
    2358:	08 95       	ret

0000235a <LED1_Init>:


/*****************************************************************/
					/*Init LED1 Function*/
void LED1_Init(void)
{
    235a:	df 93       	push	r29
    235c:	cf 93       	push	r28
    235e:	cd b7       	in	r28, 0x3d	; 61
    2360:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED1,OUTPUT);
    2362:	8d e0       	ldi	r24, 0x0D	; 13
    2364:	61 e0       	ldi	r22, 0x01	; 1
    2366:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_WritePin(LED1,LOW);
    236a:	8d e0       	ldi	r24, 0x0D	; 13
    236c:	60 e0       	ldi	r22, 0x00	; 0
    236e:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    2372:	cf 91       	pop	r28
    2374:	df 91       	pop	r29
    2376:	08 95       	ret

00002378 <toggle_led2>:
/*****************************************************************/
					/*Toggle 2 Function*/

void toggle_led2(void)
{
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
	PORTB^=1<<6;
    2380:	a8 e3       	ldi	r26, 0x38	; 56
    2382:	b0 e0       	ldi	r27, 0x00	; 0
    2384:	e8 e3       	ldi	r30, 0x38	; 56
    2386:	f0 e0       	ldi	r31, 0x00	; 0
    2388:	90 81       	ld	r25, Z
    238a:	80 e4       	ldi	r24, 0x40	; 64
    238c:	89 27       	eor	r24, r25
    238e:	8c 93       	st	X, r24

}
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <LED2_Init>:
/*****************************************************************/
					/*Init LED3 Function*/
void LED2_Init(void)
{
    2396:	df 93       	push	r29
    2398:	cf 93       	push	r28
    239a:	cd b7       	in	r28, 0x3d	; 61
    239c:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED2,OUTPUT);
    239e:	8e e0       	ldi	r24, 0x0E	; 14
    23a0:	61 e0       	ldi	r22, 0x01	; 1
    23a2:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_WritePin(LED2,LOW);
    23a6:	8e e0       	ldi	r24, 0x0E	; 14
    23a8:	60 e0       	ldi	r22, 0x00	; 0
    23aa:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    23ae:	cf 91       	pop	r28
    23b0:	df 91       	pop	r29
    23b2:	08 95       	ret

000023b4 <toggle_led3>:

/*****************************************************************/
					/*Toggle 3 Function*/

void toggle_led3(void)
{
    23b4:	df 93       	push	r29
    23b6:	cf 93       	push	r28
    23b8:	cd b7       	in	r28, 0x3d	; 61
    23ba:	de b7       	in	r29, 0x3e	; 62
	PORTB^=1<<7;
    23bc:	a8 e3       	ldi	r26, 0x38	; 56
    23be:	b0 e0       	ldi	r27, 0x00	; 0
    23c0:	e8 e3       	ldi	r30, 0x38	; 56
    23c2:	f0 e0       	ldi	r31, 0x00	; 0
    23c4:	90 81       	ld	r25, Z
    23c6:	80 e8       	ldi	r24, 0x80	; 128
    23c8:	89 27       	eor	r24, r25
    23ca:	8c 93       	st	X, r24

}
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <LED3_Init>:
/*****************************************************************/
					/*Init LED3 Function*/
void LED3_Init(void)
{
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	cd b7       	in	r28, 0x3d	; 61
    23d8:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(LED3,OUTPUT);
    23da:	8f e0       	ldi	r24, 0x0F	; 15
    23dc:	61 e0       	ldi	r22, 0x01	; 1
    23de:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <DIO_SetPinDirection>
	DIO_WritePin(LED3,LOW);
    23e2:	8f e0       	ldi	r24, 0x0F	; 15
    23e4:	60 e0       	ldi	r22, 0x00	; 0
    23e6:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>
}
    23ea:	cf 91       	pop	r28
    23ec:	df 91       	pop	r29
    23ee:	08 95       	ret

000023f0 <LED0_ON>:

void LED0_ON(void)
{
    23f0:	df 93       	push	r29
    23f2:	cf 93       	push	r28
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED0,HIGH);
    23f8:	8c e0       	ldi	r24, 0x0C	; 12
    23fa:	61 e0       	ldi	r22, 0x01	; 1
    23fc:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

}
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <LED1_ON>:
void LED1_ON(void)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED1,HIGH);
    240e:	8d e0       	ldi	r24, 0x0D	; 13
    2410:	61 e0       	ldi	r22, 0x01	; 1
    2412:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

}
    2416:	cf 91       	pop	r28
    2418:	df 91       	pop	r29
    241a:	08 95       	ret

0000241c <LED2_ON>:

void LED2_ON(void)
{
    241c:	df 93       	push	r29
    241e:	cf 93       	push	r28
    2420:	cd b7       	in	r28, 0x3d	; 61
    2422:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED2,HIGH);
    2424:	8e e0       	ldi	r24, 0x0E	; 14
    2426:	61 e0       	ldi	r22, 0x01	; 1
    2428:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

}
    242c:	cf 91       	pop	r28
    242e:	df 91       	pop	r29
    2430:	08 95       	ret

00002432 <LED3_ON>:

void LED3_ON(void)
{
    2432:	df 93       	push	r29
    2434:	cf 93       	push	r28
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
	DIO_WritePin(LED3,HIGH);
    243a:	8f e0       	ldi	r24, 0x0F	; 15
    243c:	61 e0       	ldi	r22, 0x01	; 1
    243e:	0e 94 89 06 	call	0xd12	; 0xd12 <DIO_WritePin>

}
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <Sos_Init>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Sos_Init(void)
{
    2448:	df 93       	push	r29
    244a:	cf 93       	push	r28
    244c:	00 d0       	rcall	.+0      	; 0x244e <Sos_Init+0x6>
    244e:	cd b7       	in	r28, 0x3d	; 61
    2450:	de b7       	in	r29, 0x3e	; 62
	uint16 u16counter_flag;
	for(u16counter_flag=0;u16counter_flag<no_tasks;u16counter_flag++)
    2452:	1a 82       	std	Y+2, r1	; 0x02
    2454:	19 82       	std	Y+1, r1	; 0x01
    2456:	14 c0       	rjmp	.+40     	; 0x2480 <Sos_Init+0x38>
	{
		sys_tasks[u16counter_flag].u8Reserved_Flag=0;
    2458:	89 81       	ldd	r24, Y+1	; 0x01
    245a:	9a 81       	ldd	r25, Y+2	; 0x02
    245c:	88 0f       	add	r24, r24
    245e:	99 1f       	adc	r25, r25
    2460:	9c 01       	movw	r18, r24
    2462:	22 0f       	add	r18, r18
    2464:	33 1f       	adc	r19, r19
    2466:	22 0f       	add	r18, r18
    2468:	33 1f       	adc	r19, r19
    246a:	82 0f       	add	r24, r18
    246c:	93 1f       	adc	r25, r19
    246e:	fc 01       	movw	r30, r24
    2470:	ec 58       	subi	r30, 0x8C	; 140
    2472:	ff 4f       	sbci	r31, 0xFF	; 255
    2474:	10 82       	st	Z, r1
 * Return		 : void
 **************************************************************************/
void Sos_Init(void)
{
	uint16 u16counter_flag;
	for(u16counter_flag=0;u16counter_flag<no_tasks;u16counter_flag++)
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	01 96       	adiw	r24, 0x01	; 1
    247c:	9a 83       	std	Y+2, r25	; 0x02
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	86 30       	cpi	r24, 0x06	; 6
    2486:	91 05       	cpc	r25, r1
    2488:	38 f3       	brcs	.-50     	; 0x2458 <Sos_Init+0x10>
	{
		sys_tasks[u16counter_flag].u8Reserved_Flag=0;
	}
	Timer0_init(&CallbackfromTimer);
    248a:	8b e6       	ldi	r24, 0x6B	; 107
    248c:	93 e1       	ldi	r25, 0x13	; 19
    248e:	0e 94 55 14 	call	0x28aa	; 0x28aa <Timer0_init>
	Timer0_Set_OCR0(130);
    2492:	82 e8       	ldi	r24, 0x82	; 130
    2494:	0e 94 83 14 	call	0x2906	; 0x2906 <Timer0_Set_OCR0>
	Timer0_Input_capture_Interrupt_Enable();
    2498:	0e 94 fe 14 	call	0x29fc	; 0x29fc <Timer0_Input_capture_Interrupt_Enable>
	Global_Interrupt_Enable();
    249c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <Global_Interrupt_Enable>
}
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <Sos_create_Task>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Sos_create_Task(void (*ptr)(void),uint16 u16period,uint16 u16prior,uint16 u16ID)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	28 97       	sbiw	r28, 0x08	; 8
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	9a 83       	std	Y+2, r25	; 0x02
    24c0:	89 83       	std	Y+1, r24	; 0x01
    24c2:	7c 83       	std	Y+4, r23	; 0x04
    24c4:	6b 83       	std	Y+3, r22	; 0x03
    24c6:	5e 83       	std	Y+6, r21	; 0x06
    24c8:	4d 83       	std	Y+5, r20	; 0x05
    24ca:	38 87       	std	Y+8, r19	; 0x08
    24cc:	2f 83       	std	Y+7, r18	; 0x07
		sys_tasks[u16ID].fptr_Task=ptr;
    24ce:	8f 81       	ldd	r24, Y+7	; 0x07
    24d0:	98 85       	ldd	r25, Y+8	; 0x08
    24d2:	88 0f       	add	r24, r24
    24d4:	99 1f       	adc	r25, r25
    24d6:	9c 01       	movw	r18, r24
    24d8:	22 0f       	add	r18, r18
    24da:	33 1f       	adc	r19, r19
    24dc:	22 0f       	add	r18, r18
    24de:	33 1f       	adc	r19, r19
    24e0:	82 0f       	add	r24, r18
    24e2:	93 1f       	adc	r25, r19
    24e4:	fc 01       	movw	r30, r24
    24e6:	e4 58       	subi	r30, 0x84	; 132
    24e8:	ff 4f       	sbci	r31, 0xFF	; 255
    24ea:	89 81       	ldd	r24, Y+1	; 0x01
    24ec:	9a 81       	ldd	r25, Y+2	; 0x02
    24ee:	91 83       	std	Z+1, r25	; 0x01
    24f0:	80 83       	st	Z, r24
		sys_tasks[u16ID].u16periodicity=u16period;
    24f2:	8f 81       	ldd	r24, Y+7	; 0x07
    24f4:	98 85       	ldd	r25, Y+8	; 0x08
    24f6:	88 0f       	add	r24, r24
    24f8:	99 1f       	adc	r25, r25
    24fa:	9c 01       	movw	r18, r24
    24fc:	22 0f       	add	r18, r18
    24fe:	33 1f       	adc	r19, r19
    2500:	22 0f       	add	r18, r18
    2502:	33 1f       	adc	r19, r19
    2504:	82 0f       	add	r24, r18
    2506:	93 1f       	adc	r25, r19
    2508:	fc 01       	movw	r30, r24
    250a:	eb 58       	subi	r30, 0x8B	; 139
    250c:	ff 4f       	sbci	r31, 0xFF	; 255
    250e:	8b 81       	ldd	r24, Y+3	; 0x03
    2510:	9c 81       	ldd	r25, Y+4	; 0x04
    2512:	91 83       	std	Z+1, r25	; 0x01
    2514:	80 83       	st	Z, r24
		sys_tasks[u16ID].u16priority=u16prior;
    2516:	8f 81       	ldd	r24, Y+7	; 0x07
    2518:	98 85       	ldd	r25, Y+8	; 0x08
    251a:	88 0f       	add	r24, r24
    251c:	99 1f       	adc	r25, r25
    251e:	9c 01       	movw	r18, r24
    2520:	22 0f       	add	r18, r18
    2522:	33 1f       	adc	r19, r19
    2524:	22 0f       	add	r18, r18
    2526:	33 1f       	adc	r19, r19
    2528:	82 0f       	add	r24, r18
    252a:	93 1f       	adc	r25, r19
    252c:	fc 01       	movw	r30, r24
    252e:	e9 58       	subi	r30, 0x89	; 137
    2530:	ff 4f       	sbci	r31, 0xFF	; 255
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	91 83       	std	Z+1, r25	; 0x01
    2538:	80 83       	st	Z, r24
		sys_tasks[u16ID].u8Reserved_Flag=1;
    253a:	8f 81       	ldd	r24, Y+7	; 0x07
    253c:	98 85       	ldd	r25, Y+8	; 0x08
    253e:	88 0f       	add	r24, r24
    2540:	99 1f       	adc	r25, r25
    2542:	9c 01       	movw	r18, r24
    2544:	22 0f       	add	r18, r18
    2546:	33 1f       	adc	r19, r19
    2548:	22 0f       	add	r18, r18
    254a:	33 1f       	adc	r19, r19
    254c:	82 0f       	add	r24, r18
    254e:	93 1f       	adc	r25, r19
    2550:	fc 01       	movw	r30, r24
    2552:	ec 58       	subi	r30, 0x8C	; 140
    2554:	ff 4f       	sbci	r31, 0xFF	; 255
    2556:	81 e0       	ldi	r24, 0x01	; 1
    2558:	80 83       	st	Z, r24
		sys_tasks[u16ID].Task_State=READY;
    255a:	8f 81       	ldd	r24, Y+7	; 0x07
    255c:	98 85       	ldd	r25, Y+8	; 0x08
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	9c 01       	movw	r18, r24
    2564:	22 0f       	add	r18, r18
    2566:	33 1f       	adc	r19, r19
    2568:	22 0f       	add	r18, r18
    256a:	33 1f       	adc	r19, r19
    256c:	82 0f       	add	r24, r18
    256e:	93 1f       	adc	r25, r19
    2570:	fc 01       	movw	r30, r24
    2572:	e5 58       	subi	r30, 0x85	; 133
    2574:	ff 4f       	sbci	r31, 0xFF	; 255
    2576:	10 82       	st	Z, r1
}
    2578:	28 96       	adiw	r28, 0x08	; 8
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <Sos_Run>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Sos_Run(void)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	0f 92       	push	r0
    2590:	cd b7       	in	r28, 0x3d	; 61
    2592:	de b7       	in	r29, 0x3e	; 62
	uint8 run_counter=0;
    2594:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(run_counter=0;run_counter<no_tasks;run_counter++)
    2596:	19 82       	std	Y+1, r1	; 0x01
    2598:	4a c0       	rjmp	.+148    	; 0x262e <Sos_Run+0xa4>
		{
			if( (sys_tasks[run_counter].Task_State == READY))  /*(sys_tasks[run_counter].u16priority) == maxprior) &&*/
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	88 0f       	add	r24, r24
    25a2:	99 1f       	adc	r25, r25
    25a4:	9c 01       	movw	r18, r24
    25a6:	22 0f       	add	r18, r18
    25a8:	33 1f       	adc	r19, r19
    25aa:	22 0f       	add	r18, r18
    25ac:	33 1f       	adc	r19, r19
    25ae:	82 0f       	add	r24, r18
    25b0:	93 1f       	adc	r25, r19
    25b2:	fc 01       	movw	r30, r24
    25b4:	e5 58       	subi	r30, 0x85	; 133
    25b6:	ff 4f       	sbci	r31, 0xFF	; 255
    25b8:	80 81       	ld	r24, Z
    25ba:	88 23       	and	r24, r24
    25bc:	a9 f5       	brne	.+106    	; 0x2628 <Sos_Run+0x9e>
			{
				sys_tasks[run_counter].Task_State=RUNNING;
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	88 2f       	mov	r24, r24
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	88 0f       	add	r24, r24
    25c6:	99 1f       	adc	r25, r25
    25c8:	9c 01       	movw	r18, r24
    25ca:	22 0f       	add	r18, r18
    25cc:	33 1f       	adc	r19, r19
    25ce:	22 0f       	add	r18, r18
    25d0:	33 1f       	adc	r19, r19
    25d2:	82 0f       	add	r24, r18
    25d4:	93 1f       	adc	r25, r19
    25d6:	fc 01       	movw	r30, r24
    25d8:	e5 58       	subi	r30, 0x85	; 133
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	81 e0       	ldi	r24, 0x01	; 1
    25de:	80 83       	st	Z, r24
				sys_tasks[run_counter].fptr_Task();
    25e0:	89 81       	ldd	r24, Y+1	; 0x01
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	9c 01       	movw	r18, r24
    25ec:	22 0f       	add	r18, r18
    25ee:	33 1f       	adc	r19, r19
    25f0:	22 0f       	add	r18, r18
    25f2:	33 1f       	adc	r19, r19
    25f4:	82 0f       	add	r24, r18
    25f6:	93 1f       	adc	r25, r19
    25f8:	fc 01       	movw	r30, r24
    25fa:	e4 58       	subi	r30, 0x84	; 132
    25fc:	ff 4f       	sbci	r31, 0xFF	; 255
    25fe:	01 90       	ld	r0, Z+
    2600:	f0 81       	ld	r31, Z
    2602:	e0 2d       	mov	r30, r0
    2604:	09 95       	icall
				sys_tasks[run_counter].Task_State=WAITING;
    2606:	89 81       	ldd	r24, Y+1	; 0x01
    2608:	88 2f       	mov	r24, r24
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	88 0f       	add	r24, r24
    260e:	99 1f       	adc	r25, r25
    2610:	9c 01       	movw	r18, r24
    2612:	22 0f       	add	r18, r18
    2614:	33 1f       	adc	r19, r19
    2616:	22 0f       	add	r18, r18
    2618:	33 1f       	adc	r19, r19
    261a:	82 0f       	add	r24, r18
    261c:	93 1f       	adc	r25, r19
    261e:	fc 01       	movw	r30, r24
    2620:	e5 58       	subi	r30, 0x85	; 133
    2622:	ff 4f       	sbci	r31, 0xFF	; 255
    2624:	82 e0       	ldi	r24, 0x02	; 2
    2626:	80 83       	st	Z, r24
void Sos_Run(void)
{
	uint8 run_counter=0;
	while(1)
	{
		for(run_counter=0;run_counter<no_tasks;run_counter++)
    2628:	89 81       	ldd	r24, Y+1	; 0x01
    262a:	8f 5f       	subi	r24, 0xFF	; 255
    262c:	89 83       	std	Y+1, r24	; 0x01
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	86 30       	cpi	r24, 0x06	; 6
    2632:	08 f4       	brcc	.+2      	; 0x2636 <Sos_Run+0xac>
    2634:	b2 cf       	rjmp	.-156    	; 0x259a <Sos_Run+0x10>
    2636:	af cf       	rjmp	.-162    	; 0x2596 <Sos_Run+0xc>

00002638 <Sos_Delete_Task>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void Sos_Delete_Task(uint16 ID_of_Task)
{
    2638:	df 93       	push	r29
    263a:	cf 93       	push	r28
    263c:	00 d0       	rcall	.+0      	; 0x263e <Sos_Delete_Task+0x6>
    263e:	0f 92       	push	r0
    2640:	cd b7       	in	r28, 0x3d	; 61
    2642:	de b7       	in	r29, 0x3e	; 62
    2644:	9b 83       	std	Y+3, r25	; 0x03
    2646:	8a 83       	std	Y+2, r24	; 0x02
	uint8 check_ID_counter;
	for(check_ID_counter=0;check_ID_counter<no_tasks;check_ID_counter++)
    2648:	19 82       	std	Y+1, r1	; 0x01
    264a:	3c c0       	rjmp	.+120    	; 0x26c4 <Sos_Delete_Task+0x8c>
	{
		if(sys_tasks[check_ID_counter].u16ID_of_Task == ID_of_Task)
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	88 2f       	mov	r24, r24
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	88 0f       	add	r24, r24
    2654:	99 1f       	adc	r25, r25
    2656:	9c 01       	movw	r18, r24
    2658:	22 0f       	add	r18, r18
    265a:	33 1f       	adc	r19, r19
    265c:	22 0f       	add	r18, r18
    265e:	33 1f       	adc	r19, r19
    2660:	82 0f       	add	r24, r18
    2662:	93 1f       	adc	r25, r19
    2664:	fc 01       	movw	r30, r24
    2666:	e7 58       	subi	r30, 0x87	; 135
    2668:	ff 4f       	sbci	r31, 0xFF	; 255
    266a:	20 81       	ld	r18, Z
    266c:	31 81       	ldd	r19, Z+1	; 0x01
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	9b 81       	ldd	r25, Y+3	; 0x03
    2672:	28 17       	cp	r18, r24
    2674:	39 07       	cpc	r19, r25
    2676:	19 f5       	brne	.+70     	; 0x26be <Sos_Delete_Task+0x86>
		{
			sys_tasks[check_ID_counter].fptr_Task=NULL;
    2678:	89 81       	ldd	r24, Y+1	; 0x01
    267a:	88 2f       	mov	r24, r24
    267c:	90 e0       	ldi	r25, 0x00	; 0
    267e:	88 0f       	add	r24, r24
    2680:	99 1f       	adc	r25, r25
    2682:	9c 01       	movw	r18, r24
    2684:	22 0f       	add	r18, r18
    2686:	33 1f       	adc	r19, r19
    2688:	22 0f       	add	r18, r18
    268a:	33 1f       	adc	r19, r19
    268c:	82 0f       	add	r24, r18
    268e:	93 1f       	adc	r25, r19
    2690:	fc 01       	movw	r30, r24
    2692:	e4 58       	subi	r30, 0x84	; 132
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	11 82       	std	Z+1, r1	; 0x01
    2698:	10 82       	st	Z, r1
			sys_tasks[check_ID_counter].Task_State=DELETED;
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	88 2f       	mov	r24, r24
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	88 0f       	add	r24, r24
    26a2:	99 1f       	adc	r25, r25
    26a4:	9c 01       	movw	r18, r24
    26a6:	22 0f       	add	r18, r18
    26a8:	33 1f       	adc	r19, r19
    26aa:	22 0f       	add	r18, r18
    26ac:	33 1f       	adc	r19, r19
    26ae:	82 0f       	add	r24, r18
    26b0:	93 1f       	adc	r25, r19
    26b2:	fc 01       	movw	r30, r24
    26b4:	e5 58       	subi	r30, 0x85	; 133
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	83 e0       	ldi	r24, 0x03	; 3
    26ba:	80 83       	st	Z, r24
    26bc:	06 c0       	rjmp	.+12     	; 0x26ca <Sos_Delete_Task+0x92>
 * Return		 : void
 **************************************************************************/
void Sos_Delete_Task(uint16 ID_of_Task)
{
	uint8 check_ID_counter;
	for(check_ID_counter=0;check_ID_counter<no_tasks;check_ID_counter++)
    26be:	89 81       	ldd	r24, Y+1	; 0x01
    26c0:	8f 5f       	subi	r24, 0xFF	; 255
    26c2:	89 83       	std	Y+1, r24	; 0x01
    26c4:	89 81       	ldd	r24, Y+1	; 0x01
    26c6:	86 30       	cpi	r24, 0x06	; 6
    26c8:	08 f2       	brcs	.-126    	; 0x264c <Sos_Delete_Task+0x14>
			sys_tasks[check_ID_counter].fptr_Task=NULL;
			sys_tasks[check_ID_counter].Task_State=DELETED;
			break;
		}
	}
}
    26ca:	0f 90       	pop	r0
    26cc:	0f 90       	pop	r0
    26ce:	0f 90       	pop	r0
    26d0:	cf 91       	pop	r28
    26d2:	df 91       	pop	r29
    26d4:	08 95       	ret

000026d6 <CallbackfromTimer>:
 * OUTPUTS 		 : void
 *
 * Return		 : void
 **************************************************************************/
void CallbackfromTimer(void)
{
    26d6:	ef 92       	push	r14
    26d8:	ff 92       	push	r15
    26da:	0f 93       	push	r16
    26dc:	1f 93       	push	r17
    26de:	df 93       	push	r29
    26e0:	cf 93       	push	r28
    26e2:	cd b7       	in	r28, 0x3d	; 61
    26e4:	de b7       	in	r29, 0x3e	; 62
	//maxprior=0;
	Counter_Flag++;
    26e6:	80 91 69 00 	lds	r24, 0x0069
    26ea:	90 91 6a 00 	lds	r25, 0x006A
    26ee:	a0 91 6b 00 	lds	r26, 0x006B
    26f2:	b0 91 6c 00 	lds	r27, 0x006C
    26f6:	01 96       	adiw	r24, 0x01	; 1
    26f8:	a1 1d       	adc	r26, r1
    26fa:	b1 1d       	adc	r27, r1
    26fc:	80 93 69 00 	sts	0x0069, r24
    2700:	90 93 6a 00 	sts	0x006A, r25
    2704:	a0 93 6b 00 	sts	0x006B, r26
    2708:	b0 93 6c 00 	sts	0x006C, r27
	for( uint16count=0;uint16count<no_tasks;uint16count++)
    270c:	10 92 bd 00 	sts	0x00BD, r1
    2710:	10 92 bc 00 	sts	0x00BC, r1
    2714:	98 c0       	rjmp	.+304    	; 0x2846 <CallbackfromTimer+0x170>
	{
		if(sys_tasks[uint16count].Task_State != DELETED)
    2716:	80 91 bc 00 	lds	r24, 0x00BC
    271a:	90 91 bd 00 	lds	r25, 0x00BD
    271e:	88 0f       	add	r24, r24
    2720:	99 1f       	adc	r25, r25
    2722:	9c 01       	movw	r18, r24
    2724:	22 0f       	add	r18, r18
    2726:	33 1f       	adc	r19, r19
    2728:	22 0f       	add	r18, r18
    272a:	33 1f       	adc	r19, r19
    272c:	82 0f       	add	r24, r18
    272e:	93 1f       	adc	r25, r19
    2730:	fc 01       	movw	r30, r24
    2732:	e5 58       	subi	r30, 0x85	; 133
    2734:	ff 4f       	sbci	r31, 0xFF	; 255
    2736:	80 81       	ld	r24, Z
    2738:	83 30       	cpi	r24, 0x03	; 3
    273a:	09 f4       	brne	.+2      	; 0x273e <CallbackfromTimer+0x68>
    273c:	7b c0       	rjmp	.+246    	; 0x2834 <CallbackfromTimer+0x15e>
		{
			if((Counter_Flag%sys_tasks[uint16count].u16periodicity) == 0u)
    273e:	e0 90 69 00 	lds	r14, 0x0069
    2742:	f0 90 6a 00 	lds	r15, 0x006A
    2746:	00 91 6b 00 	lds	r16, 0x006B
    274a:	10 91 6c 00 	lds	r17, 0x006C
    274e:	80 91 bc 00 	lds	r24, 0x00BC
    2752:	90 91 bd 00 	lds	r25, 0x00BD
    2756:	88 0f       	add	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	9c 01       	movw	r18, r24
    275c:	22 0f       	add	r18, r18
    275e:	33 1f       	adc	r19, r19
    2760:	22 0f       	add	r18, r18
    2762:	33 1f       	adc	r19, r19
    2764:	82 0f       	add	r24, r18
    2766:	93 1f       	adc	r25, r19
    2768:	fc 01       	movw	r30, r24
    276a:	eb 58       	subi	r30, 0x8B	; 139
    276c:	ff 4f       	sbci	r31, 0xFF	; 255
    276e:	80 81       	ld	r24, Z
    2770:	91 81       	ldd	r25, Z+1	; 0x01
    2772:	9c 01       	movw	r18, r24
    2774:	40 e0       	ldi	r20, 0x00	; 0
    2776:	50 e0       	ldi	r21, 0x00	; 0
    2778:	c8 01       	movw	r24, r16
    277a:	b7 01       	movw	r22, r14
    277c:	0e 94 d3 15 	call	0x2ba6	; 0x2ba6 <__udivmodsi4>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	00 97       	sbiw	r24, 0x00	; 0
    2786:	a1 05       	cpc	r26, r1
    2788:	b1 05       	cpc	r27, r1
    278a:	09 f0       	breq	.+2      	; 0x278e <CallbackfromTimer+0xb8>
    278c:	41 c0       	rjmp	.+130    	; 0x2810 <CallbackfromTimer+0x13a>
			{
				sys_tasks[uint16count].Task_State=READY;
    278e:	80 91 bc 00 	lds	r24, 0x00BC
    2792:	90 91 bd 00 	lds	r25, 0x00BD
    2796:	88 0f       	add	r24, r24
    2798:	99 1f       	adc	r25, r25
    279a:	9c 01       	movw	r18, r24
    279c:	22 0f       	add	r18, r18
    279e:	33 1f       	adc	r19, r19
    27a0:	22 0f       	add	r18, r18
    27a2:	33 1f       	adc	r19, r19
    27a4:	82 0f       	add	r24, r18
    27a6:	93 1f       	adc	r25, r19
    27a8:	fc 01       	movw	r30, r24
    27aa:	e5 58       	subi	r30, 0x85	; 133
    27ac:	ff 4f       	sbci	r31, 0xFF	; 255
    27ae:	10 82       	st	Z, r1
				if(sys_tasks[uint16count].u16priority>maxprior)
    27b0:	80 91 bc 00 	lds	r24, 0x00BC
    27b4:	90 91 bd 00 	lds	r25, 0x00BD
    27b8:	88 0f       	add	r24, r24
    27ba:	99 1f       	adc	r25, r25
    27bc:	9c 01       	movw	r18, r24
    27be:	22 0f       	add	r18, r18
    27c0:	33 1f       	adc	r19, r19
    27c2:	22 0f       	add	r18, r18
    27c4:	33 1f       	adc	r19, r19
    27c6:	82 0f       	add	r24, r18
    27c8:	93 1f       	adc	r25, r19
    27ca:	fc 01       	movw	r30, r24
    27cc:	e9 58       	subi	r30, 0x89	; 137
    27ce:	ff 4f       	sbci	r31, 0xFF	; 255
    27d0:	20 81       	ld	r18, Z
    27d2:	31 81       	ldd	r19, Z+1	; 0x01
    27d4:	80 91 6e 00 	lds	r24, 0x006E
    27d8:	90 91 6f 00 	lds	r25, 0x006F
    27dc:	82 17       	cp	r24, r18
    27de:	93 07       	cpc	r25, r19
    27e0:	48 f5       	brcc	.+82     	; 0x2834 <CallbackfromTimer+0x15e>
				{
					maxprior=sys_tasks[uint16count].u16priority;
    27e2:	80 91 bc 00 	lds	r24, 0x00BC
    27e6:	90 91 bd 00 	lds	r25, 0x00BD
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	9c 01       	movw	r18, r24
    27f0:	22 0f       	add	r18, r18
    27f2:	33 1f       	adc	r19, r19
    27f4:	22 0f       	add	r18, r18
    27f6:	33 1f       	adc	r19, r19
    27f8:	82 0f       	add	r24, r18
    27fa:	93 1f       	adc	r25, r19
    27fc:	fc 01       	movw	r30, r24
    27fe:	e9 58       	subi	r30, 0x89	; 137
    2800:	ff 4f       	sbci	r31, 0xFF	; 255
    2802:	80 81       	ld	r24, Z
    2804:	91 81       	ldd	r25, Z+1	; 0x01
    2806:	90 93 6f 00 	sts	0x006F, r25
    280a:	80 93 6e 00 	sts	0x006E, r24
    280e:	12 c0       	rjmp	.+36     	; 0x2834 <CallbackfromTimer+0x15e>
				}
			}
			else
			{
				sys_tasks[uint16count].Task_State=WAITING;
    2810:	80 91 bc 00 	lds	r24, 0x00BC
    2814:	90 91 bd 00 	lds	r25, 0x00BD
    2818:	88 0f       	add	r24, r24
    281a:	99 1f       	adc	r25, r25
    281c:	9c 01       	movw	r18, r24
    281e:	22 0f       	add	r18, r18
    2820:	33 1f       	adc	r19, r19
    2822:	22 0f       	add	r18, r18
    2824:	33 1f       	adc	r19, r19
    2826:	82 0f       	add	r24, r18
    2828:	93 1f       	adc	r25, r19
    282a:	fc 01       	movw	r30, r24
    282c:	e5 58       	subi	r30, 0x85	; 133
    282e:	ff 4f       	sbci	r31, 0xFF	; 255
    2830:	82 e0       	ldi	r24, 0x02	; 2
    2832:	80 83       	st	Z, r24
 **************************************************************************/
void CallbackfromTimer(void)
{
	//maxprior=0;
	Counter_Flag++;
	for( uint16count=0;uint16count<no_tasks;uint16count++)
    2834:	80 91 bc 00 	lds	r24, 0x00BC
    2838:	90 91 bd 00 	lds	r25, 0x00BD
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	90 93 bd 00 	sts	0x00BD, r25
    2842:	80 93 bc 00 	sts	0x00BC, r24
    2846:	80 91 bc 00 	lds	r24, 0x00BC
    284a:	90 91 bd 00 	lds	r25, 0x00BD
    284e:	86 30       	cpi	r24, 0x06	; 6
    2850:	91 05       	cpc	r25, r1
    2852:	08 f4       	brcc	.+2      	; 0x2856 <CallbackfromTimer+0x180>
    2854:	60 cf       	rjmp	.-320    	; 0x2716 <CallbackfromTimer+0x40>
			{
				sys_tasks[uint16count].Task_State=WAITING;
			}
		}
	}
}
    2856:	cf 91       	pop	r28
    2858:	df 91       	pop	r29
    285a:	1f 91       	pop	r17
    285c:	0f 91       	pop	r16
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	08 95       	ret

00002864 <CPU_Sleep>:


void CPU_Sleep(void)/*CPU Sleep function*/
{
    2864:	df 93       	push	r29
    2866:	cf 93       	push	r28
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(MCUCR,SE);	/*set the SE bit in MCUCSR Register to enable sleep mode*/
    286c:	a5 e5       	ldi	r26, 0x55	; 85
    286e:	b0 e0       	ldi	r27, 0x00	; 0
    2870:	e5 e5       	ldi	r30, 0x55	; 85
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z
    2876:	80 68       	ori	r24, 0x80	; 128
    2878:	8c 93       	st	X, r24
	Clr_Bit(MCUCR,SM0);/*IDLE mode*/
    287a:	a5 e5       	ldi	r26, 0x55	; 85
    287c:	b0 e0       	ldi	r27, 0x00	; 0
    287e:	e5 e5       	ldi	r30, 0x55	; 85
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	8f 7e       	andi	r24, 0xEF	; 239
    2886:	8c 93       	st	X, r24
	Clr_Bit(MCUCR,SM1);
    2888:	a5 e5       	ldi	r26, 0x55	; 85
    288a:	b0 e0       	ldi	r27, 0x00	; 0
    288c:	e5 e5       	ldi	r30, 0x55	; 85
    288e:	f0 e0       	ldi	r31, 0x00	; 0
    2890:	80 81       	ld	r24, Z
    2892:	8f 7d       	andi	r24, 0xDF	; 223
    2894:	8c 93       	st	X, r24
	Clr_Bit(MCUCR,SM2);
    2896:	a5 e5       	ldi	r26, 0x55	; 85
    2898:	b0 e0       	ldi	r27, 0x00	; 0
    289a:	e5 e5       	ldi	r30, 0x55	; 85
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	8f 7b       	andi	r24, 0xBF	; 191
    28a2:	8c 93       	st	X, r24
}
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <Timer0_init>:

static void(*CallBack2)(void)=NULL;
/*************************************************************/
		/*timer0 initial*/
void Timer0_init(void(*CallBack)(void))
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <Timer0_init+0x6>
    28b0:	cd b7       	in	r28, 0x3d	; 61
    28b2:	de b7       	in	r29, 0x3e	; 62
    28b4:	9a 83       	std	Y+2, r25	; 0x02
    28b6:	89 83       	std	Y+1, r24	; 0x01
    TCCR0 |= (1 << CS00); /*prescaler=64*/
    28b8:	a3 e5       	ldi	r26, 0x53	; 83
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	e3 e5       	ldi	r30, 0x53	; 83
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	81 60       	ori	r24, 0x01	; 1
    28c4:	8c 93       	st	X, r24
    TCCR0 |= (1 << CS01);
    28c6:	a3 e5       	ldi	r26, 0x53	; 83
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e3 e5       	ldi	r30, 0x53	; 83
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	82 60       	ori	r24, 0x02	; 2
    28d2:	8c 93       	st	X, r24
    CallBack2=CallBack;
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	90 93 72 00 	sts	0x0072, r25
    28dc:	80 93 71 00 	sts	0x0071, r24

}
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <Timer0_Set_TCNT0>:

/*************************************************************/
		/*timer0 set TCNT0*/
void Timer0_Set_TCNT0(uint8 value)
{
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	0f 92       	push	r0
    28f0:	cd b7       	in	r28, 0x3d	; 61
    28f2:	de b7       	in	r29, 0x3e	; 62
    28f4:	89 83       	std	Y+1, r24	; 0x01
    TCNT0 = value;
    28f6:	e2 e5       	ldi	r30, 0x52	; 82
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	80 83       	st	Z, r24
}
    28fe:	0f 90       	pop	r0
    2900:	cf 91       	pop	r28
    2902:	df 91       	pop	r29
    2904:	08 95       	ret

00002906 <Timer0_Set_OCR0>:
/*************************************************************/
		/*timer0 set OCR0*/
void Timer0_Set_OCR0(uint8 value)
{
    2906:	df 93       	push	r29
    2908:	cf 93       	push	r28
    290a:	0f 92       	push	r0
    290c:	cd b7       	in	r28, 0x3d	; 61
    290e:	de b7       	in	r29, 0x3e	; 62
    2910:	89 83       	std	Y+1, r24	; 0x01
    OCR0 = value;
    2912:	ec e5       	ldi	r30, 0x5C	; 92
    2914:	f0 e0       	ldi	r31, 0x00	; 0
    2916:	89 81       	ldd	r24, Y+1	; 0x01
    2918:	80 83       	st	Z, r24
}
    291a:	0f 90       	pop	r0
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	08 95       	ret

00002922 <timer_delay>:

/*************************************************************/
		/*timer0 delay*/
void timer_delay(uint32 n)
{
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	cd b7       	in	r28, 0x3d	; 61
    2928:	de b7       	in	r29, 0x3e	; 62
    292a:	28 97       	sbiw	r28, 0x08	; 8
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	6d 83       	std	Y+5, r22	; 0x05
    2938:	7e 83       	std	Y+6, r23	; 0x06
    293a:	8f 83       	std	Y+7, r24	; 0x07
    293c:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	OCR0=249;
    293e:	ec e5       	ldi	r30, 0x5C	; 92
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	89 ef       	ldi	r24, 0xF9	; 249
    2944:	80 83       	st	Z, r24
	TCNT0=0;
    2946:	e2 e5       	ldi	r30, 0x52	; 82
    2948:	f0 e0       	ldi	r31, 0x00	; 0
    294a:	10 82       	st	Z, r1
	for(i=0;i<n/2;i++)
    294c:	19 82       	std	Y+1, r1	; 0x01
    294e:	1a 82       	std	Y+2, r1	; 0x02
    2950:	1b 82       	std	Y+3, r1	; 0x03
    2952:	1c 82       	std	Y+4, r1	; 0x04
    2954:	1b c0       	rjmp	.+54     	; 0x298c <timer_delay+0x6a>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
    2956:	e8 e5       	ldi	r30, 0x58	; 88
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	81 70       	andi	r24, 0x01	; 1
    2962:	90 70       	andi	r25, 0x00	; 0
    2964:	00 97       	sbiw	r24, 0x00	; 0
    2966:	b9 f3       	breq	.-18     	; 0x2956 <timer_delay+0x34>
		Set_Bit(TIFR,OCF0);
    2968:	a8 e5       	ldi	r26, 0x58	; 88
    296a:	b0 e0       	ldi	r27, 0x00	; 0
    296c:	e8 e5       	ldi	r30, 0x58	; 88
    296e:	f0 e0       	ldi	r31, 0x00	; 0
    2970:	80 81       	ld	r24, Z
    2972:	82 60       	ori	r24, 0x02	; 2
    2974:	8c 93       	st	X, r24
void timer_delay(uint32 n)
{
	uint32 i;
	OCR0=249;
	TCNT0=0;
	for(i=0;i<n/2;i++)
    2976:	89 81       	ldd	r24, Y+1	; 0x01
    2978:	9a 81       	ldd	r25, Y+2	; 0x02
    297a:	ab 81       	ldd	r26, Y+3	; 0x03
    297c:	bc 81       	ldd	r27, Y+4	; 0x04
    297e:	01 96       	adiw	r24, 0x01	; 1
    2980:	a1 1d       	adc	r26, r1
    2982:	b1 1d       	adc	r27, r1
    2984:	89 83       	std	Y+1, r24	; 0x01
    2986:	9a 83       	std	Y+2, r25	; 0x02
    2988:	ab 83       	std	Y+3, r26	; 0x03
    298a:	bc 83       	std	Y+4, r27	; 0x04
    298c:	8d 81       	ldd	r24, Y+5	; 0x05
    298e:	9e 81       	ldd	r25, Y+6	; 0x06
    2990:	af 81       	ldd	r26, Y+7	; 0x07
    2992:	b8 85       	ldd	r27, Y+8	; 0x08
    2994:	9c 01       	movw	r18, r24
    2996:	ad 01       	movw	r20, r26
    2998:	56 95       	lsr	r21
    299a:	47 95       	ror	r20
    299c:	37 95       	ror	r19
    299e:	27 95       	ror	r18
    29a0:	89 81       	ldd	r24, Y+1	; 0x01
    29a2:	9a 81       	ldd	r25, Y+2	; 0x02
    29a4:	ab 81       	ldd	r26, Y+3	; 0x03
    29a6:	bc 81       	ldd	r27, Y+4	; 0x04
    29a8:	82 17       	cp	r24, r18
    29aa:	93 07       	cpc	r25, r19
    29ac:	a4 07       	cpc	r26, r20
    29ae:	b5 07       	cpc	r27, r21
    29b0:	90 f2       	brcs	.-92     	; 0x2956 <timer_delay+0x34>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
		Set_Bit(TIFR,OCF0);
	}

}
    29b2:	28 96       	adiw	r28, 0x08	; 8
    29b4:	0f b6       	in	r0, 0x3f	; 63
    29b6:	f8 94       	cli
    29b8:	de bf       	out	0x3e, r29	; 62
    29ba:	0f be       	out	0x3f, r0	; 63
    29bc:	cd bf       	out	0x3d, r28	; 61
    29be:	cf 91       	pop	r28
    29c0:	df 91       	pop	r29
    29c2:	08 95       	ret

000029c4 <Timer0_Deinit>:

/*************************************************************/
		/*timer0 Deinit*/
void Timer0_Deinit(void)
{
    29c4:	df 93       	push	r29
    29c6:	cf 93       	push	r28
    29c8:	cd b7       	in	r28, 0x3d	; 61
    29ca:	de b7       	in	r29, 0x3e	; 62
	Clr_Bit(TCCR0,CS00);
    29cc:	a3 e5       	ldi	r26, 0x53	; 83
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	e3 e5       	ldi	r30, 0x53	; 83
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	8e 7f       	andi	r24, 0xFE	; 254
    29d8:	8c 93       	st	X, r24
	Clr_Bit(TCCR0,CS01);
    29da:	a3 e5       	ldi	r26, 0x53	; 83
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	e3 e5       	ldi	r30, 0x53	; 83
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	8d 7f       	andi	r24, 0xFD	; 253
    29e6:	8c 93       	st	X, r24
	Clr_Bit(TCCR0,CS02);
    29e8:	a3 e5       	ldi	r26, 0x53	; 83
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	e3 e5       	ldi	r30, 0x53	; 83
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	8b 7f       	andi	r24, 0xFB	; 251
    29f4:	8c 93       	st	X, r24
}
    29f6:	cf 91       	pop	r28
    29f8:	df 91       	pop	r29
    29fa:	08 95       	ret

000029fc <Timer0_Input_capture_Interrupt_Enable>:

/*************************************************************/
		/*timer0 Input_capture_Interrupt_Enable*/
void Timer0_Input_capture_Interrupt_Enable(void)
{
    29fc:	df 93       	push	r29
    29fe:	cf 93       	push	r28
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(TIMSK,OCIE0);
    2a04:	a9 e5       	ldi	r26, 0x59	; 89
    2a06:	b0 e0       	ldi	r27, 0x00	; 0
    2a08:	e9 e5       	ldi	r30, 0x59	; 89
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	80 81       	ld	r24, Z
    2a0e:	82 60       	ori	r24, 0x02	; 2
    2a10:	8c 93       	st	X, r24
}
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <__vector_10>:
/*****************************************************************/
					/*ISR Compare match*/
void __vector_10(void) __attribute__((signal,__INTR_ATTRS));
void __vector_10(void)
{
    2a18:	1f 92       	push	r1
    2a1a:	0f 92       	push	r0
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	0f 92       	push	r0
    2a20:	11 24       	eor	r1, r1
    2a22:	2f 93       	push	r18
    2a24:	3f 93       	push	r19
    2a26:	4f 93       	push	r20
    2a28:	5f 93       	push	r21
    2a2a:	6f 93       	push	r22
    2a2c:	7f 93       	push	r23
    2a2e:	8f 93       	push	r24
    2a30:	9f 93       	push	r25
    2a32:	af 93       	push	r26
    2a34:	bf 93       	push	r27
    2a36:	ef 93       	push	r30
    2a38:	ff 93       	push	r31
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
	Timer0_Set_TCNT0(0);
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	0e 94 75 14 	call	0x28ea	; 0x28ea <Timer0_Set_TCNT0>
	CallBack2();
    2a48:	e0 91 71 00 	lds	r30, 0x0071
    2a4c:	f0 91 72 00 	lds	r31, 0x0072
    2a50:	09 95       	icall
}
    2a52:	cf 91       	pop	r28
    2a54:	df 91       	pop	r29
    2a56:	ff 91       	pop	r31
    2a58:	ef 91       	pop	r30
    2a5a:	bf 91       	pop	r27
    2a5c:	af 91       	pop	r26
    2a5e:	9f 91       	pop	r25
    2a60:	8f 91       	pop	r24
    2a62:	7f 91       	pop	r23
    2a64:	6f 91       	pop	r22
    2a66:	5f 91       	pop	r21
    2a68:	4f 91       	pop	r20
    2a6a:	3f 91       	pop	r19
    2a6c:	2f 91       	pop	r18
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	0f 90       	pop	r0
    2a74:	1f 90       	pop	r1
    2a76:	18 95       	reti

00002a78 <del_ms>:
 *      Author: Hossam-PC
 */
#include "del.h"

void del_ms(uint32 x)
{
    2a78:	df 93       	push	r29
    2a7a:	cf 93       	push	r28
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	2c 97       	sbiw	r28, 0x0c	; 12
    2a82:	0f b6       	in	r0, 0x3f	; 63
    2a84:	f8 94       	cli
    2a86:	de bf       	out	0x3e, r29	; 62
    2a88:	0f be       	out	0x3f, r0	; 63
    2a8a:	cd bf       	out	0x3d, r28	; 61
    2a8c:	69 87       	std	Y+9, r22	; 0x09
    2a8e:	7a 87       	std	Y+10, r23	; 0x0a
    2a90:	8b 87       	std	Y+11, r24	; 0x0b
    2a92:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32 i,j;
	for(i=0;i<x;i++)
    2a94:	19 82       	std	Y+1, r1	; 0x01
    2a96:	1a 82       	std	Y+2, r1	; 0x02
    2a98:	1b 82       	std	Y+3, r1	; 0x03
    2a9a:	1c 82       	std	Y+4, r1	; 0x04
    2a9c:	24 c0       	rjmp	.+72     	; 0x2ae6 <del_ms+0x6e>
	{
		for(j=0;j<240;j++);
    2a9e:	1d 82       	std	Y+5, r1	; 0x05
    2aa0:	1e 82       	std	Y+6, r1	; 0x06
    2aa2:	1f 82       	std	Y+7, r1	; 0x07
    2aa4:	18 86       	std	Y+8, r1	; 0x08
    2aa6:	0b c0       	rjmp	.+22     	; 0x2abe <del_ms+0x46>
    2aa8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aaa:	9e 81       	ldd	r25, Y+6	; 0x06
    2aac:	af 81       	ldd	r26, Y+7	; 0x07
    2aae:	b8 85       	ldd	r27, Y+8	; 0x08
    2ab0:	01 96       	adiw	r24, 0x01	; 1
    2ab2:	a1 1d       	adc	r26, r1
    2ab4:	b1 1d       	adc	r27, r1
    2ab6:	8d 83       	std	Y+5, r24	; 0x05
    2ab8:	9e 83       	std	Y+6, r25	; 0x06
    2aba:	af 83       	std	Y+7, r26	; 0x07
    2abc:	b8 87       	std	Y+8, r27	; 0x08
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac2:	af 81       	ldd	r26, Y+7	; 0x07
    2ac4:	b8 85       	ldd	r27, Y+8	; 0x08
    2ac6:	80 3f       	cpi	r24, 0xF0	; 240
    2ac8:	91 05       	cpc	r25, r1
    2aca:	a1 05       	cpc	r26, r1
    2acc:	b1 05       	cpc	r27, r1
    2ace:	60 f3       	brcs	.-40     	; 0x2aa8 <del_ms+0x30>
#include "del.h"

void del_ms(uint32 x)
{
	volatile uint32 i,j;
	for(i=0;i<x;i++)
    2ad0:	89 81       	ldd	r24, Y+1	; 0x01
    2ad2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad4:	ab 81       	ldd	r26, Y+3	; 0x03
    2ad6:	bc 81       	ldd	r27, Y+4	; 0x04
    2ad8:	01 96       	adiw	r24, 0x01	; 1
    2ada:	a1 1d       	adc	r26, r1
    2adc:	b1 1d       	adc	r27, r1
    2ade:	89 83       	std	Y+1, r24	; 0x01
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	ab 83       	std	Y+3, r26	; 0x03
    2ae4:	bc 83       	std	Y+4, r27	; 0x04
    2ae6:	29 81       	ldd	r18, Y+1	; 0x01
    2ae8:	3a 81       	ldd	r19, Y+2	; 0x02
    2aea:	4b 81       	ldd	r20, Y+3	; 0x03
    2aec:	5c 81       	ldd	r21, Y+4	; 0x04
    2aee:	89 85       	ldd	r24, Y+9	; 0x09
    2af0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2af2:	ab 85       	ldd	r26, Y+11	; 0x0b
    2af4:	bc 85       	ldd	r27, Y+12	; 0x0c
    2af6:	28 17       	cp	r18, r24
    2af8:	39 07       	cpc	r19, r25
    2afa:	4a 07       	cpc	r20, r26
    2afc:	5b 07       	cpc	r21, r27
    2afe:	78 f2       	brcs	.-98     	; 0x2a9e <del_ms+0x26>
	{
		for(j=0;j<240;j++);
	}
}
    2b00:	2c 96       	adiw	r28, 0x0c	; 12
    2b02:	0f b6       	in	r0, 0x3f	; 63
    2b04:	f8 94       	cli
    2b06:	de bf       	out	0x3e, r29	; 62
    2b08:	0f be       	out	0x3f, r0	; 63
    2b0a:	cd bf       	out	0x3d, r28	; 61
    2b0c:	cf 91       	pop	r28
    2b0e:	df 91       	pop	r29
    2b10:	08 95       	ret

00002b12 <main>:
	NO_BUTTON
}ENUMButton_Name;

ENUMButton_Name Button;
int main(void)
{
    2b12:	df 93       	push	r29
    2b14:	cf 93       	push	r28
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
	LCD_Init();
    2b1a:	0e 94 2e 0a 	call	0x145c	; 0x145c <LCD_Init>
	LCD_WriteCharacter('K');
    2b1e:	8b e4       	ldi	r24, 0x4B	; 75
    2b20:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <LCD_WriteCharacter>
	LCD_WriteInteger(4);
    2b24:	64 e0       	ldi	r22, 0x04	; 4
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	80 e0       	ldi	r24, 0x00	; 0
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	0e 94 c3 10 	call	0x2186	; 0x2186 <LCD_WriteInteger>
    2b30:	ff cf       	rjmp	.-2      	; 0x2b30 <main+0x1e>

00002b32 <get_key>:
	}
	return 0;
}

void get_key(void)
{
    2b32:	df 93       	push	r29
    2b34:	cf 93       	push	r28
    2b36:	cd b7       	in	r28, 0x3d	; 61
    2b38:	de b7       	in	r29, 0x3e	; 62
	if(Kyp_getPressedButton(&Button_pressed)==PRESSED)
    2b3a:	83 e7       	ldi	r24, 0x73	; 115
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	0e 94 9d 09 	call	0x133a	; 0x133a <Kyp_getPressedButton>
    2b42:	82 30       	cpi	r24, 0x02	; 2
    2b44:	71 f4       	brne	.+28     	; 0x2b62 <get_key+0x30>
	{
		if(Button_pressed==1)
    2b46:	80 91 73 00 	lds	r24, 0x0073
    2b4a:	81 30       	cpi	r24, 0x01	; 1
    2b4c:	19 f4       	brne	.+6      	; 0x2b54 <get_key+0x22>
		{
			Button=YES_BUTTON;
    2b4e:	10 92 be 00 	sts	0x00BE, r1
    2b52:	07 c0       	rjmp	.+14     	; 0x2b62 <get_key+0x30>
		}
		else if(Button_pressed==2)
    2b54:	80 91 73 00 	lds	r24, 0x0073
    2b58:	82 30       	cpi	r24, 0x02	; 2
    2b5a:	19 f4       	brne	.+6      	; 0x2b62 <get_key+0x30>
		{
			Button=NO_BUTTON;
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	80 93 be 00 	sts	0x00BE, r24
		}
	}
}
    2b62:	cf 91       	pop	r28
    2b64:	df 91       	pop	r29
    2b66:	08 95       	ret

00002b68 <__mulsi3>:
    2b68:	62 9f       	mul	r22, r18
    2b6a:	d0 01       	movw	r26, r0
    2b6c:	73 9f       	mul	r23, r19
    2b6e:	f0 01       	movw	r30, r0
    2b70:	82 9f       	mul	r24, r18
    2b72:	e0 0d       	add	r30, r0
    2b74:	f1 1d       	adc	r31, r1
    2b76:	64 9f       	mul	r22, r20
    2b78:	e0 0d       	add	r30, r0
    2b7a:	f1 1d       	adc	r31, r1
    2b7c:	92 9f       	mul	r25, r18
    2b7e:	f0 0d       	add	r31, r0
    2b80:	83 9f       	mul	r24, r19
    2b82:	f0 0d       	add	r31, r0
    2b84:	74 9f       	mul	r23, r20
    2b86:	f0 0d       	add	r31, r0
    2b88:	65 9f       	mul	r22, r21
    2b8a:	f0 0d       	add	r31, r0
    2b8c:	99 27       	eor	r25, r25
    2b8e:	72 9f       	mul	r23, r18
    2b90:	b0 0d       	add	r27, r0
    2b92:	e1 1d       	adc	r30, r1
    2b94:	f9 1f       	adc	r31, r25
    2b96:	63 9f       	mul	r22, r19
    2b98:	b0 0d       	add	r27, r0
    2b9a:	e1 1d       	adc	r30, r1
    2b9c:	f9 1f       	adc	r31, r25
    2b9e:	bd 01       	movw	r22, r26
    2ba0:	cf 01       	movw	r24, r30
    2ba2:	11 24       	eor	r1, r1
    2ba4:	08 95       	ret

00002ba6 <__udivmodsi4>:
    2ba6:	a1 e2       	ldi	r26, 0x21	; 33
    2ba8:	1a 2e       	mov	r1, r26
    2baa:	aa 1b       	sub	r26, r26
    2bac:	bb 1b       	sub	r27, r27
    2bae:	fd 01       	movw	r30, r26
    2bb0:	0d c0       	rjmp	.+26     	; 0x2bcc <__udivmodsi4_ep>

00002bb2 <__udivmodsi4_loop>:
    2bb2:	aa 1f       	adc	r26, r26
    2bb4:	bb 1f       	adc	r27, r27
    2bb6:	ee 1f       	adc	r30, r30
    2bb8:	ff 1f       	adc	r31, r31
    2bba:	a2 17       	cp	r26, r18
    2bbc:	b3 07       	cpc	r27, r19
    2bbe:	e4 07       	cpc	r30, r20
    2bc0:	f5 07       	cpc	r31, r21
    2bc2:	20 f0       	brcs	.+8      	; 0x2bcc <__udivmodsi4_ep>
    2bc4:	a2 1b       	sub	r26, r18
    2bc6:	b3 0b       	sbc	r27, r19
    2bc8:	e4 0b       	sbc	r30, r20
    2bca:	f5 0b       	sbc	r31, r21

00002bcc <__udivmodsi4_ep>:
    2bcc:	66 1f       	adc	r22, r22
    2bce:	77 1f       	adc	r23, r23
    2bd0:	88 1f       	adc	r24, r24
    2bd2:	99 1f       	adc	r25, r25
    2bd4:	1a 94       	dec	r1
    2bd6:	69 f7       	brne	.-38     	; 0x2bb2 <__udivmodsi4_loop>
    2bd8:	60 95       	com	r22
    2bda:	70 95       	com	r23
    2bdc:	80 95       	com	r24
    2bde:	90 95       	com	r25
    2be0:	9b 01       	movw	r18, r22
    2be2:	ac 01       	movw	r20, r24
    2be4:	bd 01       	movw	r22, r26
    2be6:	cf 01       	movw	r24, r30
    2be8:	08 95       	ret

00002bea <__prologue_saves__>:
    2bea:	2f 92       	push	r2
    2bec:	3f 92       	push	r3
    2bee:	4f 92       	push	r4
    2bf0:	5f 92       	push	r5
    2bf2:	6f 92       	push	r6
    2bf4:	7f 92       	push	r7
    2bf6:	8f 92       	push	r8
    2bf8:	9f 92       	push	r9
    2bfa:	af 92       	push	r10
    2bfc:	bf 92       	push	r11
    2bfe:	cf 92       	push	r12
    2c00:	df 92       	push	r13
    2c02:	ef 92       	push	r14
    2c04:	ff 92       	push	r15
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	ca 1b       	sub	r28, r26
    2c14:	db 0b       	sbc	r29, r27
    2c16:	0f b6       	in	r0, 0x3f	; 63
    2c18:	f8 94       	cli
    2c1a:	de bf       	out	0x3e, r29	; 62
    2c1c:	0f be       	out	0x3f, r0	; 63
    2c1e:	cd bf       	out	0x3d, r28	; 61
    2c20:	09 94       	ijmp

00002c22 <__epilogue_restores__>:
    2c22:	2a 88       	ldd	r2, Y+18	; 0x12
    2c24:	39 88       	ldd	r3, Y+17	; 0x11
    2c26:	48 88       	ldd	r4, Y+16	; 0x10
    2c28:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c2a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c2c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c2e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c30:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c32:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c34:	b9 84       	ldd	r11, Y+9	; 0x09
    2c36:	c8 84       	ldd	r12, Y+8	; 0x08
    2c38:	df 80       	ldd	r13, Y+7	; 0x07
    2c3a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c3c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c3e:	0c 81       	ldd	r16, Y+4	; 0x04
    2c40:	1b 81       	ldd	r17, Y+3	; 0x03
    2c42:	aa 81       	ldd	r26, Y+2	; 0x02
    2c44:	b9 81       	ldd	r27, Y+1	; 0x01
    2c46:	ce 0f       	add	r28, r30
    2c48:	d1 1d       	adc	r29, r1
    2c4a:	0f b6       	in	r0, 0x3f	; 63
    2c4c:	f8 94       	cli
    2c4e:	de bf       	out	0x3e, r29	; 62
    2c50:	0f be       	out	0x3f, r0	; 63
    2c52:	cd bf       	out	0x3d, r28	; 61
    2c54:	ed 01       	movw	r28, r26
    2c56:	08 95       	ret

00002c58 <_exit>:
    2c58:	f8 94       	cli

00002c5a <__stop_program>:
    2c5a:	ff cf       	rjmp	.-2      	; 0x2c5a <__stop_program>
