
test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000832  2**0
                  ALLOC
  2 .stab         00000d5c  00000000  00000000  00000834  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000009c0  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 49 03 	call	0x692	; 0x692 <main>
  74:	0c 94 dd 03 	jmp	0x7ba	; 0x7ba <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_WritePin>:
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	00 d0       	rcall	.+0      	; 0x82 <DIO_WritePin+0x6>
  82:	cd b7       	in	r28, 0x3d	; 61
  84:	de b7       	in	r29, 0x3e	; 62
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	6a 83       	std	Y+2, r22	; 0x02
  8a:	8a 81       	ldd	r24, Y+2	; 0x02
  8c:	88 23       	and	r24, r24
  8e:	09 f0       	breq	.+2      	; 0x92 <DIO_WritePin+0x16>
  90:	74 c0       	rjmp	.+232    	; 0x17a <DIO_WritePin+0xfe>
  92:	89 81       	ldd	r24, Y+1	; 0x01
  94:	88 30       	cpi	r24, 0x08	; 8
  96:	a8 f4       	brcc	.+42     	; 0xc2 <DIO_WritePin+0x46>
  98:	ab e3       	ldi	r26, 0x3B	; 59
  9a:	b0 e0       	ldi	r27, 0x00	; 0
  9c:	eb e3       	ldi	r30, 0x3B	; 59
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	48 2f       	mov	r20, r24
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	28 2f       	mov	r18, r24
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	81 e0       	ldi	r24, 0x01	; 1
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	02 2e       	mov	r0, r18
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_WritePin+0x3a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	0a 94       	dec	r0
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_WritePin+0x36>
  ba:	80 95       	com	r24
  bc:	84 23       	and	r24, r20
  be:	8c 93       	st	X, r24
  c0:	cd c0       	rjmp	.+410    	; 0x25c <DIO_WritePin+0x1e0>
  c2:	89 81       	ldd	r24, Y+1	; 0x01
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	d8 f0       	brcs	.+54     	; 0xfe <DIO_WritePin+0x82>
  c8:	89 81       	ldd	r24, Y+1	; 0x01
  ca:	80 31       	cpi	r24, 0x10	; 16
  cc:	c0 f4       	brcc	.+48     	; 0xfe <DIO_WritePin+0x82>
  ce:	a8 e3       	ldi	r26, 0x38	; 56
  d0:	b0 e0       	ldi	r27, 0x00	; 0
  d2:	e8 e3       	ldi	r30, 0x38	; 56
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	48 2f       	mov	r20, r24
  da:	89 81       	ldd	r24, Y+1	; 0x01
  dc:	88 2f       	mov	r24, r24
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	9c 01       	movw	r18, r24
  e2:	28 50       	subi	r18, 0x08	; 8
  e4:	30 40       	sbci	r19, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <DIO_WritePin+0x76>
  ee:	88 0f       	add	r24, r24
  f0:	99 1f       	adc	r25, r25
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <DIO_WritePin+0x72>
  f6:	80 95       	com	r24
  f8:	84 23       	and	r24, r20
  fa:	8c 93       	st	X, r24
  fc:	af c0       	rjmp	.+350    	; 0x25c <DIO_WritePin+0x1e0>
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	80 31       	cpi	r24, 0x10	; 16
 102:	d8 f0       	brcs	.+54     	; 0x13a <DIO_WritePin+0xbe>
 104:	89 81       	ldd	r24, Y+1	; 0x01
 106:	88 31       	cpi	r24, 0x18	; 24
 108:	c0 f4       	brcc	.+48     	; 0x13a <DIO_WritePin+0xbe>
 10a:	a5 e3       	ldi	r26, 0x35	; 53
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e5 e3       	ldi	r30, 0x35	; 53
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	48 2f       	mov	r20, r24
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	9c 01       	movw	r18, r24
 11e:	20 51       	subi	r18, 0x10	; 16
 120:	30 40       	sbci	r19, 0x00	; 0
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	02 2e       	mov	r0, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_WritePin+0xb2>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	0a 94       	dec	r0
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_WritePin+0xae>
 132:	80 95       	com	r24
 134:	84 23       	and	r24, r20
 136:	8c 93       	st	X, r24
 138:	91 c0       	rjmp	.+290    	; 0x25c <DIO_WritePin+0x1e0>
 13a:	89 81       	ldd	r24, Y+1	; 0x01
 13c:	88 31       	cpi	r24, 0x18	; 24
 13e:	08 f4       	brcc	.+2      	; 0x142 <DIO_WritePin+0xc6>
 140:	8d c0       	rjmp	.+282    	; 0x25c <DIO_WritePin+0x1e0>
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	80 32       	cpi	r24, 0x20	; 32
 146:	08 f0       	brcs	.+2      	; 0x14a <DIO_WritePin+0xce>
 148:	89 c0       	rjmp	.+274    	; 0x25c <DIO_WritePin+0x1e0>
 14a:	a2 e3       	ldi	r26, 0x32	; 50
 14c:	b0 e0       	ldi	r27, 0x00	; 0
 14e:	e2 e3       	ldi	r30, 0x32	; 50
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	48 2f       	mov	r20, r24
 156:	89 81       	ldd	r24, Y+1	; 0x01
 158:	88 2f       	mov	r24, r24
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	9c 01       	movw	r18, r24
 15e:	28 51       	subi	r18, 0x18	; 24
 160:	30 40       	sbci	r19, 0x00	; 0
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	02 2e       	mov	r0, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_WritePin+0xf2>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_WritePin+0xee>
 172:	80 95       	com	r24
 174:	84 23       	and	r24, r20
 176:	8c 93       	st	X, r24
 178:	71 c0       	rjmp	.+226    	; 0x25c <DIO_WritePin+0x1e0>
 17a:	8a 81       	ldd	r24, Y+2	; 0x02
 17c:	81 30       	cpi	r24, 0x01	; 1
 17e:	09 f0       	breq	.+2      	; 0x182 <DIO_WritePin+0x106>
 180:	6d c0       	rjmp	.+218    	; 0x25c <DIO_WritePin+0x1e0>
 182:	89 81       	ldd	r24, Y+1	; 0x01
 184:	88 30       	cpi	r24, 0x08	; 8
 186:	a0 f4       	brcc	.+40     	; 0x1b0 <DIO_WritePin+0x134>
 188:	ab e3       	ldi	r26, 0x3B	; 59
 18a:	b0 e0       	ldi	r27, 0x00	; 0
 18c:	eb e3       	ldi	r30, 0x3B	; 59
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	80 81       	ld	r24, Z
 192:	48 2f       	mov	r20, r24
 194:	89 81       	ldd	r24, Y+1	; 0x01
 196:	28 2f       	mov	r18, r24
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	02 2e       	mov	r0, r18
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_WritePin+0x12a>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_WritePin+0x126>
 1aa:	84 2b       	or	r24, r20
 1ac:	8c 93       	st	X, r24
 1ae:	56 c0       	rjmp	.+172    	; 0x25c <DIO_WritePin+0x1e0>
 1b0:	89 81       	ldd	r24, Y+1	; 0x01
 1b2:	88 30       	cpi	r24, 0x08	; 8
 1b4:	d0 f0       	brcs	.+52     	; 0x1ea <DIO_WritePin+0x16e>
 1b6:	89 81       	ldd	r24, Y+1	; 0x01
 1b8:	80 31       	cpi	r24, 0x10	; 16
 1ba:	b8 f4       	brcc	.+46     	; 0x1ea <DIO_WritePin+0x16e>
 1bc:	a8 e3       	ldi	r26, 0x38	; 56
 1be:	b0 e0       	ldi	r27, 0x00	; 0
 1c0:	e8 e3       	ldi	r30, 0x38	; 56
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	80 81       	ld	r24, Z
 1c6:	48 2f       	mov	r20, r24
 1c8:	89 81       	ldd	r24, Y+1	; 0x01
 1ca:	88 2f       	mov	r24, r24
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	9c 01       	movw	r18, r24
 1d0:	28 50       	subi	r18, 0x08	; 8
 1d2:	30 40       	sbci	r19, 0x00	; 0
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 2e       	mov	r0, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_WritePin+0x164>
 1dc:	88 0f       	add	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	0a 94       	dec	r0
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_WritePin+0x160>
 1e4:	84 2b       	or	r24, r20
 1e6:	8c 93       	st	X, r24
 1e8:	39 c0       	rjmp	.+114    	; 0x25c <DIO_WritePin+0x1e0>
 1ea:	89 81       	ldd	r24, Y+1	; 0x01
 1ec:	80 31       	cpi	r24, 0x10	; 16
 1ee:	d0 f0       	brcs	.+52     	; 0x224 <DIO_WritePin+0x1a8>
 1f0:	89 81       	ldd	r24, Y+1	; 0x01
 1f2:	88 31       	cpi	r24, 0x18	; 24
 1f4:	b8 f4       	brcc	.+46     	; 0x224 <DIO_WritePin+0x1a8>
 1f6:	a5 e3       	ldi	r26, 0x35	; 53
 1f8:	b0 e0       	ldi	r27, 0x00	; 0
 1fa:	e5 e3       	ldi	r30, 0x35	; 53
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	48 2f       	mov	r20, r24
 202:	89 81       	ldd	r24, Y+1	; 0x01
 204:	88 2f       	mov	r24, r24
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	9c 01       	movw	r18, r24
 20a:	20 51       	subi	r18, 0x10	; 16
 20c:	30 40       	sbci	r19, 0x00	; 0
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	02 2e       	mov	r0, r18
 214:	02 c0       	rjmp	.+4      	; 0x21a <DIO_WritePin+0x19e>
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	0a 94       	dec	r0
 21c:	e2 f7       	brpl	.-8      	; 0x216 <DIO_WritePin+0x19a>
 21e:	84 2b       	or	r24, r20
 220:	8c 93       	st	X, r24
 222:	1c c0       	rjmp	.+56     	; 0x25c <DIO_WritePin+0x1e0>
 224:	89 81       	ldd	r24, Y+1	; 0x01
 226:	88 31       	cpi	r24, 0x18	; 24
 228:	c8 f0       	brcs	.+50     	; 0x25c <DIO_WritePin+0x1e0>
 22a:	89 81       	ldd	r24, Y+1	; 0x01
 22c:	80 32       	cpi	r24, 0x20	; 32
 22e:	b0 f4       	brcc	.+44     	; 0x25c <DIO_WritePin+0x1e0>
 230:	a2 e3       	ldi	r26, 0x32	; 50
 232:	b0 e0       	ldi	r27, 0x00	; 0
 234:	e2 e3       	ldi	r30, 0x32	; 50
 236:	f0 e0       	ldi	r31, 0x00	; 0
 238:	80 81       	ld	r24, Z
 23a:	48 2f       	mov	r20, r24
 23c:	89 81       	ldd	r24, Y+1	; 0x01
 23e:	88 2f       	mov	r24, r24
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	9c 01       	movw	r18, r24
 244:	28 51       	subi	r18, 0x18	; 24
 246:	30 40       	sbci	r19, 0x00	; 0
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	02 2e       	mov	r0, r18
 24e:	02 c0       	rjmp	.+4      	; 0x254 <DIO_WritePin+0x1d8>
 250:	88 0f       	add	r24, r24
 252:	99 1f       	adc	r25, r25
 254:	0a 94       	dec	r0
 256:	e2 f7       	brpl	.-8      	; 0x250 <DIO_WritePin+0x1d4>
 258:	84 2b       	or	r24, r20
 25a:	8c 93       	st	X, r24
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	cf 91       	pop	r28
 262:	df 91       	pop	r29
 264:	08 95       	ret

00000266 <DIO_ReadPin>:
	}
}


uint8 DIO_ReadPin(uint8 PinNum)
{
 266:	df 93       	push	r29
 268:	cf 93       	push	r28
 26a:	00 d0       	rcall	.+0      	; 0x26c <DIO_ReadPin+0x6>
 26c:	cd b7       	in	r28, 0x3d	; 61
 26e:	de b7       	in	r29, 0x3e	; 62
 270:	8a 83       	std	Y+2, r24	; 0x02
	uint8 res=0;
 272:	19 82       	std	Y+1, r1	; 0x01
	if((PinNum>=0)&&(PinNum<=7))	//PORT A
 274:	8a 81       	ldd	r24, Y+2	; 0x02
 276:	88 30       	cpi	r24, 0x08	; 8
 278:	90 f4       	brcc	.+36     	; 0x29e <DIO_ReadPin+0x38>
	{
		res= Get_Bit(PINA,PinNum);
 27a:	e9 e3       	ldi	r30, 0x39	; 57
 27c:	f0 e0       	ldi	r31, 0x00	; 0
 27e:	80 81       	ld	r24, Z
 280:	48 2f       	mov	r20, r24
 282:	8a 81       	ldd	r24, Y+2	; 0x02
 284:	28 2f       	mov	r18, r24
 286:	30 e0       	ldi	r19, 0x00	; 0
 288:	81 e0       	ldi	r24, 0x01	; 1
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	02 2e       	mov	r0, r18
 28e:	02 c0       	rjmp	.+4      	; 0x294 <DIO_ReadPin+0x2e>
 290:	88 0f       	add	r24, r24
 292:	99 1f       	adc	r25, r25
 294:	0a 94       	dec	r0
 296:	e2 f7       	brpl	.-8      	; 0x290 <DIO_ReadPin+0x2a>
 298:	84 23       	and	r24, r20
 29a:	89 83       	std	Y+1, r24	; 0x01
 29c:	50 c0       	rjmp	.+160    	; 0x33e <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 29e:	8a 81       	ldd	r24, Y+2	; 0x02
 2a0:	88 30       	cpi	r24, 0x08	; 8
 2a2:	c0 f0       	brcs	.+48     	; 0x2d4 <DIO_ReadPin+0x6e>
 2a4:	8a 81       	ldd	r24, Y+2	; 0x02
 2a6:	80 31       	cpi	r24, 0x10	; 16
 2a8:	a8 f4       	brcc	.+42     	; 0x2d4 <DIO_ReadPin+0x6e>
	{
		res= Get_Bit(PINB,(PinNum-8));
 2aa:	e6 e3       	ldi	r30, 0x36	; 54
 2ac:	f0 e0       	ldi	r31, 0x00	; 0
 2ae:	80 81       	ld	r24, Z
 2b0:	48 2f       	mov	r20, r24
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	88 2f       	mov	r24, r24
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	9c 01       	movw	r18, r24
 2ba:	28 50       	subi	r18, 0x08	; 8
 2bc:	30 40       	sbci	r19, 0x00	; 0
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	02 2e       	mov	r0, r18
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_ReadPin+0x64>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	0a 94       	dec	r0
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_ReadPin+0x60>
 2ce:	84 23       	and	r24, r20
 2d0:	89 83       	std	Y+1, r24	; 0x01
 2d2:	35 c0       	rjmp	.+106    	; 0x33e <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	80 31       	cpi	r24, 0x10	; 16
 2d8:	c0 f0       	brcs	.+48     	; 0x30a <DIO_ReadPin+0xa4>
 2da:	8a 81       	ldd	r24, Y+2	; 0x02
 2dc:	88 31       	cpi	r24, 0x18	; 24
 2de:	a8 f4       	brcc	.+42     	; 0x30a <DIO_ReadPin+0xa4>
	{
		res= Get_Bit(PINC,(PinNum-16));
 2e0:	e3 e3       	ldi	r30, 0x33	; 51
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	48 2f       	mov	r20, r24
 2e8:	8a 81       	ldd	r24, Y+2	; 0x02
 2ea:	88 2f       	mov	r24, r24
 2ec:	90 e0       	ldi	r25, 0x00	; 0
 2ee:	9c 01       	movw	r18, r24
 2f0:	20 51       	subi	r18, 0x10	; 16
 2f2:	30 40       	sbci	r19, 0x00	; 0
 2f4:	81 e0       	ldi	r24, 0x01	; 1
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	02 2e       	mov	r0, r18
 2fa:	02 c0       	rjmp	.+4      	; 0x300 <DIO_ReadPin+0x9a>
 2fc:	88 0f       	add	r24, r24
 2fe:	99 1f       	adc	r25, r25
 300:	0a 94       	dec	r0
 302:	e2 f7       	brpl	.-8      	; 0x2fc <DIO_ReadPin+0x96>
 304:	84 23       	and	r24, r20
 306:	89 83       	std	Y+1, r24	; 0x01
 308:	1a c0       	rjmp	.+52     	; 0x33e <DIO_ReadPin+0xd8>
	}
	
	else if((PinNum>=24)&&(PinNum<=31))	//PORT D
 30a:	8a 81       	ldd	r24, Y+2	; 0x02
 30c:	88 31       	cpi	r24, 0x18	; 24
 30e:	b8 f0       	brcs	.+46     	; 0x33e <DIO_ReadPin+0xd8>
 310:	8a 81       	ldd	r24, Y+2	; 0x02
 312:	80 32       	cpi	r24, 0x20	; 32
 314:	a0 f4       	brcc	.+40     	; 0x33e <DIO_ReadPin+0xd8>
	{
		res= Get_Bit(PIND,(PinNum-24));
 316:	e0 e3       	ldi	r30, 0x30	; 48
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	80 81       	ld	r24, Z
 31c:	48 2f       	mov	r20, r24
 31e:	8a 81       	ldd	r24, Y+2	; 0x02
 320:	88 2f       	mov	r24, r24
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	9c 01       	movw	r18, r24
 326:	28 51       	subi	r18, 0x18	; 24
 328:	30 40       	sbci	r19, 0x00	; 0
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 2e       	mov	r0, r18
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_ReadPin+0xd0>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	0a 94       	dec	r0
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_ReadPin+0xcc>
 33a:	84 23       	and	r24, r20
 33c:	89 83       	std	Y+1, r24	; 0x01
	}

	return res;
 33e:	89 81       	ldd	r24, Y+1	; 0x01
	
}
 340:	0f 90       	pop	r0
 342:	0f 90       	pop	r0
 344:	cf 91       	pop	r28
 346:	df 91       	pop	r29
 348:	08 95       	ret

0000034a <DIO_SetPinDirection>:


void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
 34a:	df 93       	push	r29
 34c:	cf 93       	push	r28
 34e:	00 d0       	rcall	.+0      	; 0x350 <DIO_SetPinDirection+0x6>
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
 354:	89 83       	std	Y+1, r24	; 0x01
 356:	6a 83       	std	Y+2, r22	; 0x02
	if(PinDirection==OUTPUT)						//set pin direction high
 358:	8a 81       	ldd	r24, Y+2	; 0x02
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	09 f0       	breq	.+2      	; 0x360 <DIO_SetPinDirection+0x16>
 35e:	70 c0       	rjmp	.+224    	; 0x440 <DIO_SetPinDirection+0xf6>
	{
		if((PinNum>=0)&&(PinNum<=7))	//PORT A
 360:	89 81       	ldd	r24, Y+1	; 0x01
 362:	88 30       	cpi	r24, 0x08	; 8
 364:	a0 f4       	brcc	.+40     	; 0x38e <DIO_SetPinDirection+0x44>
		{
			Set_Bit(DDRA,PinNum);
 366:	aa e3       	ldi	r26, 0x3A	; 58
 368:	b0 e0       	ldi	r27, 0x00	; 0
 36a:	ea e3       	ldi	r30, 0x3A	; 58
 36c:	f0 e0       	ldi	r31, 0x00	; 0
 36e:	80 81       	ld	r24, Z
 370:	48 2f       	mov	r20, r24
 372:	89 81       	ldd	r24, Y+1	; 0x01
 374:	28 2f       	mov	r18, r24
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	90 e0       	ldi	r25, 0x00	; 0
 37c:	02 2e       	mov	r0, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_SetPinDirection+0x3a>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	0a 94       	dec	r0
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_SetPinDirection+0x36>
 388:	84 2b       	or	r24, r20
 38a:	8c 93       	st	X, r24
 38c:	ce c0       	rjmp	.+412    	; 0x52a <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 38e:	89 81       	ldd	r24, Y+1	; 0x01
 390:	88 30       	cpi	r24, 0x08	; 8
 392:	d0 f0       	brcs	.+52     	; 0x3c8 <DIO_SetPinDirection+0x7e>
 394:	89 81       	ldd	r24, Y+1	; 0x01
 396:	80 31       	cpi	r24, 0x10	; 16
 398:	b8 f4       	brcc	.+46     	; 0x3c8 <DIO_SetPinDirection+0x7e>
		{
			Set_Bit(DDRB,(PinNum-8));
 39a:	a7 e3       	ldi	r26, 0x37	; 55
 39c:	b0 e0       	ldi	r27, 0x00	; 0
 39e:	e7 e3       	ldi	r30, 0x37	; 55
 3a0:	f0 e0       	ldi	r31, 0x00	; 0
 3a2:	80 81       	ld	r24, Z
 3a4:	48 2f       	mov	r20, r24
 3a6:	89 81       	ldd	r24, Y+1	; 0x01
 3a8:	88 2f       	mov	r24, r24
 3aa:	90 e0       	ldi	r25, 0x00	; 0
 3ac:	9c 01       	movw	r18, r24
 3ae:	28 50       	subi	r18, 0x08	; 8
 3b0:	30 40       	sbci	r19, 0x00	; 0
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	90 e0       	ldi	r25, 0x00	; 0
 3b6:	02 2e       	mov	r0, r18
 3b8:	02 c0       	rjmp	.+4      	; 0x3be <DIO_SetPinDirection+0x74>
 3ba:	88 0f       	add	r24, r24
 3bc:	99 1f       	adc	r25, r25
 3be:	0a 94       	dec	r0
 3c0:	e2 f7       	brpl	.-8      	; 0x3ba <DIO_SetPinDirection+0x70>
 3c2:	84 2b       	or	r24, r20
 3c4:	8c 93       	st	X, r24
 3c6:	b1 c0       	rjmp	.+354    	; 0x52a <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	80 31       	cpi	r24, 0x10	; 16
 3cc:	d0 f0       	brcs	.+52     	; 0x402 <DIO_SetPinDirection+0xb8>
 3ce:	89 81       	ldd	r24, Y+1	; 0x01
 3d0:	88 31       	cpi	r24, 0x18	; 24
 3d2:	b8 f4       	brcc	.+46     	; 0x402 <DIO_SetPinDirection+0xb8>
		{
			Set_Bit(DDRC,(PinNum-16));
 3d4:	a4 e3       	ldi	r26, 0x34	; 52
 3d6:	b0 e0       	ldi	r27, 0x00	; 0
 3d8:	e4 e3       	ldi	r30, 0x34	; 52
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	80 81       	ld	r24, Z
 3de:	48 2f       	mov	r20, r24
 3e0:	89 81       	ldd	r24, Y+1	; 0x01
 3e2:	88 2f       	mov	r24, r24
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	9c 01       	movw	r18, r24
 3e8:	20 51       	subi	r18, 0x10	; 16
 3ea:	30 40       	sbci	r19, 0x00	; 0
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	02 2e       	mov	r0, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_SetPinDirection+0xae>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	0a 94       	dec	r0
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_SetPinDirection+0xaa>
 3fc:	84 2b       	or	r24, r20
 3fe:	8c 93       	st	X, r24
 400:	94 c0       	rjmp	.+296    	; 0x52a <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=24)&&(PinNum<=31))		//PORT D
 402:	89 81       	ldd	r24, Y+1	; 0x01
 404:	88 31       	cpi	r24, 0x18	; 24
 406:	08 f4       	brcc	.+2      	; 0x40a <DIO_SetPinDirection+0xc0>
 408:	90 c0       	rjmp	.+288    	; 0x52a <DIO_SetPinDirection+0x1e0>
 40a:	89 81       	ldd	r24, Y+1	; 0x01
 40c:	80 32       	cpi	r24, 0x20	; 32
 40e:	08 f0       	brcs	.+2      	; 0x412 <DIO_SetPinDirection+0xc8>
 410:	8c c0       	rjmp	.+280    	; 0x52a <DIO_SetPinDirection+0x1e0>
		{
			Set_Bit(DDRD,(PinNum-24));
 412:	a1 e3       	ldi	r26, 0x31	; 49
 414:	b0 e0       	ldi	r27, 0x00	; 0
 416:	e1 e3       	ldi	r30, 0x31	; 49
 418:	f0 e0       	ldi	r31, 0x00	; 0
 41a:	80 81       	ld	r24, Z
 41c:	48 2f       	mov	r20, r24
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	88 2f       	mov	r24, r24
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	9c 01       	movw	r18, r24
 426:	28 51       	subi	r18, 0x18	; 24
 428:	30 40       	sbci	r19, 0x00	; 0
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 2e       	mov	r0, r18
 430:	02 c0       	rjmp	.+4      	; 0x436 <DIO_SetPinDirection+0xec>
 432:	88 0f       	add	r24, r24
 434:	99 1f       	adc	r25, r25
 436:	0a 94       	dec	r0
 438:	e2 f7       	brpl	.-8      	; 0x432 <DIO_SetPinDirection+0xe8>
 43a:	84 2b       	or	r24, r20
 43c:	8c 93       	st	X, r24
 43e:	75 c0       	rjmp	.+234    	; 0x52a <DIO_SetPinDirection+0x1e0>
		}
	}
	else if(PinDirection==INPUT)
 440:	8a 81       	ldd	r24, Y+2	; 0x02
 442:	88 23       	and	r24, r24
 444:	09 f0       	breq	.+2      	; 0x448 <DIO_SetPinDirection+0xfe>
 446:	71 c0       	rjmp	.+226    	; 0x52a <DIO_SetPinDirection+0x1e0>
	{
		if(PinNum>=0&&PinNum<=7)	//PORT A
 448:	89 81       	ldd	r24, Y+1	; 0x01
 44a:	88 30       	cpi	r24, 0x08	; 8
 44c:	a8 f4       	brcc	.+42     	; 0x478 <DIO_SetPinDirection+0x12e>
		{
			Clr_Bit(DDRA,PinNum);
 44e:	aa e3       	ldi	r26, 0x3A	; 58
 450:	b0 e0       	ldi	r27, 0x00	; 0
 452:	ea e3       	ldi	r30, 0x3A	; 58
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	48 2f       	mov	r20, r24
 45a:	89 81       	ldd	r24, Y+1	; 0x01
 45c:	28 2f       	mov	r18, r24
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 2e       	mov	r0, r18
 466:	02 c0       	rjmp	.+4      	; 0x46c <DIO_SetPinDirection+0x122>
 468:	88 0f       	add	r24, r24
 46a:	99 1f       	adc	r25, r25
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <DIO_SetPinDirection+0x11e>
 470:	80 95       	com	r24
 472:	84 23       	and	r24, r20
 474:	8c 93       	st	X, r24
 476:	59 c0       	rjmp	.+178    	; 0x52a <DIO_SetPinDirection+0x1e0>
		}
	
		else if((PinNum>=8)&&(PinNum<=15))	//PORT B
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	88 30       	cpi	r24, 0x08	; 8
 47c:	d8 f0       	brcs	.+54     	; 0x4b4 <DIO_SetPinDirection+0x16a>
 47e:	89 81       	ldd	r24, Y+1	; 0x01
 480:	80 31       	cpi	r24, 0x10	; 16
 482:	c0 f4       	brcc	.+48     	; 0x4b4 <DIO_SetPinDirection+0x16a>
		{
			Clr_Bit(DDRB,(PinNum-8));
 484:	a7 e3       	ldi	r26, 0x37	; 55
 486:	b0 e0       	ldi	r27, 0x00	; 0
 488:	e7 e3       	ldi	r30, 0x37	; 55
 48a:	f0 e0       	ldi	r31, 0x00	; 0
 48c:	80 81       	ld	r24, Z
 48e:	48 2f       	mov	r20, r24
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	88 2f       	mov	r24, r24
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	9c 01       	movw	r18, r24
 498:	28 50       	subi	r18, 0x08	; 8
 49a:	30 40       	sbci	r19, 0x00	; 0
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 2e       	mov	r0, r18
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <DIO_SetPinDirection+0x15e>
 4a4:	88 0f       	add	r24, r24
 4a6:	99 1f       	adc	r25, r25
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <DIO_SetPinDirection+0x15a>
 4ac:	80 95       	com	r24
 4ae:	84 23       	and	r24, r20
 4b0:	8c 93       	st	X, r24
 4b2:	3b c0       	rjmp	.+118    	; 0x52a <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=16)&&(PinNum<=23))	//PORT C
 4b4:	89 81       	ldd	r24, Y+1	; 0x01
 4b6:	80 31       	cpi	r24, 0x10	; 16
 4b8:	d8 f0       	brcs	.+54     	; 0x4f0 <DIO_SetPinDirection+0x1a6>
 4ba:	89 81       	ldd	r24, Y+1	; 0x01
 4bc:	88 31       	cpi	r24, 0x18	; 24
 4be:	c0 f4       	brcc	.+48     	; 0x4f0 <DIO_SetPinDirection+0x1a6>
		{
			Clr_Bit(DDRC,(PinNum-16));
 4c0:	a4 e3       	ldi	r26, 0x34	; 52
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	e4 e3       	ldi	r30, 0x34	; 52
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	80 81       	ld	r24, Z
 4ca:	48 2f       	mov	r20, r24
 4cc:	89 81       	ldd	r24, Y+1	; 0x01
 4ce:	88 2f       	mov	r24, r24
 4d0:	90 e0       	ldi	r25, 0x00	; 0
 4d2:	9c 01       	movw	r18, r24
 4d4:	20 51       	subi	r18, 0x10	; 16
 4d6:	30 40       	sbci	r19, 0x00	; 0
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	02 2e       	mov	r0, r18
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_SetPinDirection+0x19a>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	0a 94       	dec	r0
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_SetPinDirection+0x196>
 4e8:	80 95       	com	r24
 4ea:	84 23       	and	r24, r20
 4ec:	8c 93       	st	X, r24
 4ee:	1d c0       	rjmp	.+58     	; 0x52a <DIO_SetPinDirection+0x1e0>
		}
			
		else if((PinNum>=24)&&(PinNum<=31)) 	//PORT D
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	88 31       	cpi	r24, 0x18	; 24
 4f4:	d0 f0       	brcs	.+52     	; 0x52a <DIO_SetPinDirection+0x1e0>
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	80 32       	cpi	r24, 0x20	; 32
 4fa:	b8 f4       	brcc	.+46     	; 0x52a <DIO_SetPinDirection+0x1e0>

		{
			Clr_Bit(DDRD,(PinNum-24));
 4fc:	a1 e3       	ldi	r26, 0x31	; 49
 4fe:	b0 e0       	ldi	r27, 0x00	; 0
 500:	e1 e3       	ldi	r30, 0x31	; 49
 502:	f0 e0       	ldi	r31, 0x00	; 0
 504:	80 81       	ld	r24, Z
 506:	48 2f       	mov	r20, r24
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 2f       	mov	r24, r24
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	9c 01       	movw	r18, r24
 510:	28 51       	subi	r18, 0x18	; 24
 512:	30 40       	sbci	r19, 0x00	; 0
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	02 2e       	mov	r0, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_SetPinDirection+0x1d6>
 51c:	88 0f       	add	r24, r24
 51e:	99 1f       	adc	r25, r25
 520:	0a 94       	dec	r0
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_SetPinDirection+0x1d2>
 524:	80 95       	com	r24
 526:	84 23       	and	r24, r20
 528:	8c 93       	st	X, r24
		}
	}
}
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	cf 91       	pop	r28
 530:	df 91       	pop	r29
 532:	08 95       	ret

00000534 <timer0_init>:
#include "Standard_Types.h"



void timer0_init(void)  // timer initial
{
 534:	df 93       	push	r29
 536:	cf 93       	push	r28
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
    TCCR0 |= (1 << CS01)|(1 << CS00); //prescaler=64
 53c:	a3 e5       	ldi	r26, 0x53	; 83
 53e:	b0 e0       	ldi	r27, 0x00	; 0
 540:	e3 e5       	ldi	r30, 0x53	; 83
 542:	f0 e0       	ldi	r31, 0x00	; 0
 544:	80 81       	ld	r24, Z
 546:	83 60       	ori	r24, 0x03	; 3
 548:	8c 93       	st	X, r24
    TCNT0 = 0;
 54a:	e2 e5       	ldi	r30, 0x52	; 82
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	10 82       	st	Z, r1
}
 550:	cf 91       	pop	r28
 552:	df 91       	pop	r29
 554:	08 95       	ret

00000556 <timer_delay>:


void timer_delay(uint32 n)
{
 556:	df 93       	push	r29
 558:	cf 93       	push	r28
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
 55e:	28 97       	sbiw	r28, 0x08	; 8
 560:	0f b6       	in	r0, 0x3f	; 63
 562:	f8 94       	cli
 564:	de bf       	out	0x3e, r29	; 62
 566:	0f be       	out	0x3f, r0	; 63
 568:	cd bf       	out	0x3d, r28	; 61
 56a:	6d 83       	std	Y+5, r22	; 0x05
 56c:	7e 83       	std	Y+6, r23	; 0x06
 56e:	8f 83       	std	Y+7, r24	; 0x07
 570:	98 87       	std	Y+8, r25	; 0x08
	uint32 i;
	OCR0=249;
 572:	ec e5       	ldi	r30, 0x5C	; 92
 574:	f0 e0       	ldi	r31, 0x00	; 0
 576:	89 ef       	ldi	r24, 0xF9	; 249
 578:	80 83       	st	Z, r24
	TCNT0=0;
 57a:	e2 e5       	ldi	r30, 0x52	; 82
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	10 82       	st	Z, r1
	for(i=0;i<n/2;i++)
 580:	19 82       	std	Y+1, r1	; 0x01
 582:	1a 82       	std	Y+2, r1	; 0x02
 584:	1b 82       	std	Y+3, r1	; 0x03
 586:	1c 82       	std	Y+4, r1	; 0x04
 588:	1b c0       	rjmp	.+54     	; 0x5c0 <timer_delay+0x6a>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
 58a:	e8 e5       	ldi	r30, 0x58	; 88
 58c:	f0 e0       	ldi	r31, 0x00	; 0
 58e:	80 81       	ld	r24, Z
 590:	88 2f       	mov	r24, r24
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	81 70       	andi	r24, 0x01	; 1
 596:	90 70       	andi	r25, 0x00	; 0
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	b9 f3       	breq	.-18     	; 0x58a <timer_delay+0x34>
		Set_Bit(TIFR,OCF0);
 59c:	a8 e5       	ldi	r26, 0x58	; 88
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	e8 e5       	ldi	r30, 0x58	; 88
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	80 81       	ld	r24, Z
 5a6:	82 60       	ori	r24, 0x02	; 2
 5a8:	8c 93       	st	X, r24
void timer_delay(uint32 n)
{
	uint32 i;
	OCR0=249;
	TCNT0=0;
	for(i=0;i<n/2;i++)
 5aa:	89 81       	ldd	r24, Y+1	; 0x01
 5ac:	9a 81       	ldd	r25, Y+2	; 0x02
 5ae:	ab 81       	ldd	r26, Y+3	; 0x03
 5b0:	bc 81       	ldd	r27, Y+4	; 0x04
 5b2:	01 96       	adiw	r24, 0x01	; 1
 5b4:	a1 1d       	adc	r26, r1
 5b6:	b1 1d       	adc	r27, r1
 5b8:	89 83       	std	Y+1, r24	; 0x01
 5ba:	9a 83       	std	Y+2, r25	; 0x02
 5bc:	ab 83       	std	Y+3, r26	; 0x03
 5be:	bc 83       	std	Y+4, r27	; 0x04
 5c0:	8d 81       	ldd	r24, Y+5	; 0x05
 5c2:	9e 81       	ldd	r25, Y+6	; 0x06
 5c4:	af 81       	ldd	r26, Y+7	; 0x07
 5c6:	b8 85       	ldd	r27, Y+8	; 0x08
 5c8:	9c 01       	movw	r18, r24
 5ca:	ad 01       	movw	r20, r26
 5cc:	56 95       	lsr	r21
 5ce:	47 95       	ror	r20
 5d0:	37 95       	ror	r19
 5d2:	27 95       	ror	r18
 5d4:	89 81       	ldd	r24, Y+1	; 0x01
 5d6:	9a 81       	ldd	r25, Y+2	; 0x02
 5d8:	ab 81       	ldd	r26, Y+3	; 0x03
 5da:	bc 81       	ldd	r27, Y+4	; 0x04
 5dc:	82 17       	cp	r24, r18
 5de:	93 07       	cpc	r25, r19
 5e0:	a4 07       	cpc	r26, r20
 5e2:	b5 07       	cpc	r27, r21
 5e4:	90 f2       	brcs	.-92     	; 0x58a <timer_delay+0x34>
	{
		while((TIFR&OCF0)==0);	//	(polling on OCF0 flag)
		Set_Bit(TIFR,OCF0);
	}

}
 5e6:	28 96       	adiw	r28, 0x08	; 8
 5e8:	0f b6       	in	r0, 0x3f	; 63
 5ea:	f8 94       	cli
 5ec:	de bf       	out	0x3e, r29	; 62
 5ee:	0f be       	out	0x3f, r0	; 63
 5f0:	cd bf       	out	0x3d, r28	; 61
 5f2:	cf 91       	pop	r28
 5f4:	df 91       	pop	r29
 5f6:	08 95       	ret

000005f8 <del_ms>:
 *      Author: Hossam-PC
 */
#include "del.h"

void del_ms(uint32 x)
{
 5f8:	df 93       	push	r29
 5fa:	cf 93       	push	r28
 5fc:	cd b7       	in	r28, 0x3d	; 61
 5fe:	de b7       	in	r29, 0x3e	; 62
 600:	2c 97       	sbiw	r28, 0x0c	; 12
 602:	0f b6       	in	r0, 0x3f	; 63
 604:	f8 94       	cli
 606:	de bf       	out	0x3e, r29	; 62
 608:	0f be       	out	0x3f, r0	; 63
 60a:	cd bf       	out	0x3d, r28	; 61
 60c:	69 87       	std	Y+9, r22	; 0x09
 60e:	7a 87       	std	Y+10, r23	; 0x0a
 610:	8b 87       	std	Y+11, r24	; 0x0b
 612:	9c 87       	std	Y+12, r25	; 0x0c
	volatile uint32 i,j;
	for(i=0;i<x;i++)
 614:	19 82       	std	Y+1, r1	; 0x01
 616:	1a 82       	std	Y+2, r1	; 0x02
 618:	1b 82       	std	Y+3, r1	; 0x03
 61a:	1c 82       	std	Y+4, r1	; 0x04
 61c:	24 c0       	rjmp	.+72     	; 0x666 <del_ms+0x6e>
	{
		for(j=0;j<240;j++);
 61e:	1d 82       	std	Y+5, r1	; 0x05
 620:	1e 82       	std	Y+6, r1	; 0x06
 622:	1f 82       	std	Y+7, r1	; 0x07
 624:	18 86       	std	Y+8, r1	; 0x08
 626:	0b c0       	rjmp	.+22     	; 0x63e <del_ms+0x46>
 628:	8d 81       	ldd	r24, Y+5	; 0x05
 62a:	9e 81       	ldd	r25, Y+6	; 0x06
 62c:	af 81       	ldd	r26, Y+7	; 0x07
 62e:	b8 85       	ldd	r27, Y+8	; 0x08
 630:	01 96       	adiw	r24, 0x01	; 1
 632:	a1 1d       	adc	r26, r1
 634:	b1 1d       	adc	r27, r1
 636:	8d 83       	std	Y+5, r24	; 0x05
 638:	9e 83       	std	Y+6, r25	; 0x06
 63a:	af 83       	std	Y+7, r26	; 0x07
 63c:	b8 87       	std	Y+8, r27	; 0x08
 63e:	8d 81       	ldd	r24, Y+5	; 0x05
 640:	9e 81       	ldd	r25, Y+6	; 0x06
 642:	af 81       	ldd	r26, Y+7	; 0x07
 644:	b8 85       	ldd	r27, Y+8	; 0x08
 646:	80 3f       	cpi	r24, 0xF0	; 240
 648:	91 05       	cpc	r25, r1
 64a:	a1 05       	cpc	r26, r1
 64c:	b1 05       	cpc	r27, r1
 64e:	60 f3       	brcs	.-40     	; 0x628 <del_ms+0x30>
#include "del.h"

void del_ms(uint32 x)
{
	volatile uint32 i,j;
	for(i=0;i<x;i++)
 650:	89 81       	ldd	r24, Y+1	; 0x01
 652:	9a 81       	ldd	r25, Y+2	; 0x02
 654:	ab 81       	ldd	r26, Y+3	; 0x03
 656:	bc 81       	ldd	r27, Y+4	; 0x04
 658:	01 96       	adiw	r24, 0x01	; 1
 65a:	a1 1d       	adc	r26, r1
 65c:	b1 1d       	adc	r27, r1
 65e:	89 83       	std	Y+1, r24	; 0x01
 660:	9a 83       	std	Y+2, r25	; 0x02
 662:	ab 83       	std	Y+3, r26	; 0x03
 664:	bc 83       	std	Y+4, r27	; 0x04
 666:	29 81       	ldd	r18, Y+1	; 0x01
 668:	3a 81       	ldd	r19, Y+2	; 0x02
 66a:	4b 81       	ldd	r20, Y+3	; 0x03
 66c:	5c 81       	ldd	r21, Y+4	; 0x04
 66e:	89 85       	ldd	r24, Y+9	; 0x09
 670:	9a 85       	ldd	r25, Y+10	; 0x0a
 672:	ab 85       	ldd	r26, Y+11	; 0x0b
 674:	bc 85       	ldd	r27, Y+12	; 0x0c
 676:	28 17       	cp	r18, r24
 678:	39 07       	cpc	r19, r25
 67a:	4a 07       	cpc	r20, r26
 67c:	5b 07       	cpc	r21, r27
 67e:	78 f2       	brcs	.-98     	; 0x61e <del_ms+0x26>
	{
		for(j=0;j<240;j++);
	}
}
 680:	2c 96       	adiw	r28, 0x0c	; 12
 682:	0f b6       	in	r0, 0x3f	; 63
 684:	f8 94       	cli
 686:	de bf       	out	0x3e, r29	; 62
 688:	0f be       	out	0x3f, r0	; 63
 68a:	cd bf       	out	0x3d, r28	; 61
 68c:	cf 91       	pop	r28
 68e:	df 91       	pop	r29
 690:	08 95       	ret

00000692 <main>:
void se7en_show(uint8 num);
void se7en_enable(uint8 num);
void se7en_init(void);

int main(void)
{
 692:	df 93       	push	r29
 694:	cf 93       	push	r28
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
	se7en_init();
 69a:	0e 94 ae 03 	call	0x75c	; 0x75c <se7en_init>
	se7en_enable(1);
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	0e 94 95 03 	call	0x72a	; 0x72a <se7en_enable>
	se7en_show(7);
 6a4:	87 e0       	ldi	r24, 0x07	; 7
 6a6:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <se7en_show>

   return 0;
 6aa:	80 e0       	ldi	r24, 0x00	; 0
 6ac:	90 e0       	ldi	r25, 0x00	; 0

}
 6ae:	cf 91       	pop	r28
 6b0:	df 91       	pop	r29
 6b2:	08 95       	ret

000006b4 <se7en_show>:


void se7en_show(uint8 num)
{
 6b4:	df 93       	push	r29
 6b6:	cf 93       	push	r28
 6b8:	0f 92       	push	r0
 6ba:	cd b7       	in	r28, 0x3d	; 61
 6bc:	de b7       	in	r29, 0x3e	; 62
 6be:	89 83       	std	Y+1, r24	; 0x01
	DIO_WritePin(se7seg_A,(num&(0x01)));
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
 6c2:	98 2f       	mov	r25, r24
 6c4:	91 70       	andi	r25, 0x01	; 1
 6c6:	88 e0       	ldi	r24, 0x08	; 8
 6c8:	69 2f       	mov	r22, r25
 6ca:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(se7seg_B,(num&(0x02))>>1);
 6ce:	89 81       	ldd	r24, Y+1	; 0x01
 6d0:	88 2f       	mov	r24, r24
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	82 70       	andi	r24, 0x02	; 2
 6d6:	90 70       	andi	r25, 0x00	; 0
 6d8:	95 95       	asr	r25
 6da:	87 95       	ror	r24
 6dc:	98 2f       	mov	r25, r24
 6de:	89 e0       	ldi	r24, 0x09	; 9
 6e0:	69 2f       	mov	r22, r25
 6e2:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(se7seg_C,(num&(0x04))>>2);
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
 6e8:	88 2f       	mov	r24, r24
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	84 70       	andi	r24, 0x04	; 4
 6ee:	90 70       	andi	r25, 0x00	; 0
 6f0:	95 95       	asr	r25
 6f2:	87 95       	ror	r24
 6f4:	95 95       	asr	r25
 6f6:	87 95       	ror	r24
 6f8:	98 2f       	mov	r25, r24
 6fa:	8a e0       	ldi	r24, 0x0A	; 10
 6fc:	69 2f       	mov	r22, r25
 6fe:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(se7seg_D,(num&(0x08))>>3);
 702:	89 81       	ldd	r24, Y+1	; 0x01
 704:	88 2f       	mov	r24, r24
 706:	90 e0       	ldi	r25, 0x00	; 0
 708:	88 70       	andi	r24, 0x08	; 8
 70a:	90 70       	andi	r25, 0x00	; 0
 70c:	95 95       	asr	r25
 70e:	87 95       	ror	r24
 710:	95 95       	asr	r25
 712:	87 95       	ror	r24
 714:	95 95       	asr	r25
 716:	87 95       	ror	r24
 718:	98 2f       	mov	r25, r24
 71a:	8b e0       	ldi	r24, 0x0B	; 11
 71c:	69 2f       	mov	r22, r25
 71e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
}
 722:	0f 90       	pop	r0
 724:	cf 91       	pop	r28
 726:	df 91       	pop	r29
 728:	08 95       	ret

0000072a <se7en_enable>:

void se7en_enable(uint8 num)
{
 72a:	df 93       	push	r29
 72c:	cf 93       	push	r28
 72e:	0f 92       	push	r0
 730:	cd b7       	in	r28, 0x3d	; 61
 732:	de b7       	in	r29, 0x3e	; 62
 734:	89 83       	std	Y+1, r24	; 0x01
	if(num==1)
 736:	89 81       	ldd	r24, Y+1	; 0x01
 738:	81 30       	cpi	r24, 0x01	; 1
 73a:	29 f4       	brne	.+10     	; 0x746 <se7en_enable+0x1c>
	DIO_WritePin(se7seg_EN1,HIGH);
 73c:	8a e1       	ldi	r24, 0x1A	; 26
 73e:	61 e0       	ldi	r22, 0x01	; 1
 740:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
 744:	07 c0       	rjmp	.+14     	; 0x754 <se7en_enable+0x2a>
	else if(num==2)
 746:	89 81       	ldd	r24, Y+1	; 0x01
 748:	82 30       	cpi	r24, 0x02	; 2
 74a:	21 f4       	brne	.+8      	; 0x754 <se7en_enable+0x2a>
	DIO_WritePin(se7seg_EN2,HIGH);
 74c:	8b e1       	ldi	r24, 0x1B	; 27
 74e:	61 e0       	ldi	r22, 0x01	; 1
 750:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
}
 754:	0f 90       	pop	r0
 756:	cf 91       	pop	r28
 758:	df 91       	pop	r29
 75a:	08 95       	ret

0000075c <se7en_init>:

void se7en_init(void)
{
 75c:	df 93       	push	r29
 75e:	cf 93       	push	r28
 760:	cd b7       	in	r28, 0x3d	; 61
 762:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPinDirection(se7seg_A,OUTPUT);
 764:	88 e0       	ldi	r24, 0x08	; 8
 766:	61 e0       	ldi	r22, 0x01	; 1
 768:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_B,OUTPUT);
 76c:	89 e0       	ldi	r24, 0x09	; 9
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_C,OUTPUT);
 774:	8a e0       	ldi	r24, 0x0A	; 10
 776:	61 e0       	ldi	r22, 0x01	; 1
 778:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_D,OUTPUT);
 77c:	8b e0       	ldi	r24, 0x0B	; 11
 77e:	61 e0       	ldi	r22, 0x01	; 1
 780:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_EN1,OUTPUT);
 784:	8a e1       	ldi	r24, 0x1A	; 26
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinDirection>
	DIO_SetPinDirection(se7seg_EN2,OUTPUT);
 78c:	8b e1       	ldi	r24, 0x1B	; 27
 78e:	61 e0       	ldi	r22, 0x01	; 1
 790:	0e 94 a5 01 	call	0x34a	; 0x34a <DIO_SetPinDirection>

	DIO_WritePin(se7seg_A,LOW);
 794:	88 e0       	ldi	r24, 0x08	; 8
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
 79c:	88 e0       	ldi	r24, 0x08	; 8
 79e:	60 e0       	ldi	r22, 0x00	; 0
 7a0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
 7a4:	88 e0       	ldi	r24, 0x08	; 8
 7a6:	60 e0       	ldi	r22, 0x00	; 0
 7a8:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
	DIO_WritePin(se7seg_A,LOW);
 7ac:	88 e0       	ldi	r24, 0x08	; 8
 7ae:	60 e0       	ldi	r22, 0x00	; 0
 7b0:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_WritePin>
}
 7b4:	cf 91       	pop	r28
 7b6:	df 91       	pop	r29
 7b8:	08 95       	ret

000007ba <_exit>:
 7ba:	f8 94       	cli

000007bc <__stop_program>:
 7bc:	ff cf       	rjmp	.-2      	; 0x7bc <__stop_program>
